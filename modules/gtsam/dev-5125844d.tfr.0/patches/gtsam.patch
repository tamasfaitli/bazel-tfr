
diff --git a/.bazelrc b/.bazelrc
new file mode 100644
index 0000000..155525e
--- /dev/null
+++ b/.bazelrc
@@ -0,0 +1,7 @@
+
+build --cxxopt='-std=c++17'
+build --cxxopt='-pthread'
+
+common --registry=file:///home/tamasfaitli/Workspace/bazel-registry
+common --registry=https://bcr.bazel.build
+

diff --git a/.bazelversion b/.bazelversion
new file mode 100644
index 0000000..815da58
--- /dev/null
+++ b/.bazelversion
@@ -0,0 +1 @@
+7.4.1

diff --git a/BUILD b/BUILD
new file mode 100644
index 0000000..fa2ca79
--- /dev/null
+++ b/BUILD
@@ -0,0 +1,403 @@
+
+package(default_visibility = ["//visibility:public"])
+
+licenses(["notice"])
+
+DEFS = ["GTSAM_ENABLE_BOOST_SERIALIZATION"]
+
+
+# 3rd party libs
+cc_library(
+    name = "SuiteSparse_config",
+    srcs = glob([
+        "gtsam/3rdparty/SuiteSparse_config/SuiteSparse_config.c",
+    ]),
+    hdrs = glob([
+        "gtsam/3rdparty/SuiteSparse_config/SuiteSparse_config.h",
+    ]),
+    visibility = ["//:__subpackages__"]
+)
+
+cc_library(
+    name = "ccolamd",
+    srcs = glob([
+        "gtsam/3rdparty/CCOLAMD/Source/ccolamd.c",
+    ]),
+    hdrs = glob([
+        "gtsam/3rdparty/CCOLAMD/Include/ccolamd.h",
+    ]),
+    visibility = ["//:__subpackages__"],
+    strip_include_prefix = "gtsam/3rdparty/CCOLAMD/Include",
+    includes = [
+        "gtsam/3rdparty/SuiteSparse_config"
+    ],
+    deps = [
+        ":SuiteSparse_config"
+    ],
+)
+
+cc_library(
+    name = "GKlib",
+    srcs = glob([
+        "gtsam/3rdparty/metis/GKlib/b64.c",
+        "gtsam/3rdparty/metis/GKlib/blas.c",
+        "gtsam/3rdparty/metis/GKlib/csr.c",
+        "gtsam/3rdparty/metis/GKlib/error.c",
+        "gtsam/3rdparty/metis/GKlib/evaluate.c",
+        "gtsam/3rdparty/metis/GKlib/fkvkselect.c",
+        "gtsam/3rdparty/metis/GKlib/fs.c",
+        "gtsam/3rdparty/metis/GKlib/getopt.c",
+        "gtsam/3rdparty/metis/GKlib/gkregex.c",
+        "gtsam/3rdparty/metis/GKlib/graph.c",
+        "gtsam/3rdparty/metis/GKlib/htable.c",
+        "gtsam/3rdparty/metis/GKlib/io.c",
+        "gtsam/3rdparty/metis/GKlib/itemsets.c",
+        "gtsam/3rdparty/metis/GKlib/mcore.c",
+        "gtsam/3rdparty/metis/GKlib/memory.c",
+        "gtsam/3rdparty/metis/GKlib/omp.c",
+        "gtsam/3rdparty/metis/GKlib/pdb.c",
+        "gtsam/3rdparty/metis/GKlib/pqueue.c",
+        "gtsam/3rdparty/metis/GKlib/random.c",
+        "gtsam/3rdparty/metis/GKlib/rw.c",
+        "gtsam/3rdparty/metis/GKlib/seq.c",
+        "gtsam/3rdparty/metis/GKlib/sort.c",
+        "gtsam/3rdparty/metis/GKlib/string.c",
+        "gtsam/3rdparty/metis/GKlib/timers.c",
+        "gtsam/3rdparty/metis/GKlib/tokenizer.c",
+        "gtsam/3rdparty/metis/GKlib/util.c",
+        "gtsam/3rdparty/metis/GKlib/gk_arch.h",
+        "gtsam/3rdparty/metis/GKlib/gk_defs.h",
+        "gtsam/3rdparty/metis/GKlib/gk_externs.h",
+        "gtsam/3rdparty/metis/GKlib/gk_getopt.h",
+        "gtsam/3rdparty/metis/GKlib/gk_macros.h",
+        "gtsam/3rdparty/metis/GKlib/gk_mkblas.h",
+        "gtsam/3rdparty/metis/GKlib/gk_mkmemory.h",
+        "gtsam/3rdparty/metis/GKlib/gk_mkpqueue.h",
+        "gtsam/3rdparty/metis/GKlib/gk_mkpqueue2.h",
+        "gtsam/3rdparty/metis/GKlib/gk_mkrandom.h",
+        "gtsam/3rdparty/metis/GKlib/gk_mksort.h",
+        "gtsam/3rdparty/metis/GKlib/gk_mkutils.h",
+        "gtsam/3rdparty/metis/GKlib/gk_proto.h",
+        "gtsam/3rdparty/metis/GKlib/gk_struct.h",
+        "gtsam/3rdparty/metis/GKlib/gk_types.h",
+        "gtsam/3rdparty/metis/GKlib/gkregex.h",
+        "gtsam/3rdparty/metis/GKlib/ms_inttypes.h",
+        "gtsam/3rdparty/metis/GKlib/ms_stat.h",
+        "gtsam/3rdparty/metis/GKlib/ms_stdint.h",
+    ]),
+    hdrs = glob(["gtsam/3rdparty/metis/GKlib/GKlib.h"]),
+    visibility = ["//:__subpackages__"],
+    copts = ["-fopenmp"],
+    linkopts = ["-lgomp"],
+    includes = ["gtsam/3rdparty/metis/GKlib"],
+)
+
+cc_library(
+    name = "metis",
+    srcs = glob([
+        "gtsam/3rdparty/metis/libmetis/**/*.c",
+        "gtsam/3rdparty/metis/libmetis/**/*.h",
+    ]),
+    hdrs = glob([
+        "gtsam/3rdparty/metis/include/metis.h",
+    ]),
+    deps = [
+        ":GKlib",
+    ],
+    includes = [
+        "gtsam/3rdparty/metis/include",
+        "gtsam/3rdparty/metis/libmetis"
+    ],
+    visibility = ["//:__subpackages__"],
+    copts = ["-fopenmp"],
+    linkopts = ["-lgomp"],
+)
+
+cc_library(
+    name = "ceres",
+    textual_hdrs = glob([
+        "gtsam/3rdparty/ceres/*.h",
+    ]),
+    visibility = ["//:__subpackages__"],
+)
+
+cc_library(
+    name = "cephes",
+    srcs = glob([
+        "gtsam/3rdparty/cephes/cephes/bdtr.c",
+        "gtsam/3rdparty/cephes/cephes/airy.c",
+        "gtsam/3rdparty/cephes/cephes/besselpoly.c",
+        "gtsam/3rdparty/cephes/cephes/beta.c",
+        "gtsam/3rdparty/cephes/cephes/btdtr.c",
+        "gtsam/3rdparty/cephes/cephes/cbrt.c",
+        "gtsam/3rdparty/cephes/cephes/chbevl.c",
+        "gtsam/3rdparty/cephes/cephes/chdtr.c",
+        "gtsam/3rdparty/cephes/cephes/const.c",
+        "gtsam/3rdparty/cephes/cephes/dawsn.c",
+        "gtsam/3rdparty/cephes/cephes/dd_real.c",
+        "gtsam/3rdparty/cephes/cephes/ellie.c",
+        "gtsam/3rdparty/cephes/cephes/ellik.c",
+        "gtsam/3rdparty/cephes/cephes/ellpe.c",
+        "gtsam/3rdparty/cephes/cephes/ellpj.c",
+        "gtsam/3rdparty/cephes/cephes/ellpk.c",
+        "gtsam/3rdparty/cephes/cephes/erfinv.c",
+        "gtsam/3rdparty/cephes/cephes/exp10.c",
+        "gtsam/3rdparty/cephes/cephes/exp2.c",
+        "gtsam/3rdparty/cephes/cephes/expn.c",
+        "gtsam/3rdparty/cephes/cephes/fdtr.c",
+        "gtsam/3rdparty/cephes/cephes/fresnl.c",
+        "gtsam/3rdparty/cephes/cephes/gamma.c",
+        "gtsam/3rdparty/cephes/cephes/gammasgn.c",
+        "gtsam/3rdparty/cephes/cephes/gdtr.c",
+        "gtsam/3rdparty/cephes/cephes/hyp2f1.c",
+        "gtsam/3rdparty/cephes/cephes/hyperg.c",
+        "gtsam/3rdparty/cephes/cephes/i0.c",
+        "gtsam/3rdparty/cephes/cephes/i1.c",
+        "gtsam/3rdparty/cephes/cephes/igam.c",
+        "gtsam/3rdparty/cephes/cephes/igami.c",
+        "gtsam/3rdparty/cephes/cephes/incbet.c",
+        "gtsam/3rdparty/cephes/cephes/incbi.c",
+        "gtsam/3rdparty/cephes/cephes/j0.c",
+        "gtsam/3rdparty/cephes/cephes/j1.c",
+        "gtsam/3rdparty/cephes/cephes/jv.c",
+        "gtsam/3rdparty/cephes/cephes/k0.c",
+        "gtsam/3rdparty/cephes/cephes/k1.c",
+        "gtsam/3rdparty/cephes/cephes/kn.c",
+        "gtsam/3rdparty/cephes/cephes/kolmogorov.c",
+        "gtsam/3rdparty/cephes/cephes/lanczos.c",
+        "gtsam/3rdparty/cephes/cephes/nbdtr.c",
+        "gtsam/3rdparty/cephes/cephes/ndtr.c",
+        "gtsam/3rdparty/cephes/cephes/ndtri.c",
+        "gtsam/3rdparty/cephes/cephes/owens_t.c",
+        "gtsam/3rdparty/cephes/cephes/pdtr.c",
+        "gtsam/3rdparty/cephes/cephes/poch.c",
+        "gtsam/3rdparty/cephes/cephes/psi.c",
+        "gtsam/3rdparty/cephes/cephes/rgamma.c",
+        "gtsam/3rdparty/cephes/cephes/round.c",
+        "gtsam/3rdparty/cephes/cephes/sf_error.c",
+        "gtsam/3rdparty/cephes/cephes/shichi.c",
+        "gtsam/3rdparty/cephes/cephes/sici.c",
+        "gtsam/3rdparty/cephes/cephes/sindg.c",
+        "gtsam/3rdparty/cephes/cephes/sinpi.c",
+        "gtsam/3rdparty/cephes/cephes/spence.c",
+        "gtsam/3rdparty/cephes/cephes/stdtr.c",
+        "gtsam/3rdparty/cephes/cephes/tandg.c",
+        "gtsam/3rdparty/cephes/cephes/tukey.c",
+        "gtsam/3rdparty/cephes/cephes/unity.c",
+        "gtsam/3rdparty/cephes/cephes/yn.c",
+        "gtsam/3rdparty/cephes/cephes/yv.c",
+        "gtsam/3rdparty/cephes/cephes/zeta.c",
+        "gtsam/3rdparty/cephes/cephes/zetac.c",
+        "gtsam/3rdparty/cephes/dllexport.h",
+    ]),
+    hdrs = glob([
+        "gtsam/3rdparty/cephes/cephes.h",
+        "gtsam/3rdparty/cephes/cephes/dd_idefs.h",
+        "gtsam/3rdparty/cephes/cephes/dd_real.h",
+        "gtsam/3rdparty/cephes/cephes/dd_real_idefs.h",
+        "gtsam/3rdparty/cephes/cephes/expn.h",
+        "gtsam/3rdparty/cephes/cephes/igam.h",
+        "gtsam/3rdparty/cephes/cephes/lanczos.h",
+        "gtsam/3rdparty/cephes/cephes/mconf.h",
+        "gtsam/3rdparty/cephes/cephes/polevl.h",
+        "gtsam/3rdparty/cephes/cephes/sf_error.h",
+        "gtsam/3rdparty/cephes/dllexport.h",
+    ]),
+    includes = [
+        "gtsam/3rdparty/cephes",
+    ],
+    visibility = ["//visibility:public"],
+)
+
+## GTSAM
+cc_library(
+    name = "gtsam_cfg",
+    hdrs = glob([
+        "gtsam/config.h",
+        "gtsam/dllexport.h",
+        "gtsam/global_includes.h",
+    ]),
+    defines = DEFS,
+)
+
+cc_library(
+    name = "gtsam_deps",
+    deps = [
+        ":gtsam_cfg",
+        "@eigen",
+        "@onetbb//:tbb",
+        "@onetbb//:tbbmalloc",
+        "@boost.serialization",
+        "@boost.system",
+        "@boost.filesystem",
+    ],
+    defines = DEFS,
+)
+
+cc_library(
+    name = "base",
+    srcs = glob([
+        "gtsam/base/**/*.cpp",
+    ],
+    exclude = [
+        "gtsam/base/tests/**",
+        # NOTE: uncomment (exclude) these if GTSAM_ENABLE_BOOST_SERIALIZATION is not used
+        # "base/serializationTestHelpers.h",
+        # "base/serialization.h",
+    ]),
+    hdrs = glob([
+        "gtsam/base/**/*.h",
+    ]),
+    deps = [
+        ":gtsam_deps",
+    ],
+    defines = DEFS,
+)
+
+# these are cross-dependent so building them as one
+cc_library(
+    name = "gtsam_codependent",
+    srcs = glob([
+        "gtsam/discrete/**/*.cpp",
+        "gtsam/geometry/**/*.cpp",
+        "gtsam/hybrid/**/*.cpp",
+        "gtsam/linear/**/*.cpp",
+        "gtsam/nonlinear/**/*.cpp",
+        "gtsam/sfm/**/*.cpp",
+        "gtsam/slam/**/*.cpp",
+        "gtsam/3rdparty/Spectra/**/*.h",
+    ],
+    exclude = [
+        "gtsam/discrete/tests/**",
+        "gtsam/geometry/tests/**",
+        "gtsam/hybrid/tests/**",
+        "gtsam/linear/tests/**",
+        "gtsam/nonlinear/tests/**",
+        "gtsam/sfm/tests/**",
+        "gtsam/slam/tests/**",
+        # NOTE: these were excluded in cmakelists too
+        "gtsam/slam/serialization.cpp",
+        "gtsam/slam/serialization.h",
+    ]),
+    hdrs = glob([
+        "gtsam/discrete/**/*.h",
+        "gtsam/geometry/**/*.h",
+        "gtsam/hybrid/**/*.h",
+        "gtsam/linear/**/*.h",
+        "gtsam/nonlinear/**/*.h",
+        "gtsam/sfm/**/*.h",
+        "gtsam/slam/**/*.h",
+    ]),
+    deps = [
+        ":gtsam_deps",
+        ":base",
+        ":inference",
+        ":symbolic",
+        ":sam",
+        ":cephes",
+    ],
+    includes = [
+        "gtsam/3rdparty/Spectra",
+    ],
+    defines = DEFS,
+)
+
+cc_library(
+    name = "inference",
+    srcs = glob([
+        "gtsam/inference/**/*.cpp",
+    ],
+    exclude = [
+        "gtsam/inference/tests/**",
+        # NOTE: excluding these if GTSAM_USE_BOOST_FEATURES is not used
+        "gtsam/inference/graph.h",
+        "gtsam/inference/graph-inl.h",
+    ]),
+    hdrs = glob(["gtsam/inference/**/*.h"]),
+    deps = [
+        ":gtsam_deps",
+        ":base",
+        ":ccolamd",
+        ":metis"
+    ],
+    defines = DEFS,
+)
+
+cc_library(
+    name = "symbolic",
+    srcs = glob(["gtsam/symbolic/**/*.cpp"],
+    exclude = ["gtsam/symbolic/tests/**"]),
+    hdrs = glob(["gtsam/symbolic/**/*.h"]),
+    deps = [
+        ":gtsam_deps",
+        ":inference",
+        ":base",
+    ],
+    defines = DEFS,
+)
+
+cc_library(
+    name = "sam",
+    srcs = glob(["gtsam/sam/**/*.cpp"],
+    exclude = ["gtsam/sam/tests/**"]),
+    hdrs = glob(["gtsam/sam/**/*.h"]),
+    deps = [
+        ":gtsam_deps",
+        ":base",
+    ],
+    defines = DEFS,
+)
+
+cc_library(
+    name = "basis",
+    srcs = glob(["gtsam/basis/**/*.cpp"],
+    exclude = ["gtsam/basis/tests/**"]),
+    hdrs = glob(["gtsam/basis/**/*.h"]),
+    deps = [
+        ":gtsam_deps",
+        ":base",
+    ],
+    defines = DEFS,
+)
+
+cc_library(
+    name = "navigation",
+    srcs = glob(["gtsam/navigation/**/*.cpp"],
+    exclude = ["gtsam/navigation/tests/**"]),
+    hdrs = glob(["gtsam/navigation/**/*.h"]),
+    deps = [
+        ":gtsam_deps",
+        ":base",
+        ":gtsam_codependent"
+    ],
+    defines = DEFS,
+)
+
+
+cc_library(
+    name = "gtsam",
+    deps = [
+        ":base",
+        ":basis",
+        ":inference",
+        ":navigation",
+        ":sam",
+        ":symbolic",
+        ":ceres",
+    ],
+    defines = DEFS,
+)
+
+cc_library(
+    name = "CppUnitLite",
+    srcs = glob([
+        "CppUnitLite/*.cpp",
+    ]),
+    hdrs = glob([
+        "CppUnitLite/*.h"
+    ]),
+)
+
+load("//bzl:gen_cc_tests.bzl", "generate_cc_tests")
+generate_cc_tests()
+

diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100644
index 0000000..d8a51b3
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,22 @@
+
+module(
+    name = "gtsam",
+    version = "dev-5125844d.tfr.0",
+    bazel_compatibility = [">=7.2.1"],
+    compatibility_level = 0
+)
+
+bazel_dep(name = "eigen", version = "3.4.0")
+
+bazel_dep(name = "boost.serialization", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.system", version = "1.83.0.bcr.1")
+bazel_dep(name = "boost.filesystem", version = "1.83.0.bcr.1")
+
+# :tbb and :tbbmalloc
+bazel_dep(name = "onetbb", version = "2022.0.0")
+
+
+# for examples
+bazel_dep(name = "boost.program_options", version = "1.83.0.bcr.1")
+
+bazel_dep(name = "hedron_compile_commands", version = "1.0.0.tfr.1", dev_dependency = True)

diff --git a/bzl/BUILD b/bzl/BUILD
new file mode 100644
index 0000000..139597f
--- /dev/null
+++ b/bzl/BUILD
@@ -0,0 +1,2 @@
+
+

diff --git a/bzl/gen_cc_tests.bzl b/bzl/gen_cc_tests.bzl
new file mode 100644
index 0000000..42cf792
--- /dev/null
+++ b/bzl/gen_cc_tests.bzl
@@ -0,0 +1,2231 @@
+def generate_cc_tests():
+    return [
+
+        native.cc_test(
+            name = "testDiscreteFactorGraph",
+            srcs = ["gtsam/discrete/tests/testDiscreteFactorGraph.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDiscreteDistribution",
+            srcs = ["gtsam/discrete/tests/testDiscreteDistribution.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDecisionTree",
+            srcs = ["gtsam/discrete/tests/testDecisionTree.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testAlgebraicDecisionTree",
+            srcs = ["gtsam/discrete/tests/testAlgebraicDecisionTree.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDiscreteFactor",
+            srcs = ["gtsam/discrete/tests/testDiscreteFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDiscreteConditional",
+            srcs = ["gtsam/discrete/tests/testDiscreteConditional.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDecisionTreeFactor",
+            srcs = ["gtsam/discrete/tests/testDecisionTreeFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDiscreteBayesTree",
+            srcs = ["gtsam/discrete/tests/testDiscreteBayesTree.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDiscreteMarginals",
+            srcs = ["gtsam/discrete/tests/testDiscreteMarginals.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSignature",
+            srcs = ["gtsam/discrete/tests/testSignature.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDiscreteValues",
+            srcs = ["gtsam/discrete/tests/testDiscreteValues.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDiscreteBayesNet",
+            srcs = ["gtsam/discrete/tests/testDiscreteBayesNet.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationDiscrete",
+            srcs = ["gtsam/discrete/tests/testSerializationDiscrete.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSignatureParser",
+            srcs = ["gtsam/discrete/tests/testSignatureParser.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDiscreteLookupDAG",
+            srcs = ["gtsam/discrete/tests/testDiscreteLookupDAG.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testTableFactor",
+            srcs = ["gtsam/discrete/tests/testTableFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSparseEigen",
+            srcs = [
+                "gtsam/linear/tests/testSparseEigen.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testGaussianConditional",
+            srcs = [
+                "gtsam/linear/tests/testGaussianConditional.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testGaussianFactorGraph",
+            srcs = [
+                "gtsam/linear/tests/testGaussianFactorGraph.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHessianFactor",
+            srcs = [
+                "gtsam/linear/tests/testHessianFactor.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testJacobianFactor",
+            srcs = [
+                "gtsam/linear/tests/testJacobianFactor.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSampler",
+            srcs = [
+                "gtsam/linear/tests/testSampler.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testVectorValues",
+            srcs = [
+                "gtsam/linear/tests/testVectorValues.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testGaussianDensity",
+            srcs = [
+                "gtsam/linear/tests/testGaussianDensity.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testNoiseModel",
+            srcs = [
+                "gtsam/linear/tests/testNoiseModel.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testErrors",
+            srcs = [
+                "gtsam/linear/tests/testErrors.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testAcceleratedPowerMethod",
+            srcs = [
+                "gtsam/linear/tests/testAcceleratedPowerMethod.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testRegularJacobianFactor",
+            srcs = [
+                "gtsam/linear/tests/testRegularJacobianFactor.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testRegularHessianFactor",
+            srcs = [
+                "gtsam/linear/tests/testRegularHessianFactor.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testGaussianBayesNet",
+            srcs = [
+                "gtsam/linear/tests/testGaussianBayesNet.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationLinear",
+            srcs = [
+                "gtsam/linear/tests/testSerializationLinear.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testScatter",
+            srcs = [
+                "gtsam/linear/tests/testScatter.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPowerMethod",
+            srcs = [
+                "gtsam/linear/tests/testPowerMethod.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testKalmanFilter",
+            srcs = [
+                "gtsam/linear/tests/testKalmanFilter.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testGaussianBayesTree",
+            srcs = [
+                "gtsam/linear/tests/testGaussianBayesTree.cpp",
+                "gtsam/linear/tests/powerMethodExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridEstimation",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridEstimation.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridConditional",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridConditional.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridBayesNet",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridBayesNet.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridMotionModel",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridMotionModel.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridNonlinearFactorGraph",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridNonlinearFactorGraph.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridNonlinearFactor",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridNonlinearFactor.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridValues",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridValues.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridBayesTree",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridBayesTree.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridGaussianISAM",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridGaussianISAM.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridGaussianConditional",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridGaussianConditional.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridGaussianFactor",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridGaussianFactor.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationHybrid",
+            srcs = [
+                "gtsam/hybrid/tests/testSerializationHybrid.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testGaussianMixture",
+            srcs = [
+                "gtsam/hybrid/tests/testGaussianMixture.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridNonlinearISAM",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridNonlinearISAM.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridFactorGraph",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridFactorGraph.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridGaussianProductFactor",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridGaussianProductFactor.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testHybridGaussianFactorGraph",
+            srcs = [
+                "gtsam/hybrid/tests/testHybridGaussianFactorGraph.cpp",
+                "gtsam/hybrid/tests/Switching.h",
+                "gtsam/hybrid/tests/TinyHybridExample.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSO4",
+            srcs = [
+                "gtsam/geometry/tests/testSO4.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSimilarity2",
+            srcs = [
+                "gtsam/geometry/tests/testSimilarity2.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPinholeCamera",
+            srcs = [
+                "gtsam/geometry/tests/testPinholeCamera.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationGeometry",
+            srcs = [
+                "gtsam/geometry/tests/testSerializationGeometry.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testOrientedPlane3",
+            srcs = [
+                "gtsam/geometry/tests/testOrientedPlane3.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testUnit3",
+            srcs = [
+                "gtsam/geometry/tests/testUnit3.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCal3Bundler",
+            srcs = [
+                "gtsam/geometry/tests/testCal3Bundler.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testFundamentalMatrix",
+            srcs = [
+                "gtsam/geometry/tests/testFundamentalMatrix.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testEssentialMatrix",
+            srcs = [
+                "gtsam/geometry/tests/testEssentialMatrix.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testRot3",
+            srcs = [
+                "gtsam/geometry/tests/testRot3.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testQuaternion",
+            srcs = [
+                "gtsam/geometry/tests/testQuaternion.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testTriangulation",
+            srcs = [
+                "gtsam/geometry/tests/testTriangulation.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPinholePose",
+            srcs = [
+                "gtsam/geometry/tests/testPinholePose.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSO3",
+            srcs = [
+                "gtsam/geometry/tests/testSO3.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCal3DFisheye",
+            srcs = [
+                "gtsam/geometry/tests/testCal3DFisheye.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testStereoPoint2",
+            srcs = [
+                "gtsam/geometry/tests/testStereoPoint2.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testRot2",
+            srcs = [
+                "gtsam/geometry/tests/testRot2.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testLine3",
+            srcs = [
+                "gtsam/geometry/tests/testLine3.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCal3DS2",
+            srcs = [
+                "gtsam/geometry/tests/testCal3DS2.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testRot3M",
+            srcs = [
+                "gtsam/geometry/tests/testRot3M.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCalibratedCamera",
+            srcs = [
+                "gtsam/geometry/tests/testCalibratedCamera.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testBearingRange",
+            srcs = [
+                "gtsam/geometry/tests/testBearingRange.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPoint2",
+            srcs = [
+                "gtsam/geometry/tests/testPoint2.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPose2",
+            srcs = [
+                "gtsam/geometry/tests/testPose2.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCal3_S2",
+            srcs = [
+                "gtsam/geometry/tests/testCal3_S2.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPoint3",
+            srcs = [
+                "gtsam/geometry/tests/testPoint3.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCal3Unified",
+            srcs = [
+                "gtsam/geometry/tests/testCal3Unified.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testStereoCamera",
+            srcs = [
+                "gtsam/geometry/tests/testStereoCamera.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSphericalCamera",
+            srcs = [
+                "gtsam/geometry/tests/testSphericalCamera.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSimilarity3",
+            srcs = [
+                "gtsam/geometry/tests/testSimilarity3.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCal3_S2Stereo",
+            srcs = [
+                "gtsam/geometry/tests/testCal3_S2Stereo.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSOn",
+            srcs = [
+                "gtsam/geometry/tests/testSOn.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCycli",
+            srcs = [
+                "gtsam/geometry/tests/testCyclic.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPinholeSet",
+            srcs = [
+                "gtsam/geometry/tests/testPinholeSet.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCal3f",
+            srcs = [
+                "gtsam/geometry/tests/testCal3f.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCameraSet",
+            srcs = [
+                "gtsam/geometry/tests/testCameraSet.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPose3",
+            srcs = [
+                "gtsam/geometry/tests/testPose3.cpp",
+                "gtsam/geometry/tests/testPoseAdjointMap.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testEssentialMatrixConstraint",
+            srcs = [
+                "gtsam/slam/tests/testEssentialMatrixConstraint.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testInitializePose3",
+            srcs = [
+                "gtsam/slam/tests/testInitializePose3.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPoseRotationPrior",
+            srcs = [
+                "gtsam/slam/tests/testPoseRotationPrior.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDataset",
+            srcs = [
+                "gtsam/slam/tests/testDataset.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSmartProjectionRigFactor",
+            srcs = [
+                "gtsam/slam/tests/testSmartProjectionRigFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testRegularImplicitSchurFactor",
+            srcs = [
+                "gtsam/slam/tests/testRegularImplicitSchurFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testKarcherMeanFactor",
+            srcs = [
+                "gtsam/slam/tests/testKarcherMeanFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testFrobeniusFactor",
+            srcs = [
+                "gtsam/slam/tests/testFrobeniusFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testBetweenFactor",
+            srcs = [
+                "gtsam/slam/tests/testBetweenFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testGeneralSFMFactor_Cal3Bundler",
+            srcs = [
+                "gtsam/slam/tests/testGeneralSFMFactor_Cal3Bundler.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPriorFactor",
+            srcs = [
+                "gtsam/slam/tests/testPriorFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testEssentialMatrixFactor",
+            srcs = [
+                "gtsam/slam/tests/testEssentialMatrixFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPoseTranslationPrior",
+            srcs = [
+                "gtsam/slam/tests/testPoseTranslationPrior.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationDataset",
+            srcs = [
+                "gtsam/slam/tests/testSerializationDataset.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationInSlam",
+            srcs = [
+                "gtsam/slam/tests/testSerializationInSlam.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testStereoFactor",
+            srcs = [
+                "gtsam/slam/tests/testStereoFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testTriangulationFactor",
+            srcs = [
+                "gtsam/slam/tests/testTriangulationFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testOrientedPlane3Factor",
+            srcs = [
+                "gtsam/slam/tests/testOrientedPlane3Factor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testRotateFactor",
+            srcs = [
+                "gtsam/slam/tests/testRotateFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSmartProjectionPoseFactor",
+            srcs = [
+                "gtsam/slam/tests/testSmartProjectionPoseFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testLago",
+            srcs = [
+                "gtsam/slam/tests/testLago.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testGeneralSFMFactor",
+            srcs = [
+                "gtsam/slam/tests/testGeneralSFMFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSmartFactorBase",
+            srcs = [
+                "gtsam/slam/tests/testSmartFactorBase.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testProjectionFactor",
+            srcs = [
+                "gtsam/slam/tests/testProjectionFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSlamExpressions",
+            srcs = [
+                "gtsam/slam/tests/testSlamExpressions.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSmartProjectionFactor",
+            srcs = [
+                "gtsam/slam/tests/testSmartProjectionFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testInitializePose",
+            srcs = [
+                "gtsam/slam/tests/testInitializePose.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testAntiFactor",
+            srcs = [
+                "gtsam/slam/tests/testAntiFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testReferenceFrameFactor",
+            srcs = [
+                "gtsam/slam/tests/testReferenceFrameFactor.cpp",
+                "gtsam/slam/tests/PinholeFactor.h",
+                "gtsam/slam/tests/smartFactorScenarios.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDebug",
+            srcs = ["gtsam/base/tests/testDebug.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testMatrix",
+            srcs = ["gtsam/base/tests/testMatrix.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testFastContainers",
+            srcs = ["gtsam/base/tests/testFastContainers.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testNumericalDerivative",
+            srcs = ["gtsam/base/tests/testNumericalDerivative.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testGrou",
+            srcs = ["gtsam/base/tests/testGroup.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDSFMa",
+            srcs = ["gtsam/base/tests/testDSFMap.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymmetricBlockMatrix",
+            srcs = ["gtsam/base/tests/testSymmetricBlockMatrix.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationBase",
+            srcs = ["gtsam/base/tests/testSerializationBase.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testDSFVector",
+            srcs = ["gtsam/base/tests/testDSFVector.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testStdOptionalSerialization",
+            srcs = ["gtsam/base/tests/testStdOptionalSerialization.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testKruskal",
+            srcs = ["gtsam/base/tests/testKruskal.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testOptionalJacobian",
+            srcs = ["gtsam/base/tests/testOptionalJacobian.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testVector",
+            srcs = ["gtsam/base/tests/testVector.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCholesky",
+            srcs = ["gtsam/base/tests/testCholesky.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testWeightedSampler",
+            srcs = ["gtsam/base/tests/testWeightedSampler.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testTreeTraversal",
+            srcs = ["gtsam/base/tests/testTreeTraversal.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testVerticalBlockMatrix",
+            srcs = ["gtsam/base/tests/testVerticalBlockMatrix.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testMFAS",
+            srcs = ["gtsam/sfm/tests/testMFAS.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testShonanGaugeFactor",
+            srcs = ["gtsam/sfm/tests/testShonanGaugeFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testTranslationFactor",
+            srcs = ["gtsam/sfm/tests/testTranslationFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testShonanFactor",
+            srcs = ["gtsam/sfm/tests/testShonanFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testShonanAveraging",
+            srcs = ["gtsam/sfm/tests/testShonanAveraging.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSfmData",
+            srcs = ["gtsam/sfm/tests/testSfmData.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testBinaryMeasurement",
+            srcs = ["gtsam/sfm/tests/testBinaryMeasurement.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSfmTrack",
+            srcs = ["gtsam/sfm/tests/testSfmTrack.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testTransferFactor",
+            srcs = ["gtsam/sfm/tests/testTransferFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testExpression",
+            srcs = ["gtsam/nonlinear/tests/testExpression.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testExecutionTrace",
+            srcs = ["gtsam/nonlinear/tests/testExecutionTrace.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCallRecord",
+            srcs = ["gtsam/nonlinear/tests/testCallRecord.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testBatchFixedLagSmoother",
+            srcs = ["gtsam/nonlinear/tests/testBatchFixedLagSmoother.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testAdaptAutoDiff",
+            srcs = ["gtsam/nonlinear/tests/testAdaptAutoDiff.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testFactorTesting",
+            srcs = ["gtsam/nonlinear/tests/testFactorTesting.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testLinearContainerFactor",
+            srcs = ["gtsam/nonlinear/tests/testLinearContainerFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationNonlinear",
+            srcs = ["gtsam/nonlinear/tests/testSerializationNonlinear.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testFunctorizedFactor",
+            srcs = ["gtsam/nonlinear/tests/testFunctorizedFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testWhiteNoiseFactor",
+            srcs = ["gtsam/nonlinear/tests/testWhiteNoiseFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testNonlinearConjugateGradientOptimizer",
+            srcs = ["gtsam/nonlinear/tests/testNonlinearConjugateGradientOptimizer.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testValues",
+            srcs = ["gtsam/nonlinear/tests/testValues.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testUtilities",
+            srcs = ["gtsam/nonlinear/tests/testUtilities.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testChebyshev",
+            srcs = ["gtsam/basis/tests/testChebyshev.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testChebyshev2",
+            srcs = ["gtsam/basis/tests/testChebyshev2.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testBasisFactors",
+            srcs = ["gtsam/basis/tests/testBasisFactors.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testFourier",
+            srcs = ["gtsam/basis/tests/testFourier.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testBearingFactor",
+            srcs = ["gtsam/sam/tests/testBearingFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testBearingRangeFactor",
+            srcs = ["gtsam/sam/tests/testBearingRangeFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testRangeFactor",
+            srcs = ["gtsam/sam/tests/testRangeFactor.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationSam",
+            srcs = ["gtsam/sam/tests/testSerializationSam.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testLabeledSymbol",
+            srcs = ["gtsam/inference/tests/testLabeledSymbol.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testVariableSlots",
+            srcs = ["gtsam/inference/tests/testVariableSlots.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testOrdering",
+            srcs = ["gtsam/inference/tests/testOrdering.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testKey",
+            srcs = ["gtsam/inference/tests/testKey.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testEdgeKey",
+            srcs = ["gtsam/inference/tests/testEdgeKey.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymbol",
+            srcs = ["gtsam/inference/tests/testSymbol.cpp"],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testCombinedImuFactor",
+            srcs = [
+                "gtsam/navigation/tests/testCombinedImuFactor.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testBarometricFactor",
+            srcs = [
+                "gtsam/navigation/tests/testBarometricFactor.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPoseVelocityBias",
+            srcs = [
+                "gtsam/navigation/tests/testPoseVelocityBias.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testNavExpressions",
+            srcs = [
+                "gtsam/navigation/tests/testNavExpressions.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testAHRSFactor",
+            srcs = [
+                "gtsam/navigation/tests/testAHRSFactor.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testScenarioRunner",
+            srcs = [
+                "gtsam/navigation/tests/testScenarioRunner.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testMagFactor",
+            srcs = [
+                "gtsam/navigation/tests/testMagFactor.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testManifoldPreintegration",
+            srcs = [
+                "gtsam/navigation/tests/testManifoldPreintegration.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testConstantVelocityFactor",
+            srcs = [
+                "gtsam/navigation/tests/testConstantVelocityFactor.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testImuBias",
+            srcs = [
+                "gtsam/navigation/tests/testImuBias.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testTangentPreintegration",
+            srcs = [
+                "gtsam/navigation/tests/testTangentPreintegration.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testAttitudeFactor",
+            srcs = [
+                "gtsam/navigation/tests/testAttitudeFactor.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testImuFactor",
+            srcs = [
+                "gtsam/navigation/tests/testImuFactor.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationNavigation",
+            srcs = [
+                "gtsam/navigation/tests/testSerializationNavigation.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testPreintegratedRotation",
+            srcs = [
+                "gtsam/navigation/tests/testPreintegratedRotation.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testScenario",
+            srcs = [
+                "gtsam/navigation/tests/testScenario.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testNavState",
+            srcs = [
+                "gtsam/navigation/tests/testNavState.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testMagPoseFactor",
+            srcs = [
+                "gtsam/navigation/tests/testMagPoseFactor.cpp",
+                "gtsam/navigation/tests/imuFactorTesting.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymbolicEliminationTree",
+            srcs = [
+                "gtsam/symbolic/tests/testSymbolicEliminationTree.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymbolicConditional",
+            srcs = [
+                "gtsam/symbolic/tests/testSymbolicConditional.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymbolicISAM",
+            srcs = [
+                "gtsam/symbolic/tests/testSymbolicISAM.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testVariableIndex",
+            srcs = [
+                "gtsam/symbolic/tests/testVariableIndex.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSerializationSymboli",
+            srcs = [
+                "gtsam/symbolic/tests/testSerializationSymbolic.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymbolicFactor",
+            srcs = [
+                "gtsam/symbolic/tests/testSymbolicFactor.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymbolicBayesTree",
+            srcs = [
+                "gtsam/symbolic/tests/testSymbolicBayesTree.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymbolicJunctionTree",
+            srcs = [
+                "gtsam/symbolic/tests/testSymbolicJunctionTree.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymbolicFactorGraph",
+            srcs = [
+                "gtsam/symbolic/tests/testSymbolicFactorGraph.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+        native.cc_test(
+            name = "testSymbolicBayesNet",
+            srcs = [
+                "gtsam/symbolic/tests/testSymbolicBayesNet.cpp",
+                "gtsam/symbolic/tests/symbolicExampleGraphs.h",
+            ],
+            deps = [
+                "//:CppUnitLite",
+                "//:gtsam",
+            ],
+        ),
+
+    ]
\ No newline at end of file

diff --git a/examples/BUILD b/examples/BUILD
new file mode 100644
index 0000000..db03dcf
--- /dev/null
+++ b/examples/BUILD
@@ -0,0 +1,474 @@
+
+cc_library(
+    name = "SFMdata_header",
+    hdrs = glob(["SFMdata.h"]),
+    visibility = ["//:__subpackages__"],
+)
+
+
+filegroup(
+    name = "test_data",
+    srcs = glob([
+        "Data/**"
+    ])
+)
+
+cc_binary(
+    name = "CameraResectioning",
+    srcs = glob(["CameraResectioning.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "CombinedImuFactorsExample",
+    srcs = glob(["CombinedImuFactorsExample.cpp"]),
+    deps = [
+        "//:gtsam",
+        "@boost.program_options"
+    ],
+)
+
+cc_binary(
+    name = "CreateSFMExampleData",
+    srcs = glob(["CreateSFMExampleData.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "DiscreteBayesNetExample",
+    srcs = glob(["DiscreteBayesNetExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "DiscreteBayesNet_FG",
+    srcs = glob(["DiscreteBayesNet_FG.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "EssentialViewGraphExample",
+    srcs = glob(["EssentialViewGraphExample.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "FisheyeExample",
+    srcs = glob(["FisheyeExample.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "GNCExample",
+    srcs = glob(["GNCExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "HMMExample",
+    srcs = glob(["HMMExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "IMUKittiExampleGPS",
+    srcs = glob(["IMUKittiExampleGPS.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "ISAM2Example_SmartFactor",
+    srcs = glob(["ISAM2Example_SmartFactor.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "ImuFactorsExample",
+    srcs = glob(["ImuFactorsExample.cpp"]),
+    deps = [
+        "//:gtsam",
+        "@boost.program_options"
+    ],
+)
+
+cc_binary(
+    name = "ImuFactorsExample2",
+    srcs = glob(["ImuFactorsExample2.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "InverseKinematicsExampleExpressions",
+    srcs = glob(["InverseKinematicsExampleExpressions.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "LocalizationExample",
+    srcs = glob(["LocalizationExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "METISOrderingExample",
+    srcs = glob(["METISOrderingExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "OdometryExample",
+    srcs = glob(["OdometryExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "PlanarSLAMExample",
+    srcs = glob(["PlanarSLAMExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose2SLAMExample",
+    srcs = glob(["Pose2SLAMExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose2SLAMExampleExpressions",
+    srcs = glob(["Pose2SLAMExampleExpressions.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose2SLAMExample_g2o",
+    srcs = glob(["Pose2SLAMExample_g2o.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose2SLAMExample_graph",
+    srcs = glob(["Pose2SLAMExample_graph.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose2SLAMExample_graphviz",
+    srcs = glob(["Pose2SLAMExample_graphviz.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose2SLAMExample_lago",
+    srcs = glob(["Pose2SLAMExample_lago.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose2SLAMStressTest",
+    srcs = glob(["Pose2SLAMStressTest.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose2SLAMwSPCG",
+    srcs = glob(["Pose2SLAMwSPCG.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose3Localization",
+    srcs = glob(["Pose3Localization.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose3SLAMExampleExpressions_BearingRangeWithTransform",
+    srcs = glob([
+        "Pose3SLAMExampleExpressions_BearingRangeWithTransform.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "Pose3SLAMExample_changeKeys",
+    srcs = glob(["Pose3SLAMExample_changeKeys.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose3SLAMExample_g2o",
+    srcs = glob(["Pose3SLAMExample_g2o.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose3SLAMExample_initializePose3Chordal",
+    srcs = glob(["Pose3SLAMExample_initializePose3Chordal.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "Pose3SLAMExample_initializePose3Gradient",
+    srcs = glob(["Pose3SLAMExample_initializePose3Gradient.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "RangeISAMExample_plaza2",
+    srcs = glob(["RangeISAMExample_plaza2.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "SFMExample",
+    srcs = glob(["SFMExample.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "SFMExampleExpressions",
+    srcs = glob(["SFMExampleExpressions.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "SFMExampleExpressions_bal",
+    srcs = glob(["SFMExampleExpressions_bal.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "SFMExample_SmartFactor",
+    srcs = glob(["SFMExample_SmartFactor.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "SFMExample_SmartFactorPCG",
+    srcs = glob(["SFMExample_SmartFactorPCG.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "SFMExample_bal",
+    srcs = glob(["SFMExample_bal.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "SFMExample_bal_COLAMD_METIS",
+    srcs = glob(["SFMExample_bal_COLAMD_METIS.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "SelfCalibrationExample",
+    srcs = glob(["SelfCalibrationExample.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "ShonanAveragingCLI",
+    srcs = glob(["ShonanAveragingCLI.cpp"]),
+    deps = [
+        "//:gtsam",
+        "@boost.program_options",
+    ],
+)
+
+cc_binary(
+    name = "SimpleRotation",
+    srcs = glob(["SimpleRotation.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "SolverComparer",
+    srcs = glob(["SolverComparer.cpp"]),
+    deps = [
+        "//:gtsam",
+        "@boost.program_options",
+    ],
+)
+
+cc_binary(
+    name = "StereoVOExample",
+    srcs = glob(["StereoVOExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "StereoVOExample_large",
+    srcs = glob(["StereoVOExample_large.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "TimeTBB",
+    srcs = glob(["TimeTBB.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "TriangulationLOSTExample",
+    srcs = glob(["TriangulationLOSTExample.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "UGM_chain",
+    srcs = glob(["UGM_chain.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "UGM_small",
+    srcs = glob(["UGM_small.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+cc_binary(
+    name = "ViewGraphExample",
+    srcs = glob(["ViewGraphExample.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "VisualISAM2Example",
+    srcs = glob(["VisualISAM2Example.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "VisualISAMExample",
+    srcs = glob(["VisualISAMExample.cpp"]),
+    deps = [
+        "//:gtsam",
+        ":SFMdata_header",
+    ],
+)
+
+cc_binary(
+    name = "easyPoint2KalmanFilter",
+    srcs = glob(["easyPoint2KalmanFilter.cpp"]),
+    deps = [
+        "//:gtsam",
+    ],
+)
+
+# WARN: this does not work, not sure if its due to being on dev branch or something with bazelification
+# cc_binary(
+#     name = "elaboratePoint2KalmanFilter",
+#     srcs = glob(["elaboratePoint2KalmanFilter.cpp"]),
+#     deps = [
+#         "//:gtsam",
+#     ],
+# )
+

diff --git a/examples/CameraResectioning.cpp b/examples/CameraResectioning.cpp
index dc451cf..798c4c3 100644
--- a/examples/CameraResectioning.cpp
+++ b/examples/CameraResectioning.cpp
@@ -16,10 +16,10 @@
  * @date    Aug 23, 2011
  */
 
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Cal3_S2.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Cal3_S2.h"
 
 using namespace gtsam;
 using namespace gtsam::noiseModel;

diff --git a/examples/CombinedImuFactorsExample.cpp b/examples/CombinedImuFactorsExample.cpp
index 436b6e2..d599f0a 100644
--- a/examples/CombinedImuFactorsExample.cpp
+++ b/examples/CombinedImuFactorsExample.cpp
@@ -36,14 +36,14 @@
 #include <boost/program_options.hpp>
 
 // GTSAM related includes.
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/navigation/CombinedImuFactor.h>
-#include <gtsam/navigation/GPSFactor.h>
-#include <gtsam/navigation/ImuFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/navigation/CombinedImuFactor.h"
+#include "gtsam/navigation/GPSFactor.h"
+#include "gtsam/navigation/ImuFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/dataset.h"
 
 #include <cstring>
 #include <fstream>

diff --git a/examples/CreateSFMExampleData.cpp b/examples/CreateSFMExampleData.cpp
index cf7755b..1ec279f 100644
--- a/examples/CreateSFMExampleData.cpp
+++ b/examples/CreateSFMExampleData.cpp
@@ -15,8 +15,8 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/geometry/CalibratedCamera.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/geometry/CalibratedCamera.h"
+#include "gtsam/slam/dataset.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/DiscreteBayesNetExample.cpp b/examples/DiscreteBayesNetExample.cpp
index 09ee8ba..885415d 100644
--- a/examples/DiscreteBayesNetExample.cpp
+++ b/examples/DiscreteBayesNetExample.cpp
@@ -16,9 +16,9 @@
  * @date  JULY 10, 2020
  */
 
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteMarginals.h>
-#include <gtsam/inference/BayesNet.h>
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteMarginals.h"
+#include "gtsam/inference/BayesNet.h"
 
 #include <iomanip>
 

diff --git a/examples/DiscreteBayesNet_FG.cpp b/examples/DiscreteBayesNet_FG.cpp
index 8890400..eb75586 100644
--- a/examples/DiscreteBayesNet_FG.cpp
+++ b/examples/DiscreteBayesNet_FG.cpp
@@ -22,8 +22,8 @@
  * except that everything is using GTSAM.
  */
 
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteMarginals.h>
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteMarginals.h"
 
 #include <iomanip>
 

diff --git a/examples/EssentialViewGraphExample.cpp b/examples/EssentialViewGraphExample.cpp
index 205708c..6c002c3 100644
--- a/examples/EssentialViewGraphExample.cpp
+++ b/examples/EssentialViewGraphExample.cpp
@@ -16,18 +16,18 @@
  * @date    October 2024
  */
 
-#include <gtsam/geometry/Cal3f.h>
-#include <gtsam/geometry/EssentialMatrix.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/inference/EdgeKey.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/sfm/TransferFactor.h>  // Contains EssentialTransferFactorK
+#include "gtsam/geometry/Cal3f.h"
+#include "gtsam/geometry/EssentialMatrix.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/inference/EdgeKey.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/sfm/TransferFactor.h"  // Contains EssentialTransferFactorK
 
 #include <vector>
 

diff --git a/examples/FisheyeExample.cpp b/examples/FisheyeExample.cpp
index 12c7876..2578ace 100644
--- a/examples/FisheyeExample.cpp
+++ b/examples/FisheyeExample.cpp
@@ -28,26 +28,26 @@
 #include "SFMdata.h"
 
 // Camera observations of landmarks will be stored as Point2 (x, y).
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Point2.h"
 
 // Each variable in the system (poses and landmarks) must be identified with a
 // unique key. We can either use simple integer keys (1, 2, 3, ...) or symbols
 // (X1, X2, L1). Here we will use Symbols
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
 // Use GaussNewtonOptimizer to solve graph
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
 
 // In GTSAM, measurement functions are represented as 'factors'. Several common
 // factors have been provided with the library for solving robotics/SLAM/Bundle
 // Adjustment problems. Here we will use Projection factors to model the
 // camera's landmark observations. Also, we will initialize the robot at some
 // location using a Prior factor.
-#include <gtsam/geometry/Cal3Fisheye.h>
-#include <gtsam/slam/PriorFactor.h>
-#include <gtsam/slam/ProjectionFactor.h>
+#include "gtsam/geometry/Cal3Fisheye.h"
+#include "gtsam/slam/PriorFactor.h"
+#include "gtsam/slam/ProjectionFactor.h"
 
 #include <fstream>
 #include <vector>

diff --git a/examples/GNCExample.cpp b/examples/GNCExample.cpp
index 8a4f070..6744340 100644
--- a/examples/GNCExample.cpp
+++ b/examples/GNCExample.cpp
@@ -22,13 +22,13 @@
  * - The robot first moves to (1.0, 0.0, 0.1) and then to (1.0, 1.0, 0.2) 
  */
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/GncOptimizer.h>
-#include <gtsam/nonlinear/GncParams.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/LevenbergMarquardtParams.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/GncOptimizer.h"
+#include "gtsam/nonlinear/GncParams.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/LevenbergMarquardtParams.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 #include <iostream>
 

diff --git a/examples/HMMExample.cpp b/examples/HMMExample.cpp
index 3a76730..544966c 100644
--- a/examples/HMMExample.cpp
+++ b/examples/HMMExample.cpp
@@ -16,9 +16,9 @@
  * @date  July 12, 2020
  */
 
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteMarginals.h>
-#include <gtsam/inference/BayesNet.h>
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteMarginals.h"
+#include "gtsam/inference/BayesNet.h"
 
 #include <iomanip>
 #include <sstream>

diff --git a/examples/IMUKittiExampleGPS.cpp b/examples/IMUKittiExampleGPS.cpp
index 66ebba8..c2b0ead 100644
--- a/examples/IMUKittiExampleGPS.cpp
+++ b/examples/IMUKittiExampleGPS.cpp
@@ -18,16 +18,16 @@
  */
 
 // GTSAM related includes.
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/navigation/CombinedImuFactor.h>
-#include <gtsam/navigation/GPSFactor.h>
-#include <gtsam/navigation/ImuFactor.h>
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/nonlinear/ISAM2Params.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/PriorFactor.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/navigation/CombinedImuFactor.h"
+#include "gtsam/navigation/GPSFactor.h"
+#include "gtsam/navigation/ImuFactor.h"
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/nonlinear/ISAM2Params.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/PriorFactor.h"
+#include "gtsam/slam/dataset.h"
 
 #include <cstring>
 #include <fstream>

diff --git a/examples/ISAM2Example_SmartFactor.cpp b/examples/ISAM2Example_SmartFactor.cpp
index 51503e3..cca343f 100644
--- a/examples/ISAM2Example_SmartFactor.cpp
+++ b/examples/ISAM2Example_SmartFactor.cpp
@@ -4,11 +4,11 @@
  * @author Alexander (pumaking on BitBucket)
  */
 
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/SmartProjectionPoseFactor.h>
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/SmartProjectionPoseFactor.h"
 
 #include <iostream>
 #include <vector>

diff --git a/examples/ImuFactorsExample.cpp b/examples/ImuFactorsExample.cpp
index 7cbc898..3262a76 100644
--- a/examples/ImuFactorsExample.cpp
+++ b/examples/ImuFactorsExample.cpp
@@ -38,15 +38,15 @@
 #include <boost/program_options.hpp>
 
 // GTSAM related includes.
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/navigation/CombinedImuFactor.h>
-#include <gtsam/navigation/GPSFactor.h>
-#include <gtsam/navigation/ImuFactor.h>
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/navigation/CombinedImuFactor.h"
+#include "gtsam/navigation/GPSFactor.h"
+#include "gtsam/navigation/ImuFactor.h"
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/dataset.h"
 
 #include <cstring>
 #include <cassert>

diff --git a/examples/ImuFactorsExample2.cpp b/examples/ImuFactorsExample2.cpp
index 742b28e..de395d2 100644
--- a/examples/ImuFactorsExample2.cpp
+++ b/examples/ImuFactorsExample2.cpp
@@ -15,14 +15,14 @@
  * @author Robert Truax
  */
 
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/navigation/ImuBias.h>
-#include <gtsam/navigation/ImuFactor.h>
-#include <gtsam/navigation/Scenario.h>
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/navigation/ImuBias.h"
+#include "gtsam/navigation/ImuFactor.h"
+#include "gtsam/navigation/Scenario.h"
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 #include <vector>
 

diff --git a/examples/InverseKinematicsExampleExpressions.cpp b/examples/InverseKinematicsExampleExpressions.cpp
index 1df83d9..70496b4 100644
--- a/examples/InverseKinematicsExampleExpressions.cpp
+++ b/examples/InverseKinematicsExampleExpressions.cpp
@@ -16,13 +16,13 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/ExpressionFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/Marginals.h>
-#include <gtsam/nonlinear/expressions.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/expressions.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/ExpressionFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/Marginals.h"
+#include "gtsam/nonlinear/expressions.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/expressions.h"
 
 #include <cmath>
 

diff --git a/examples/LocalizationExample.cpp b/examples/LocalizationExample.cpp
index ebe7d7f..ff94ed6 100644
--- a/examples/LocalizationExample.cpp
+++ b/examples/LocalizationExample.cpp
@@ -24,33 +24,33 @@
  */
 
 // We will use Pose2 variables (x, y, theta) to represent the robot positions
-#include <gtsam/geometry/Pose2.h>
+#include "gtsam/geometry/Pose2.h"
 
 // We will use simple integer Keys to refer to the robot poses.
-#include <gtsam/inference/Key.h>
+#include "gtsam/inference/Key.h"
 
 // As in OdometryExample.cpp, we use a BetweenFactor to model odometry measurements.
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/slam/BetweenFactor.h"
 
 // We add all facors to a Nonlinear Factor Graph, as our factors are nonlinear.
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 // The nonlinear solvers within GTSAM are iterative solvers, meaning they linearize the
 // nonlinear functions around an initial linearization point, then solve the linear system
 // to update the linearization point. This happens repeatedly until the solver converges
 // to a consistent set of variable values. This requires us to specify an initial guess
 // for each variable, held in a Values container.
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/Values.h"
 
 // Finally, once all of the factors have been added to our factor graph, we will want to
 // solve/optimize to graph to find the best (Maximum A Posteriori) set of variable values.
 // GTSAM includes several nonlinear optimizers to perform this step. Here we will use the
 // standard Levenberg-Marquardt solver
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
 // Once the optimized values have been calculated, we can also calculate the marginal covariance
 // of desired variables
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/nonlinear/Marginals.h"
 
 using namespace std;
 using namespace gtsam;
@@ -63,7 +63,7 @@ using namespace gtsam;
 // The factor will be a unary factor, affect only a single system variable. It will
 // also use a standard Gaussian noise model. Hence, we will derive our new factor from
 // the NoiseModelFactorN.
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 class UnaryFactor: public NoiseModelFactorN<Pose2> {
   // The factor will hold a measurement consisting of an (X,Y) location

diff --git a/examples/METISOrderingExample.cpp b/examples/METISOrderingExample.cpp
index b91e113..92dfcc8 100644
--- a/examples/METISOrderingExample.cpp
+++ b/examples/METISOrderingExample.cpp
@@ -22,12 +22,12 @@
  * - For more details on the full optimization pipeline, see OdometryExample.cpp
  */
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/Marginals.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/Marginals.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/OdometryExample.cpp b/examples/OdometryExample.cpp
index 1944d9e..fb43d0a 100644
--- a/examples/OdometryExample.cpp
+++ b/examples/OdometryExample.cpp
@@ -23,34 +23,34 @@
  */
 
 // We will use Pose2 variables (x, y, theta) to represent the robot positions
-#include <gtsam/geometry/Pose2.h>
+#include "gtsam/geometry/Pose2.h"
 
 // In GTSAM, measurement functions are represented as 'factors'. Several common factors
 // have been provided with the library for solving robotics/SLAM/Bundle Adjustment problems.
 // Here we will use Between factors for the relative motion described by odometry measurements.
 // Also, we will initialize the robot at the origin using a Prior factor.
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/slam/BetweenFactor.h"
 
 // When the factors are created, we will add them to a Factor Graph. As the factors we are using
 // are nonlinear factors, we will need a Nonlinear Factor Graph.
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 // Finally, once all of the factors have been added to our factor graph, we will want to
 // solve/optimize to graph to find the best (Maximum A Posteriori) set of variable values.
 // GTSAM includes several nonlinear optimizers to perform this step. Here we will use the
 // Levenberg-Marquardt solver
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
 // Once the optimized values have been calculated, we can also calculate the marginal covariance
 // of desired variables
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/nonlinear/Marginals.h"
 
 // The nonlinear solvers within GTSAM are iterative solvers, meaning they linearize the
 // nonlinear functions around an initial linearization point, then solve the linear system
 // to update the linearization point. This happens repeatedly until the solver converges
 // to a consistent set of variable values. This requires us to specify an initial guess
 // for each variable, held in a Values container.
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/Values.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/PlanarSLAMExample.cpp b/examples/PlanarSLAMExample.cpp
index ede2713..9e5403f 100644
--- a/examples/PlanarSLAMExample.cpp
+++ b/examples/PlanarSLAMExample.cpp
@@ -27,42 +27,42 @@
 
 // As this is a planar SLAM example, we will use Pose2 variables (x, y, theta) to represent
 // the robot positions and Point2 variables (x, y) to represent the landmark coordinates.
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Point2.h"
 
 // Each variable in the system (poses and landmarks) must be identified with a unique key.
 // We can either use simple integer keys (1, 2, 3, ...) or symbols (X1, X2, L1).
 // Here we will use Symbols
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
 // In GTSAM, measurement functions are represented as 'factors'. Several common factors
 // have been provided with the library for solving robotics/SLAM/Bundle Adjustment problems.
 // Here we will use a RangeBearing factor for the range-bearing measurements to identified
 // landmarks, and Between factors for the relative motion described by odometry measurements.
 // Also, we will initialize the robot at the origin using a Prior factor.
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
 
 // When the factors are created, we will add them to a Factor Graph. As the factors we are using
 // are nonlinear factors, we will need a Nonlinear Factor Graph.
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 // Finally, once all of the factors have been added to our factor graph, we will want to
 // solve/optimize to graph to find the best (Maximum A Posteriori) set of variable values.
 // GTSAM includes several nonlinear optimizers to perform this step. Here we will use the
 // common Levenberg-Marquardt solver
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
 // Once the optimized values have been calculated, we can also calculate the marginal covariance
 // of desired variables
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/nonlinear/Marginals.h"
 
 // The nonlinear solvers within GTSAM are iterative solvers, meaning they linearize the
 // nonlinear functions around an initial linearization point, then solve the linear system
 // to update the linearization point. This happens repeatedly until the solver converges
 // to a consistent set of variable values. This requires us to specify an initial guess
 // for each variable, held in a Values container.
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/Values.h"
 
 
 using namespace std;

diff --git a/examples/Pose2SLAMExample.cpp b/examples/Pose2SLAMExample.cpp
index f3d5559..0ee1b17 100644
--- a/examples/Pose2SLAMExample.cpp
+++ b/examples/Pose2SLAMExample.cpp
@@ -26,38 +26,38 @@
  */
 
 // In planar SLAM example we use Pose2 variables (x, y, theta) to represent the robot poses
-#include <gtsam/geometry/Pose2.h>
+#include "gtsam/geometry/Pose2.h"
 
 // We will use simple integer Keys to refer to the robot poses.
-#include <gtsam/inference/Key.h>
+#include "gtsam/inference/Key.h"
 
 // In GTSAM, measurement functions are represented as 'factors'. Several common factors
 // have been provided with the library for solving robotics/SLAM/Bundle Adjustment problems.
 // Here we will use Between factors for the relative motion described by odometry measurements.
 // We will also use a Between Factor to encode the loop closure constraint
 // Also, we will initialize the robot at the origin using a Prior factor.
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/slam/BetweenFactor.h"
 
 // When the factors are created, we will add them to a Factor Graph. As the factors we are using
 // are nonlinear factors, we will need a Nonlinear Factor Graph.
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 // Finally, once all of the factors have been added to our factor graph, we will want to
 // solve/optimize to graph to find the best (Maximum A Posteriori) set of variable values.
 // GTSAM includes several nonlinear optimizers to perform this step. Here we will use the
 // a Gauss-Newton solver
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
 
 // Once the optimized values have been calculated, we can also calculate the marginal covariance
 // of desired variables
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/nonlinear/Marginals.h"
 
 // The nonlinear solvers within GTSAM are iterative solvers, meaning they linearize the
 // nonlinear functions around an initial linearization point, then solve the linear system
 // to update the linearization point. This happens repeatedly until the solver converges
 // to a consistent set of variable values. This requires us to specify an initial guess
 // for each variable, held in a Values container.
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/Values.h"
 
 
 using namespace std;

diff --git a/examples/Pose2SLAMExampleExpressions.cpp b/examples/Pose2SLAMExampleExpressions.cpp
index 41037d0..681adec 100644
--- a/examples/Pose2SLAMExampleExpressions.cpp
+++ b/examples/Pose2SLAMExampleExpressions.cpp
@@ -17,14 +17,14 @@
  */
 
 // The two new headers that allow using our Automatic Differentiation Expression framework
-#include <gtsam/slam/expressions.h>
-#include <gtsam/nonlinear/ExpressionFactorGraph.h>
+#include "gtsam/slam/expressions.h"
+#include "gtsam/nonlinear/ExpressionFactorGraph.h"
 
 // For an explanation of headers below, please see Pose2SLAMExample.cpp
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/Marginals.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/Pose2SLAMExample_g2o.cpp b/examples/Pose2SLAMExample_g2o.cpp
index 4a77f7b..6255c24 100644
--- a/examples/Pose2SLAMExample_g2o.cpp
+++ b/examples/Pose2SLAMExample_g2o.cpp
@@ -18,9 +18,9 @@
  * @author Luca Carlone
  */
 
-#include <gtsam/slam/dataset.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
+#include "gtsam/slam/dataset.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
 #include <fstream>
 
 using namespace std;

diff --git a/examples/Pose2SLAMExample_graph.cpp b/examples/Pose2SLAMExample_graph.cpp
index cf25138..d83917f 100644
--- a/examples/Pose2SLAMExample_graph.cpp
+++ b/examples/Pose2SLAMExample_graph.cpp
@@ -17,13 +17,13 @@
  */
 
 // For an explanation of headers below, please see Pose2SLAMExample.cpp
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/Marginals.h"
 
 // This new header allows us to read examples easily from .graph files
-#include <gtsam/slam/dataset.h>
+#include "gtsam/slam/dataset.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/Pose2SLAMExample_graphviz.cpp b/examples/Pose2SLAMExample_graphviz.cpp
index a8768e2..0ce2f71 100644
--- a/examples/Pose2SLAMExample_graphviz.cpp
+++ b/examples/Pose2SLAMExample_graphviz.cpp
@@ -17,9 +17,9 @@
  */
 
 // For an explanation of headers below, please see Pose2SLAMExample.cpp
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 #include <fstream>
 
 using namespace std;

diff --git a/examples/Pose2SLAMExample_lago.cpp b/examples/Pose2SLAMExample_lago.cpp
index c470e39..8c97ea8 100644
--- a/examples/Pose2SLAMExample_lago.cpp
+++ b/examples/Pose2SLAMExample_lago.cpp
@@ -19,9 +19,9 @@
  * @author Luca Carlone
  */
 
-#include <gtsam/slam/lago.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/geometry/Pose2.h>
+#include "gtsam/slam/lago.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/geometry/Pose2.h"
 #include <fstream>
 
 using namespace std;

diff --git a/examples/Pose2SLAMStressTest.cpp b/examples/Pose2SLAMStressTest.cpp
index d7ab55a..19dd7ae 100644
--- a/examples/Pose2SLAMStressTest.cpp
+++ b/examples/Pose2SLAMStressTest.cpp
@@ -11,15 +11,15 @@
 // Use gtsam to create a prior factor for the first pose and N-1 between factors
 // and run optimization.
 
-#include <gtsam/geometry/Cal3_S2Stereo.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/StereoFactor.h>
+#include "gtsam/geometry/Cal3_S2Stereo.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/StereoFactor.h"
 
 #include <random>
 

diff --git a/examples/Pose2SLAMwSPCG.cpp b/examples/Pose2SLAMwSPCG.cpp
index 37e8ec8..97092cf 100644
--- a/examples/Pose2SLAMwSPCG.cpp
+++ b/examples/Pose2SLAMwSPCG.cpp
@@ -17,12 +17,12 @@
  */
 
 // For an explanation of headers below, please see Pose2SLAMExample.cpp
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
 // In contrast to that example, however, we will use a PCG solver here
-#include <gtsam/linear/SubgraphSolver.h>
+#include "gtsam/linear/SubgraphSolver.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/Pose3Localization.cpp b/examples/Pose3Localization.cpp
index e23e690..c97c176 100644
--- a/examples/Pose3Localization.cpp
+++ b/examples/Pose3Localization.cpp
@@ -17,10 +17,10 @@
  * @author Luca Carlone
  */
 
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/Marginals.h"
 #include <fstream>
 
 using namespace std;

diff --git a/examples/Pose3SLAMExampleExpressions_BearingRangeWithTransform.cpp b/examples/Pose3SLAMExampleExpressions_BearingRangeWithTransform.cpp
index 551814a..c105230 100644
--- a/examples/Pose3SLAMExampleExpressions_BearingRangeWithTransform.cpp
+++ b/examples/Pose3SLAMExampleExpressions_BearingRangeWithTransform.cpp
@@ -5,13 +5,13 @@
  * @date    January 4th, 2019
  */
 
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/BearingRange.h>
-#include <gtsam/slam/expressions.h>
-#include <gtsam/nonlinear/ExpressionFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/Values.h>
-#include <examples/SFMdata.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/BearingRange.h"
+#include "gtsam/slam/expressions.h"
+#include "gtsam/nonlinear/ExpressionFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/Values.h"
+#include "examples/SFMdata.h"
 
 using namespace gtsam;
 

diff --git a/examples/Pose3SLAMExample_changeKeys.cpp b/examples/Pose3SLAMExample_changeKeys.cpp
index ca9448e..69593b6 100644
--- a/examples/Pose3SLAMExample_changeKeys.cpp
+++ b/examples/Pose3SLAMExample_changeKeys.cpp
@@ -17,8 +17,8 @@
  * @author Luca Carlone
  */
 
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/BetweenFactor.h"
 #include <fstream>
 
 using namespace std;

diff --git a/examples/Pose3SLAMExample_g2o.cpp b/examples/Pose3SLAMExample_g2o.cpp
index 0c99a75..b5fecc6 100644
--- a/examples/Pose3SLAMExample_g2o.cpp
+++ b/examples/Pose3SLAMExample_g2o.cpp
@@ -17,9 +17,9 @@
  * @author Luca Carlone
  */
 
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
 #include <fstream>
 
 using namespace std;

diff --git a/examples/Pose3SLAMExample_initializePose3Chordal.cpp b/examples/Pose3SLAMExample_initializePose3Chordal.cpp
index c1cc97c..a67be04 100644
--- a/examples/Pose3SLAMExample_initializePose3Chordal.cpp
+++ b/examples/Pose3SLAMExample_initializePose3Chordal.cpp
@@ -17,9 +17,9 @@
  * @author Luca Carlone
  */
 
-#include <gtsam/slam/InitializePose3.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/slam/InitializePose3.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/BetweenFactor.h"
 #include <fstream>
 
 using namespace std;

diff --git a/examples/Pose3SLAMExample_initializePose3Gradient.cpp b/examples/Pose3SLAMExample_initializePose3Gradient.cpp
index 7403910..f1608c0 100644
--- a/examples/Pose3SLAMExample_initializePose3Gradient.cpp
+++ b/examples/Pose3SLAMExample_initializePose3Gradient.cpp
@@ -17,9 +17,9 @@
  * @author Luca Carlone
  */
 
-#include <gtsam/slam/InitializePose3.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/slam/InitializePose3.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/BetweenFactor.h"
 #include <fstream>
 
 using namespace std;

diff --git a/examples/RangeISAMExample_plaza2.cpp b/examples/RangeISAMExample_plaza2.cpp
index 39cc6c4..1c23d03 100644
--- a/examples/RangeISAMExample_plaza2.cpp
+++ b/examples/RangeISAMExample_plaza2.cpp
@@ -17,43 +17,43 @@
  */
 
 // Both relative poses and recovered trajectory poses will be stored as Pose2.
-#include <gtsam/geometry/Pose2.h>
+#include "gtsam/geometry/Pose2.h"
 using gtsam::Pose2;
 
 // gtsam::Vectors are dynamic Eigen vectors, Vector3 is statically sized.
-#include <gtsam/base/Vector.h>
+#include "gtsam/base/Vector.h"
 using gtsam::Vector;
 using gtsam::Vector3;
 
 // Unknown landmarks are of type Point2 (which is just a 2D Eigen vector).
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Point2.h"
 using gtsam::Point2;
 
 // Each variable in the system (poses and landmarks) must be identified with a
 // unique key. We can either use simple integer keys (1, 2, 3, ...) or symbols
 // (X1, X2, L1). Here we will use Symbols.
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 using gtsam::Symbol;
 
 // We want to use iSAM2 to solve the range-SLAM problem incrementally.
-#include <gtsam/nonlinear/ISAM2.h>
+#include "gtsam/nonlinear/ISAM2.h"
 
 // iSAM2 requires as input a set set of new factors to be added stored in a
 // factor graph, and initial guesses for any new variables in the added factors.
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
 
 // We will use a non-linear solver to batch-initialize from the first 150 frames
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
 // Measurement functions are represented as 'factors'. Several common factors
 // have been provided with the library for solving robotics SLAM problems:
-#include <gtsam/sam/RangeFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/sam/RangeFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/dataset.h"
 
 // Timing, with functions below, provides nice facilities to benchmark.
-#include <gtsam/base/timing.h>
+#include "gtsam/base/timing.h"
 using gtsam::tictoc_print_;
 
 // Standard headers, added last, so we know headers above work on their own.

diff --git a/examples/SFMExample.cpp b/examples/SFMExample.cpp
index 0b4dc40..b1480de 100644
--- a/examples/SFMExample.cpp
+++ b/examples/SFMExample.cpp
@@ -19,35 +19,35 @@
 #include "SFMdata.h"
 
 // Camera observations of landmarks (i.e. pixel coordinates) will be stored as Point2 (x, y).
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Point2.h"
 
 // Each variable in the system (poses and landmarks) must be identified with a unique key.
 // We can either use simple integer keys (1, 2, 3, ...) or symbols (X1, X2, L1).
 // Here we will use Symbols
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
 // In GTSAM, measurement functions are represented as 'factors'. Several common factors
 // have been provided with the library for solving robotics/SLAM/Bundle Adjustment problems.
 // Here we will use Projection factors to model the camera's landmark observations.
 // Also, we will initialize the robot at some location using a Prior factor.
-#include <gtsam/slam/ProjectionFactor.h>
+#include "gtsam/slam/ProjectionFactor.h"
 
 // When the factors are created, we will add them to a Factor Graph. As the factors we are using
 // are nonlinear factors, we will need a Nonlinear Factor Graph.
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 // Finally, once all of the factors have been added to our factor graph, we will want to
 // solve/optimize to graph to find the best (Maximum A Posteriori) set of variable values.
 // GTSAM includes several nonlinear optimizers to perform this step. Here we will use a
 // trust-region method known as Powell's Dogleg
-#include <gtsam/nonlinear/DoglegOptimizer.h>
+#include "gtsam/nonlinear/DoglegOptimizer.h"
 
 // The nonlinear solvers within GTSAM are iterative solvers, meaning they linearize the
 // nonlinear functions around an initial linearization point, then solve the linear system
 // to update the linearization point. This happens repeatedly until the solver converges
 // to a consistent set of variable values. This requires us to specify an initial guess
 // for each variable, held in a Values container.
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/Values.h"
 
 #include <vector>
 

diff --git a/examples/SFMExampleExpressions.cpp b/examples/SFMExampleExpressions.cpp
index 73b6f27..693ce62 100644
--- a/examples/SFMExampleExpressions.cpp
+++ b/examples/SFMExampleExpressions.cpp
@@ -23,15 +23,15 @@
  */
 
 // The two new headers that allow using our Automatic Differentiation Expression framework
-#include <gtsam/slam/expressions.h>
-#include <gtsam/nonlinear/ExpressionFactorGraph.h>
+#include "gtsam/slam/expressions.h"
+#include "gtsam/nonlinear/ExpressionFactorGraph.h"
 
 // Header order is close to far
 #include "SFMdata.h"
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/nonlinear/DoglegOptimizer.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/nonlinear/DoglegOptimizer.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/inference/Symbol.h"
 
 #include <vector>
 

diff --git a/examples/SFMExampleExpressions_bal.cpp b/examples/SFMExampleExpressions_bal.cpp
index f2e3529..5d9a2fb 100644
--- a/examples/SFMExampleExpressions_bal.cpp
+++ b/examples/SFMExampleExpressions_bal.cpp
@@ -22,14 +22,14 @@
  */
 
 // The two new headers that allow using our Automatic Differentiation Expression framework
-#include <gtsam/slam/expressions.h>
-#include <gtsam/nonlinear/ExpressionFactorGraph.h>
+#include "gtsam/slam/expressions.h"
+#include "gtsam/nonlinear/ExpressionFactorGraph.h"
 
 // Header order is close to far
-#include <gtsam/sfm/SfmData.h>  // for loading BAL datasets !
-#include <gtsam/slam/dataset.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/sfm/SfmData.h"  // for loading BAL datasets !
+#include "gtsam/slam/dataset.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/inference/Symbol.h"
 
 #include <vector>
 

diff --git a/examples/SFMExample_SmartFactor.cpp b/examples/SFMExample_SmartFactor.cpp
index 0cd2e77..b28bb46 100644
--- a/examples/SFMExample_SmartFactor.cpp
+++ b/examples/SFMExample_SmartFactor.cpp
@@ -22,11 +22,11 @@
 // Every smart factor represent a single landmark, seen from multiple cameras.
 // The SmartProjectionPoseFactor only optimizes for the poses of a camera,
 // not the calibration, which is assumed known.
-#include <gtsam/slam/SmartProjectionPoseFactor.h>
+#include "gtsam/slam/SmartProjectionPoseFactor.h"
 
 // For an explanation of these headers, see SFMExample.cpp
 #include "SFMdata.h"
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/SFMExample_SmartFactorPCG.cpp b/examples/SFMExample_SmartFactorPCG.cpp
index b64fcd0..1292bf2 100644
--- a/examples/SFMExample_SmartFactorPCG.cpp
+++ b/examples/SFMExample_SmartFactorPCG.cpp
@@ -17,12 +17,12 @@
 
 // For an explanation of these headers, see SFMExample_SmartFactor.cpp
 #include "SFMdata.h"
-#include <gtsam/slam/SmartProjectionPoseFactor.h>
+#include "gtsam/slam/SmartProjectionPoseFactor.h"
 
 // These extra headers allow us a LM outer loop with PCG linear solver (inner loop)
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/linear/Preconditioner.h>
-#include <gtsam/linear/PCGSolver.h>
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/linear/Preconditioner.h"
+#include "gtsam/linear/PCGSolver.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/SFMExample_bal.cpp b/examples/SFMExample_bal.cpp
index 9db5bd1..29b9950 100644
--- a/examples/SFMExample_bal.cpp
+++ b/examples/SFMExample_bal.cpp
@@ -16,12 +16,12 @@
  */
 
 // For an explanation of headers, see SFMExample.cpp
-#include <gtsam/sfm/SfmData.h> // for loading BAL datasets !
-#include <gtsam/slam/GeneralSFMFactor.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/sfm/SfmData.h" // for loading BAL datasets !
+#include "gtsam/slam/GeneralSFMFactor.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/inference/Symbol.h"
 
 #include <vector>
 

diff --git a/examples/SFMExample_bal_COLAMD_METIS.cpp b/examples/SFMExample_bal_COLAMD_METIS.cpp
index 592b834..a3f3bb4 100644
--- a/examples/SFMExample_bal_COLAMD_METIS.cpp
+++ b/examples/SFMExample_bal_COLAMD_METIS.cpp
@@ -17,14 +17,14 @@
  */
 
 // For an explanation of headers, see SFMExample.cpp
-#include <gtsam/slam/GeneralSFMFactor.h>
-#include <gtsam/sfm/SfmData.h>  // for loading BAL datasets !
-#include <gtsam/slam/dataset.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/slam/GeneralSFMFactor.h"
+#include "gtsam/sfm/SfmData.h"  // for loading BAL datasets !
+#include "gtsam/slam/dataset.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/timing.h"
 
 #include <vector>
 

diff --git a/examples/SFMdata.h b/examples/SFMdata.h
index 2a86aa5..9712d82 100644
--- a/examples/SFMdata.h
+++ b/examples/SFMdata.h
@@ -29,13 +29,13 @@
 // camera positions and Point3 variables (x, y, z) to represent the landmark
 // coordinates. Camera observations of landmarks (i.e. pixel coordinates) will
 // be stored as Point2 (x, y).
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose3.h"
 
 // We will also need a camera object to hold calibration information and perform
 // projections.
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/PinholeCamera.h>
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/PinholeCamera.h"
 
 namespace gtsam {
 

diff --git a/examples/SelfCalibrationExample.cpp b/examples/SelfCalibrationExample.cpp
index 2018600..c089fc6 100644
--- a/examples/SelfCalibrationExample.cpp
+++ b/examples/SelfCalibrationExample.cpp
@@ -24,16 +24,16 @@
 #include "SFMdata.h"
 
 // Camera observations of landmarks (i.e. pixel coordinates) will be stored as Point2 (x, y).
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Point2.h"
 
 // Inference and optimization
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/DoglegOptimizer.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/DoglegOptimizer.h"
+#include "gtsam/nonlinear/Values.h"
 
 // SFM-specific factors
-#include <gtsam/slam/GeneralSFMFactor.h>  // does calibration !
+#include "gtsam/slam/GeneralSFMFactor.h"  // does calibration !
 
 // Standard headers
 #include <vector>

diff --git a/examples/ShonanAveragingCLI.cpp b/examples/ShonanAveragingCLI.cpp
index 831b608..49cb507 100644
--- a/examples/ShonanAveragingCLI.cpp
+++ b/examples/ShonanAveragingCLI.cpp
@@ -30,10 +30,10 @@
  * ./ShonanAveragingCLI -i spere2500.txt -h true
  */
 
-#include <gtsam/base/timing.h>
-#include <gtsam/sfm/ShonanAveraging.h>
-#include <gtsam/slam/InitializePose.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/base/timing.h"
+#include "gtsam/sfm/ShonanAveraging.h"
+#include "gtsam/slam/InitializePose.h"
+#include "gtsam/slam/dataset.h"
 
 #include <boost/program_options.hpp>
 

diff --git a/examples/SimpleRotation.cpp b/examples/SimpleRotation.cpp
index 19909e3..f3d3fae 100644
--- a/examples/SimpleRotation.cpp
+++ b/examples/SimpleRotation.cpp
@@ -23,12 +23,12 @@
    */
 
 // In this example, a 2D rotation will be used as the variable of interest
-#include <gtsam/geometry/Rot2.h>
+#include "gtsam/geometry/Rot2.h"
 
 // Each variable in the system (poses) must be identified with a unique key.
 // We can either use simple integer keys (1, 2, 3, ...) or symbols (X1, X2, L1).
 // Here we will use symbols
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
 // In GTSAM, measurement functions are represented as 'factors'. Several common factors
 // have been provided with the library for solving robotics/SLAM/Bundle Adjustment problems.
@@ -37,20 +37,20 @@
 
 // When the factors are created, we will add them to a Factor Graph. As the factors we are using
 // are nonlinear factors, we will need a Nonlinear Factor Graph.
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 // The nonlinear solvers within GTSAM are iterative solvers, meaning they linearize the
 // nonlinear functions around an initial linearization point, then solve the linear system
 // to update the linearization point. This happens repeatedly until the solver converges
 // to a consistent set of variable values. This requires us to specify an initial guess
 // for each variable, held in a Values container.
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/Values.h"
 
 // Finally, once all of the factors have been added to our factor graph, we will want to
 // solve/optimize to graph to find the best (Maximum A Posteriori) set of variable values.
 // GTSAM includes several nonlinear optimizers to perform this step. Here we will use the
 // standard Levenberg-Marquardt solver
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
 
 using namespace std;

diff --git a/examples/SolverComparer.cpp b/examples/SolverComparer.cpp
index 7e451ca..7a042f7 100644
--- a/examples/SolverComparer.cpp
+++ b/examples/SolverComparer.cpp
@@ -31,19 +31,19 @@
 *
 */
 
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/Marginals.h>
-#include <gtsam/linear/GaussianJunctionTree.h>
-#include <gtsam/linear/GaussianEliminationTree.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/base/treeTraversal-inst.h>
-#include <gtsam/config.h> // for GTSAM_USE_TBB
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/Marginals.h"
+#include "gtsam/linear/GaussianJunctionTree.h"
+#include "gtsam/linear/GaussianEliminationTree.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/base/treeTraversal-inst.h"
+#include "gtsam/config.h" // for GTSAM_USE_TBB
 
 #include <boost/archive/binary_iarchive.hpp>
 #include <boost/archive/binary_oarchive.hpp>

diff --git a/examples/StereoVOExample.cpp b/examples/StereoVOExample.cpp
index 4e94155..4dbedc5 100644
--- a/examples/StereoVOExample.cpp
+++ b/examples/StereoVOExample.cpp
@@ -23,13 +23,13 @@
  *  -takes stereo readings on three landmarks
  */
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Cal3_S2Stereo.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/slam/StereoFactor.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Cal3_S2Stereo.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/slam/StereoFactor.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/StereoVOExample_large.cpp b/examples/StereoVOExample_large.cpp
index c4a3a8d..206ff53 100644
--- a/examples/StereoVOExample_large.cpp
+++ b/examples/StereoVOExample_large.cpp
@@ -24,16 +24,16 @@
  *  -takes stereo readings of many landmarks
  */
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Cal3_S2Stereo.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/utilities.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/slam/StereoFactor.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Cal3_S2Stereo.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/utilities.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/slam/StereoFactor.h"
+#include "gtsam/slam/dataset.h"
 
 #include <string>
 #include <fstream>

diff --git a/examples/TimeTBB.cpp b/examples/TimeTBB.cpp
index 68511e7..dce95e6 100644
--- a/examples/TimeTBB.cpp
+++ b/examples/TimeTBB.cpp
@@ -15,8 +15,8 @@
 * @date    November 6, 2013
 */
 
-#include <gtsam/global_includes.h>
-#include <gtsam/base/Matrix.h>
+#include "gtsam/global_includes.h"
+#include "gtsam/base/Matrix.h"
 
 #include <map>
 #include <iostream>

diff --git a/examples/TriangulationLOSTExample.cpp b/examples/TriangulationLOSTExample.cpp
index 417c37c..0961824 100644
--- a/examples/TriangulationLOSTExample.cpp
+++ b/examples/TriangulationLOSTExample.cpp
@@ -18,13 +18,13 @@
  *
  * @date 2022-07-10
  */
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/triangulation.h>
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/triangulation.h"
 
 #include <chrono>
 #include <iostream>

diff --git a/examples/UGM_chain.cpp b/examples/UGM_chain.cpp
index ad21af9..4b1657e 100644
--- a/examples/UGM_chain.cpp
+++ b/examples/UGM_chain.cpp
@@ -19,9 +19,9 @@
  * for more explanation. This code demos the same example using GTSAM.
  */
 
-#include <gtsam/base/timing.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteMarginals.h>
+#include "gtsam/base/timing.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteMarginals.h"
 
 #include <iomanip>
 

diff --git a/examples/UGM_small.cpp b/examples/UGM_small.cpp
index bc6a413..e17c6e0 100644
--- a/examples/UGM_small.cpp
+++ b/examples/UGM_small.cpp
@@ -17,9 +17,9 @@
  * See http://www.di.ens.fr/~mschmidt/Software/UGM/small.html
  */
 
-#include <gtsam/base/Vector.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteMarginals.h>
+#include "gtsam/base/Vector.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteMarginals.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/ViewGraphExample.cpp b/examples/ViewGraphExample.cpp
index a33e185..bfd16e3 100644
--- a/examples/ViewGraphExample.cpp
+++ b/examples/ViewGraphExample.cpp
@@ -16,16 +16,16 @@
  * @date    October 2024
  */
 
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/inference/EdgeKey.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/sfm/TransferFactor.h>
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/inference/EdgeKey.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/sfm/TransferFactor.h"
 
 #include <vector>
 

diff --git a/examples/VisualISAM2Example.cpp b/examples/VisualISAM2Example.cpp
index b05fd9e..a052c0a 100644
--- a/examples/VisualISAM2Example.cpp
+++ b/examples/VisualISAM2Example.cpp
@@ -26,28 +26,28 @@
 #include "SFMdata.h"
 
 // Camera observations of landmarks will be stored as Point2 (x, y).
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Point2.h"
 
 // Each variable in the system (poses and landmarks) must be identified with a
 // unique key. We can either use simple integer keys (1, 2, 3, ...) or symbols
 // (X1, X2, L1). Here we will use Symbols
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
 // We want to use iSAM2 to solve the structure-from-motion problem
 // incrementally, so include iSAM2 here
-#include <gtsam/nonlinear/ISAM2.h>
+#include "gtsam/nonlinear/ISAM2.h"
 
 // iSAM2 requires as input a set of new factors to be added stored in a factor
 // graph, and initial guesses for any new variables used in the added factors
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
 
 // In GTSAM, measurement functions are represented as 'factors'. Several common
 // factors have been provided with the library for solving robotics/SLAM/Bundle
 // Adjustment problems. Here we will use Projection factors to model the
 // camera's landmark observations. Also, we will initialize the robot at some
 // location using a Prior factor.
-#include <gtsam/slam/ProjectionFactor.h>
+#include "gtsam/slam/ProjectionFactor.h"
 
 #include <vector>
 

diff --git a/examples/VisualISAMExample.cpp b/examples/VisualISAMExample.cpp
index c187811..8520ec0 100644
--- a/examples/VisualISAMExample.cpp
+++ b/examples/VisualISAMExample.cpp
@@ -27,27 +27,27 @@
 #include "SFMdata.h"
 
 // Camera observations of landmarks (i.e. pixel coordinates) will be stored as Point2 (x, y).
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Point2.h"
 
 // Each variable in the system (poses and landmarks) must be identified with a unique key.
 // We can either use simple integer keys (1, 2, 3, ...) or symbols (X1, X2, L1).
 // Here we will use Symbols
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
 // In GTSAM, measurement functions are represented as 'factors'. Several common factors
 // have been provided with the library for solving robotics/SLAM/Bundle Adjustment problems.
 // Here we will use Projection factors to model the camera's landmark observations.
 // Also, we will initialize the robot at some location using a Prior factor.
-#include <gtsam/slam/ProjectionFactor.h>
+#include "gtsam/slam/ProjectionFactor.h"
 
 // We want to use iSAM to solve the structure-from-motion problem incrementally, so
 // include iSAM here
-#include <gtsam/nonlinear/NonlinearISAM.h>
+#include "gtsam/nonlinear/NonlinearISAM.h"
 
 // iSAM requires as input a set set of new factors to be added stored in a factor graph,
 // and initial guesses for any new variables used in the added factors
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
 
 #include <vector>
 

diff --git a/examples/easyPoint2KalmanFilter.cpp b/examples/easyPoint2KalmanFilter.cpp
index 7693fa4..081e426 100644
--- a/examples/easyPoint2KalmanFilter.cpp
+++ b/examples/easyPoint2KalmanFilter.cpp
@@ -21,11 +21,11 @@
  * @author Stephen Williams
  */
 
-#include <gtsam/nonlinear/ExtendedKalmanFilter.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/nonlinear/ExtendedKalmanFilter.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/geometry/Point2.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/examples/elaboratePoint2KalmanFilter.cpp b/examples/elaboratePoint2KalmanFilter.cpp
index bc4e6e3..ecbba8e 100644
--- a/examples/elaboratePoint2KalmanFilter.cpp
+++ b/examples/elaboratePoint2KalmanFilter.cpp
@@ -20,14 +20,14 @@
  * @author Stephen Williams
  */
 
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
-//#include <gtsam/nonlinear/Ordering.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
+//#include "gtsam/nonlinear/Ordering.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/geometry/Point2.h"
 
 #include <cassert>
 

diff --git a/gtsam/3rdparty/Spectra/GenEigsSolver.h b/gtsam/3rdparty/Spectra/GenEigsSolver.h
index 3ead1dc..a860dc4 100644
--- a/gtsam/3rdparty/Spectra/GenEigsSolver.h
+++ b/gtsam/3rdparty/Spectra/GenEigsSolver.h
@@ -42,7 +42,7 @@ namespace Spectra {
 ///
 /// \code{.cpp}
 /// #include <Eigen/Core>
-/// #include <Spectra/GenEigsSolver.h>
+/// #include "Spectra/GenEigsSolver.h"
 /// // <Spectra/MatOp/DenseGenMatProd.h> is implicitly included
 /// #include <iostream>
 ///
@@ -80,8 +80,8 @@ namespace Spectra {
 /// \code{.cpp}
 /// #include <Eigen/Core>
 /// #include <Eigen/SparseCore>
-/// #include <Spectra/GenEigsSolver.h>
-/// #include <Spectra/MatOp/SparseGenMatProd.h>
+/// #include "Spectra/GenEigsSolver.h"
+/// #include "Spectra/MatOp/SparseGenMatProd.h"
 /// #include <iostream>
 ///
 /// using namespace Spectra;

diff --git a/gtsam/3rdparty/Spectra/SymEigsShiftSolver.h b/gtsam/3rdparty/Spectra/SymEigsShiftSolver.h
index e2b410c..d5a4508 100644
--- a/gtsam/3rdparty/Spectra/SymEigsShiftSolver.h
+++ b/gtsam/3rdparty/Spectra/SymEigsShiftSolver.h
@@ -70,7 +70,7 @@ namespace Spectra {
 ///
 /// \code{.cpp}
 /// #include <Eigen/Core>
-/// #include <Spectra/SymEigsShiftSolver.h>
+/// #include "Spectra/SymEigsShiftSolver.h"
 /// // <Spectra/MatOp/DenseSymShiftSolve.h> is implicitly included
 /// #include <iostream>
 ///
@@ -108,7 +108,7 @@ namespace Spectra {
 ///
 /// \code{.cpp}
 /// #include <Eigen/Core>
-/// #include <Spectra/SymEigsShiftSolver.h>
+/// #include "Spectra/SymEigsShiftSolver.h"
 /// #include <iostream>
 ///
 /// using namespace Spectra;

diff --git a/gtsam/3rdparty/Spectra/SymEigsSolver.h b/gtsam/3rdparty/Spectra/SymEigsSolver.h
index 404df1e..b1b2577 100644
--- a/gtsam/3rdparty/Spectra/SymEigsSolver.h
+++ b/gtsam/3rdparty/Spectra/SymEigsSolver.h
@@ -60,7 +60,7 @@ namespace Spectra {
 ///
 /// \code{.cpp}
 /// #include <Eigen/Core>
-/// #include <Spectra/SymEigsSolver.h>
+/// #include "Spectra/SymEigsSolver.h"
 /// // <Spectra/MatOp/DenseSymMatProd.h> is implicitly included
 /// #include <iostream>
 ///
@@ -97,7 +97,7 @@ namespace Spectra {
 ///
 /// \code{.cpp}
 /// #include <Eigen/Core>
-/// #include <Spectra/SymEigsSolver.h>
+/// #include "Spectra/SymEigsSolver.h"
 /// #include <iostream>
 ///
 /// using namespace Spectra;

diff --git a/gtsam/3rdparty/Spectra/SymGEigsSolver.h b/gtsam/3rdparty/Spectra/SymGEigsSolver.h
index 68aa37c..79f5922 100644
--- a/gtsam/3rdparty/Spectra/SymGEigsSolver.h
+++ b/gtsam/3rdparty/Spectra/SymGEigsSolver.h
@@ -93,9 +93,9 @@ class SymGEigsSolver
 /// #include <Eigen/Core>
 /// #include <Eigen/SparseCore>
 /// #include <Eigen/Eigenvalues>
-/// #include <Spectra/SymGEigsSolver.h>
-/// #include <Spectra/MatOp/DenseSymMatProd.h>
-/// #include <Spectra/MatOp/SparseCholesky.h>
+/// #include "Spectra/SymGEigsSolver.h"
+/// #include "Spectra/MatOp/DenseSymMatProd.h"
+/// #include "Spectra/MatOp/SparseCholesky.h"
 /// #include <iostream>
 ///
 /// using namespace Spectra;

diff --git a/gtsam/3rdparty/Spectra/contrib/LOBPCGSolver.h b/gtsam/3rdparty/Spectra/contrib/LOBPCGSolver.h
index 69c4d92..6cc6812 100644
--- a/gtsam/3rdparty/Spectra/contrib/LOBPCGSolver.h
+++ b/gtsam/3rdparty/Spectra/contrib/LOBPCGSolver.h
@@ -1,552 +1,552 @@
-// Written by Anna Araslanova
-// Modified by Yixuan Qiu
-// License: MIT
-
-#ifndef LOBPCG_SOLVER
-#define LOBPCG_SOLVER
-
-#include <functional>
-#include <map>
-
-#include <Eigen/Core>
-#include <Eigen/SparseCore>
-#include <Eigen/Eigenvalues>
-#include <Eigen/SVD>
-#include <Eigen/SparseCholesky>
-
-#include "../SymGEigsSolver.h"
-
-namespace Spectra {
-
-///
-/// \ingroup EigenSolver
-///
-
-///	*** METHOD
-///	The class represent the LOBPCG algorithm, which was invented by Andrew Knyazev
-///	Theoretical background of the procedure can be found in the articles below
-///	- Knyazev, A.V., 2001. Toward the optimal preconditioned eigensolver : Locally optimal block preconditioned conjugate gradient method.SIAM journal on scientific computing, 23(2), pp.517 - 541.
-///	- Knyazev, A.V., Argentati, M.E., Lashuk, I. and Ovtchinnikov, E.E., 2007. Block locally optimal preconditioned eigenvalue xolvers(BLOPEX) in HYPRE and PETSc.SIAM Journal on Scientific Computing, 29(5), pp.2224 - 2239.
-///
-///	*** CONDITIONS OF USE
-///	Locally Optimal Block Preconditioned Conjugate Gradient(LOBPCG) is a method for finding the M smallest eigenvalues
-/// and eigenvectors of a large symmetric positive definite generalized eigenvalue problem
-///	\f$Ax=\lambda Bx,\f$
-///	where \f$A_{NxN}\f$ is a symmetric matrix, \f$B\f$ is symmetric and positive - definite. \f$A and B\f$ are also assumed large and sparse
-///	\f$\textit{M}\f$ should be \f$\<< textit{N}\f$ (at least \f$\textit{5M} < \textit{N} \f$)
-///
-///	*** ARGUMENTS
-///	Eigen::SparseMatrix<long double> A; // N*N - Ax = lambda*Bx, lrage and sparse
-///	Eigen::SparseMatrix<long double> X; // N*M - initial approximations to eigenvectors (random in general case)
-///	Spectra::LOBPCGSolver<long double> solver(A, X);
-///	*Eigen::SparseMatrix<long double> B; // N*N - Ax = lambda*Bx, sparse, positive definite
-///	solver.setConstraints(B);
-///	*Eigen::SparseMatrix<long double> Y; // N*K - constraints, already found eigenvectors
-///	solver.setB(B);
-///	*Eigen::SparseMatrix<long double> T; // N*N - preconditioner ~ A^-1
-///	solver.setPreconditioner(T);
-///
-///	*** OUTCOMES
-///	solver.solve(); // compute eigenpairs // void
-///	solver.info(); // state of converjance // int
-///	solver.residuals(); // get residuals to evaluate biases // Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic>
-///	solver.eigenvalues(); // get eigenvalues // Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic>
-///	solver.eigenvectors(); // get eigenvectors // Eigen::Matrix<Scalar, Eigen::Dynamic, 1>
-///
-///	*** EXAMPLE
-/// \code{.cpp}
-/// #include <Spectra/contrib/SymSparseEigsSolverLOBPCG.h>
-///
-///	// random A
-///	Matrix a;
-///	a = (Matrix::Random(10, 10).array() > 0.6).cast<long double>() * Matrix::Random(10, 10).array() * 5;
-///	a = Matrix((a).triangularView<Eigen::Lower>()) + Matrix((a).triangularView<Eigen::Lower>()).transpose();
-///	for (int i = 0; i < 10; i++)
-///		a(i, i) = i + 0.5;
-///	std::cout << a << "\n";
-///	Eigen::SparseMatrix<long double> A(a.sparseView());
-///	// random X
-///	Eigen::Matrix<long double, 10, 2> x;
-///	x = Matrix::Random(10, 2).array();
-///	Eigen::SparseMatrix<long double> X(x.sparseView());
-///	// solve Ax = lambda*x
-///	Spectra::LOBPCGSolver<long double> solver(A, X);
-///	solver.compute(10, 1e-4); // 10 iterations, L2_tolerance = 1e-4*N
-/// std::cout << "info\n" << solver.info() << std::endl;
-/// std::cout << "eigenvalues\n" << solver.eigenvalues() << std::endl;
-/// std::cout << "eigenvectors\n" << solver.eigenvectors() << std::endl;
-/// std::cout << "residuals\n" << solver.residuals() << std::endl;
-/// \endcode
-///
-
-template <typename Scalar = long double>
-class LOBPCGSolver
-{
-private:
-    typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
-    typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;
-
-    typedef std::complex<Scalar> Complex;
-    typedef Eigen::Matrix<Complex, Eigen::Dynamic, Eigen::Dynamic> ComplexMatrix;
-    typedef Eigen::Matrix<Complex, Eigen::Dynamic, 1> ComplexVector;
-
-    typedef Eigen::SparseMatrix<Scalar> SparseMatrix;
-    typedef Eigen::SparseMatrix<Complex> SparseComplexMatrix;
-
-    const int m_n;    // dimension of matrix A
-    const int m_nev;  // number of eigenvalues requested
-    SparseMatrix A, X;
-    SparseMatrix m_Y, m_B, m_preconditioner;
-    bool flag_with_constraints, flag_with_B, flag_with_preconditioner;
-
-public:
-    SparseMatrix m_residuals;
-    Matrix m_evectors;
-    Vector m_evalues;
-    int m_info;
-
-private:
-    // B-orthonormalize matrix M
-    int orthogonalizeInPlace(SparseMatrix& M, SparseMatrix& B,
-                             SparseMatrix& true_BM, bool has_true_BM = false)
-    {
-        SparseMatrix BM;
-
-        if (has_true_BM == false)
-        {
-            if (flag_with_B)
-            {
-                BM = B * M;
-            }
-            else
-            {
-                BM = M;
-            }
-        }
-        else
-        {
-            BM = true_BM;
-        }
-
-        Eigen::SimplicialLDLT<SparseMatrix> chol_MBM(M.transpose() * BM);
-
-        if (chol_MBM.info() != SUCCESSFUL)
-        {
-            // LDLT decomposition fail
-            m_info = chol_MBM.info();
-            return chol_MBM.info();
-        }
-
-        SparseComplexMatrix Upper_MBM = chol_MBM.matrixU().template cast<Complex>();
-        ComplexVector D_MBM_vec = chol_MBM.vectorD().template cast<Complex>();
-
-        D_MBM_vec = D_MBM_vec.cwiseSqrt();
-
-        for (int i = 0; i < D_MBM_vec.rows(); i++)
-        {
-            D_MBM_vec(i) = Complex(1.0, 0.0) / D_MBM_vec(i);
-        }
-
-        SparseComplexMatrix D_MBM_mat(D_MBM_vec.asDiagonal());
-
-        SparseComplexMatrix U_inv(Upper_MBM.rows(), Upper_MBM.cols());
-        U_inv.setIdentity();
-        Upper_MBM.template triangularView<Eigen::Upper>().solveInPlace(U_inv);
-
-        SparseComplexMatrix right_product = U_inv * D_MBM_mat;
-        M = M * right_product.real();
-        if (flag_with_B)
-        {
-            true_BM = B * M;
-        }
-        else
-        {
-            true_BM = M;
-        }
-
-        return SUCCESSFUL;
-    }
-
-    void applyConstraintsInPlace(SparseMatrix& X, SparseMatrix& Y,
-                                 SparseMatrix& B)
-    {
-        SparseMatrix BY;
-        if (flag_with_B)
-        {
-            BY = B * Y;
-        }
-        else
-        {
-            BY = Y;
-        }
-
-        SparseMatrix YBY = Y.transpose() * BY;
-        SparseMatrix BYX = BY.transpose() * X;
-
-        SparseMatrix YBY_XYX = (Matrix(YBY).bdcSvd(Eigen::ComputeThinU | Eigen::ComputeThinV).solve(Matrix(BYX))).sparseView();
-        X = X - Y * YBY_XYX;
-    }
-
-    /*
-		return
-		'AB
-		CD'
-		*/
-    Matrix stack_4_matricies(Matrix A, Matrix B,
-                             Matrix C, Matrix D)
-    {
-        Matrix result(A.rows() + C.rows(), A.cols() + B.cols());
-        result.topLeftCorner(A.rows(), A.cols()) = A;
-        result.topRightCorner(B.rows(), B.cols()) = B;
-        result.bottomLeftCorner(C.rows(), C.cols()) = C;
-        result.bottomRightCorner(D.rows(), D.cols()) = D;
-        return result;
-    }
-
-    Matrix stack_9_matricies(Matrix A, Matrix B, Matrix C,
-                             Matrix D, Matrix E, Matrix F,
-                             Matrix G, Matrix H, Matrix I)
-    {
-        Matrix result(A.rows() + D.rows() + G.rows(), A.cols() + B.cols() + C.cols());
-        result.block(0, 0, A.rows(), A.cols()) = A;
-        result.block(0, A.cols(), B.rows(), B.cols()) = B;
-        result.block(0, A.cols() + B.cols(), C.rows(), C.cols()) = C;
-        result.block(A.rows(), 0, D.rows(), D.cols()) = D;
-        result.block(A.rows(), A.cols(), E.rows(), E.cols()) = E;
-        result.block(A.rows(), A.cols() + B.cols(), F.rows(), F.cols()) = F;
-        result.block(A.rows() + D.rows(), 0, G.rows(), G.cols()) = G;
-        result.block(A.rows() + D.rows(), A.cols(), H.rows(), H.cols()) = H;
-        result.block(A.rows() + D.rows(), A.cols() + B.cols(), I.rows(), I.cols()) = I;
-
-        return result;
-    }
-
-    void sort_epairs(Vector& evalues, Matrix& evectors, int SelectionRule)
-    {
-        std::function<bool(Scalar, Scalar)> cmp;
-        if (SelectionRule == SMALLEST_ALGE)
-            cmp = std::less<Scalar>{};
-        else
-            cmp = std::greater<Scalar>{};
-
-        std::map<Scalar, Vector, decltype(cmp)> epairs(cmp);
-        for (int i = 0; i < m_evectors.cols(); ++i)
-            epairs.insert(std::make_pair(evalues(i), evectors.col(i)));
-
-        int i = 0;
-        for (auto& epair : epairs)
-        {
-            evectors.col(i) = epair.second;
-            evalues(i) = epair.first;
-            i++;
-        }
-    }
-
-    void removeColumns(SparseMatrix& matrix, std::vector<int>& colToRemove)
-    {
-        // remove columns through matrix multiplication
-        SparseMatrix new_matrix(matrix.cols(), matrix.cols() - int(colToRemove.size()));
-        int iCol = 0;
-        std::vector<Eigen::Triplet<Scalar>> tripletList;
-        tripletList.reserve(matrix.cols() - int(colToRemove.size()));
-
-        for (int iRow = 0; iRow < matrix.cols(); iRow++)
-        {
-            if (std::find(colToRemove.begin(), colToRemove.end(), iRow) == colToRemove.end())
-            {
-                tripletList.push_back(Eigen::Triplet<Scalar>(iRow, iCol, 1));
-                iCol++;
-            }
-        }
-
-        new_matrix.setFromTriplets(tripletList.begin(), tripletList.end());
-        matrix = matrix * new_matrix;
-    }
-
-    int checkConvergence_getBlocksize(SparseMatrix& m_residuals, Scalar tolerance_L2, std::vector<int>& columnsToDelete)
-    {
-        // square roots from sum of squares by column
-        int BlockSize = m_nev;
-        Scalar sum, buffer;
-
-        for (int iCol = 0; iCol < m_nev; iCol++)
-        {
-            sum = 0;
-            for (int iRow = 0; iRow < m_n; iRow++)
-            {
-                buffer = m_residuals.coeff(iRow, iCol);
-                sum += buffer * buffer;
-            }
-
-            if (sqrt(sum) < tolerance_L2)
-            {
-                BlockSize--;
-                columnsToDelete.push_back(iCol);
-            }
-        }
-        return BlockSize;
-    }
-
-public:
-    LOBPCGSolver(const SparseMatrix& A, const SparseMatrix X) :
-        m_n(A.rows()),
-        m_nev(X.cols()),
-        m_info(NOT_COMPUTED),
-        flag_with_constraints(false),
-        flag_with_B(false),
-        flag_with_preconditioner(false),
-        A(A),
-        X(X)
-    {
-        if (A.rows() != X.rows() || A.rows() != A.cols())
-            throw std::invalid_argument("Wrong size");
-
-        //if (m_n < 5* m_nev)
-        //	throw std::invalid_argument("The problem size is small compared to the block size. Use standard eigensolver");
-    }
-
-    void setConstraints(const SparseMatrix& Y)
-    {
-        m_Y = Y;
-        flag_with_constraints = true;
-    }
-
-    void setB(const SparseMatrix& B)
-    {
-        if (B.rows() != A.rows() || B.cols() != A.cols())
-            throw std::invalid_argument("Wrong size");
-        m_B = B;
-        flag_with_B = true;
-    }
-
-    void setPreconditioner(const SparseMatrix& preconditioner)
-    {
-        m_preconditioner = preconditioner;
-        flag_with_preconditioner = true;
-    }
-
-    void compute(int maxit = 10, Scalar tol_div_n = 1e-7)
-    {
-        Scalar tolerance_L2 = tol_div_n * m_n;
-        int BlockSize;
-        int max_iter = std::min(m_n, maxit);
-
-        SparseMatrix directions, AX, AR, BX, AD, ADD, DD, BDD, BD, XAD, RAD, DAD, XBD, RBD, BR, sparse_eVecX, sparse_eVecR, sparse_eVecD, inverse_matrix;
-        Matrix XAR, RAR, XBR, gramA, gramB, eVecX, eVecR, eVecD;
-        std::vector<int> columnsToDelete;
-
-        if (flag_with_constraints)
-        {
-            // Apply the constraints Y to X
-            applyConstraintsInPlace(X, m_Y, m_B);
-        }
-
-        // Make initial vectors orthonormal
-        // implicit BX declaration
-        if (orthogonalizeInPlace(X, m_B, BX) != SUCCESSFUL)
-        {
-            max_iter = 0;
-        }
-
-        AX = A * X;
-        // Solve the following NxN eigenvalue problem for all N eigenvalues and -vectors:
-        // first approximation via a dense problem
-        Eigen::EigenSolver<Matrix> eigs(Matrix(X.transpose() * AX));
-
-        if (eigs.info() != SUCCESSFUL)
-        {
-            m_info = eigs.info();
-            max_iter = 0;
-        }
-        else
-        {
-            m_evalues = eigs.eigenvalues().real();
-            m_evectors = eigs.eigenvectors().real();
-            sort_epairs(m_evalues, m_evectors, SMALLEST_ALGE);
-            sparse_eVecX = m_evectors.sparseView();
-
-            X = X * sparse_eVecX;
-            AX = AX * sparse_eVecX;
-            BX = BX * sparse_eVecX;
-        }
-
-        for (int iter_num = 0; iter_num < max_iter; iter_num++)
-        {
-            m_residuals.resize(m_n, m_nev);
-            for (int i = 0; i < m_nev; i++)
-            {
-                m_residuals.col(i) = AX.col(i) - m_evalues(i) * BX.col(i);
-            }
-            BlockSize = checkConvergence_getBlocksize(m_residuals, tolerance_L2, columnsToDelete);
-
-            if (BlockSize == 0)
-            {
-                m_info = SUCCESSFUL;
-                break;
-            }
-
-            // substitution of the original active mask
-            if (columnsToDelete.size() > 0)
-            {
-                removeColumns(m_residuals, columnsToDelete);
-                if (iter_num > 0)
-                {
-                    removeColumns(directions, columnsToDelete);
-                    removeColumns(AD, columnsToDelete);
-                    removeColumns(BD, columnsToDelete);
-                }
-                columnsToDelete.clear();  // for next iteration
-            }
-
-            if (flag_with_preconditioner)
-            {
-                // Apply the preconditioner to the residuals
-                m_residuals = m_preconditioner * m_residuals;
-            }
-
-            if (flag_with_constraints)
-            {
-                // Apply the constraints Y to residuals
-                applyConstraintsInPlace(m_residuals, m_Y, m_B);
-            }
-
-            if (orthogonalizeInPlace(m_residuals, m_B, BR) != SUCCESSFUL)
-            {
-                break;
-            }
-            AR = A * m_residuals;
-
-            // Orthonormalize conjugate directions
-            if (iter_num > 0)
-            {
-                if (orthogonalizeInPlace(directions, m_B, BD, true) != SUCCESSFUL)
-                {
-                    break;
-                }
-                AD = A * directions;
-            }
-
-            // Perform the Rayleigh Ritz Procedure
-            XAR = Matrix(X.transpose() * AR);
-            RAR = Matrix(m_residuals.transpose() * AR);
-            XBR = Matrix(X.transpose() * BR);
-
-            if (iter_num > 0)
-            {
-                XAD = X.transpose() * AD;
-                RAD = m_residuals.transpose() * AD;
-                DAD = directions.transpose() * AD;
-                XBD = X.transpose() * BD;
-                RBD = m_residuals.transpose() * BD;
-
-                gramA = stack_9_matricies(m_evalues.asDiagonal(), XAR, XAD, XAR.transpose(), RAR, RAD, XAD.transpose(), RAD.transpose(), DAD.transpose());
-                gramB = stack_9_matricies(Matrix::Identity(m_nev, m_nev), XBR, XBD, XBR.transpose(), Matrix::Identity(BlockSize, BlockSize), RBD, XBD.transpose(), RBD.transpose(), Matrix::Identity(BlockSize, BlockSize));
-            }
-            else
-            {
-                gramA = stack_4_matricies(m_evalues.asDiagonal(), XAR, XAR.transpose(), RAR);
-                gramB = stack_4_matricies(Matrix::Identity(m_nev, m_nev), XBR, XBR.transpose(), Matrix::Identity(BlockSize, BlockSize));
-            }
-
-            //calculate the lowest/largest m eigenpairs; Solve the generalized eigenvalue problem.
-            DenseSymMatProd<Scalar> Aop(gramA);
-            DenseCholesky<Scalar> Bop(gramB);
-
-            SymGEigsSolver<Scalar, SMALLEST_ALGE, DenseSymMatProd<Scalar>,
-                           DenseCholesky<Scalar>, GEIGS_CHOLESKY>
-                geigs(&Aop, &Bop, m_nev, std::min(10, int(gramA.rows()) - 1));
-
-            geigs.init();
-            int nconv = geigs.compute();
-
-            //Mat evecs;
-            if (geigs.info() == SUCCESSFUL)
-            {
-                m_evalues = geigs.eigenvalues();
-                m_evectors = geigs.eigenvectors();
-                sort_epairs(m_evalues, m_evectors, SMALLEST_ALGE);
-            }
-            else
-            {
-                // Problem With General EgenVec
-                m_info = geigs.info();
-                break;
-            }
-
-            // Compute Ritz vectors
-            if (iter_num > 0)
-            {
-                eVecX = m_evectors.block(0, 0, m_nev, m_nev);
-                eVecR = m_evectors.block(m_nev, 0, BlockSize, m_nev);
-                eVecD = m_evectors.block(m_nev + BlockSize, 0, BlockSize, m_nev);
-
-                sparse_eVecX = eVecX.sparseView();
-                sparse_eVecR = eVecR.sparseView();
-                sparse_eVecD = eVecD.sparseView();
-
-                DD = m_residuals * sparse_eVecR;  // new conjugate directions
-                ADD = AR * sparse_eVecR;
-                BDD = BR * sparse_eVecR;
-
-                DD = DD + directions * sparse_eVecD;
-                ADD = ADD + AD * sparse_eVecD;
-                BDD = BDD + BD * sparse_eVecD;
-            }
-            else
-            {
-                eVecX = m_evectors.block(0, 0, m_nev, m_nev);
-                eVecR = m_evectors.block(m_nev, 0, BlockSize, m_nev);
-
-                sparse_eVecX = eVecX.sparseView();
-                sparse_eVecR = eVecR.sparseView();
-
-                DD = m_residuals * sparse_eVecR;
-                ADD = AR * sparse_eVecR;
-                BDD = BR * sparse_eVecR;
-            }
-
-            X = X * sparse_eVecX + DD;
-            AX = AX * sparse_eVecX + ADD;
-            BX = BX * sparse_eVecX + BDD;
-
-            directions = DD;
-            AD = ADD;
-            BD = BDD;
-
-        }  // iteration loop
-
-        // calculate last residuals
-        m_residuals.resize(m_n, m_nev);
-        for (int i = 0; i < m_nev; i++)
-        {
-            m_residuals.col(i) = AX.col(i) - m_evalues(i) * BX.col(i);
-        }
-        BlockSize = checkConvergence_getBlocksize(m_residuals, tolerance_L2, columnsToDelete);
-
-        if (BlockSize == 0)
-        {
-            m_info = SUCCESSFUL;
-        }
-    }  // compute
-
-    Vector eigenvalues()
-    {
-        return m_evalues;
-    }
-
-    Matrix eigenvectors()
-    {
-        return m_evectors;
-    }
-
-    Matrix residuals()
-    {
-        return Matrix(m_residuals);
-    }
-
-    int info() { return m_info; }
-};
-
-}  // namespace Spectra
-
-#endif  // LOBPCG_SOLVER
+// Written by Anna Araslanova
+// Modified by Yixuan Qiu
+// License: MIT
+
+#ifndef LOBPCG_SOLVER
+#define LOBPCG_SOLVER
+
+#include <functional>
+#include <map>
+
+#include <Eigen/Core>
+#include <Eigen/SparseCore>
+#include <Eigen/Eigenvalues>
+#include <Eigen/SVD>
+#include <Eigen/SparseCholesky>
+
+#include "../SymGEigsSolver.h"
+
+namespace Spectra {
+
+///
+/// \ingroup EigenSolver
+///
+
+///	*** METHOD
+///	The class represent the LOBPCG algorithm, which was invented by Andrew Knyazev
+///	Theoretical background of the procedure can be found in the articles below
+///	- Knyazev, A.V., 2001. Toward the optimal preconditioned eigensolver : Locally optimal block preconditioned conjugate gradient method.SIAM journal on scientific computing, 23(2), pp.517 - 541.
+///	- Knyazev, A.V., Argentati, M.E., Lashuk, I. and Ovtchinnikov, E.E., 2007. Block locally optimal preconditioned eigenvalue xolvers(BLOPEX) in HYPRE and PETSc.SIAM Journal on Scientific Computing, 29(5), pp.2224 - 2239.
+///
+///	*** CONDITIONS OF USE
+///	Locally Optimal Block Preconditioned Conjugate Gradient(LOBPCG) is a method for finding the M smallest eigenvalues
+/// and eigenvectors of a large symmetric positive definite generalized eigenvalue problem
+///	\f$Ax=\lambda Bx,\f$
+///	where \f$A_{NxN}\f$ is a symmetric matrix, \f$B\f$ is symmetric and positive - definite. \f$A and B\f$ are also assumed large and sparse
+///	\f$\textit{M}\f$ should be \f$\<< textit{N}\f$ (at least \f$\textit{5M} < \textit{N} \f$)
+///
+///	*** ARGUMENTS
+///	Eigen::SparseMatrix<long double> A; // N*N - Ax = lambda*Bx, lrage and sparse
+///	Eigen::SparseMatrix<long double> X; // N*M - initial approximations to eigenvectors (random in general case)
+///	Spectra::LOBPCGSolver<long double> solver(A, X);
+///	*Eigen::SparseMatrix<long double> B; // N*N - Ax = lambda*Bx, sparse, positive definite
+///	solver.setConstraints(B);
+///	*Eigen::SparseMatrix<long double> Y; // N*K - constraints, already found eigenvectors
+///	solver.setB(B);
+///	*Eigen::SparseMatrix<long double> T; // N*N - preconditioner ~ A^-1
+///	solver.setPreconditioner(T);
+///
+///	*** OUTCOMES
+///	solver.solve(); // compute eigenpairs // void
+///	solver.info(); // state of converjance // int
+///	solver.residuals(); // get residuals to evaluate biases // Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic>
+///	solver.eigenvalues(); // get eigenvalues // Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic>
+///	solver.eigenvectors(); // get eigenvectors // Eigen::Matrix<Scalar, Eigen::Dynamic, 1>
+///
+///	*** EXAMPLE
+/// \code{.cpp}
+/// #include "Spectra/contrib/SymSparseEigsSolverLOBPCG.h"
+///
+///	// random A
+///	Matrix a;
+///	a = (Matrix::Random(10, 10).array() > 0.6).cast<long double>() * Matrix::Random(10, 10).array() * 5;
+///	a = Matrix((a).triangularView<Eigen::Lower>()) + Matrix((a).triangularView<Eigen::Lower>()).transpose();
+///	for (int i = 0; i < 10; i++)
+///		a(i, i) = i + 0.5;
+///	std::cout << a << "\n";
+///	Eigen::SparseMatrix<long double> A(a.sparseView());
+///	// random X
+///	Eigen::Matrix<long double, 10, 2> x;
+///	x = Matrix::Random(10, 2).array();
+///	Eigen::SparseMatrix<long double> X(x.sparseView());
+///	// solve Ax = lambda*x
+///	Spectra::LOBPCGSolver<long double> solver(A, X);
+///	solver.compute(10, 1e-4); // 10 iterations, L2_tolerance = 1e-4*N
+/// std::cout << "info\n" << solver.info() << std::endl;
+/// std::cout << "eigenvalues\n" << solver.eigenvalues() << std::endl;
+/// std::cout << "eigenvectors\n" << solver.eigenvectors() << std::endl;
+/// std::cout << "residuals\n" << solver.residuals() << std::endl;
+/// \endcode
+///
+
+template <typename Scalar = long double>
+class LOBPCGSolver
+{
+private:
+    typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
+    typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;
+
+    typedef std::complex<Scalar> Complex;
+    typedef Eigen::Matrix<Complex, Eigen::Dynamic, Eigen::Dynamic> ComplexMatrix;
+    typedef Eigen::Matrix<Complex, Eigen::Dynamic, 1> ComplexVector;
+
+    typedef Eigen::SparseMatrix<Scalar> SparseMatrix;
+    typedef Eigen::SparseMatrix<Complex> SparseComplexMatrix;
+
+    const int m_n;    // dimension of matrix A
+    const int m_nev;  // number of eigenvalues requested
+    SparseMatrix A, X;
+    SparseMatrix m_Y, m_B, m_preconditioner;
+    bool flag_with_constraints, flag_with_B, flag_with_preconditioner;
+
+public:
+    SparseMatrix m_residuals;
+    Matrix m_evectors;
+    Vector m_evalues;
+    int m_info;
+
+private:
+    // B-orthonormalize matrix M
+    int orthogonalizeInPlace(SparseMatrix& M, SparseMatrix& B,
+                             SparseMatrix& true_BM, bool has_true_BM = false)
+    {
+        SparseMatrix BM;
+
+        if (has_true_BM == false)
+        {
+            if (flag_with_B)
+            {
+                BM = B * M;
+            }
+            else
+            {
+                BM = M;
+            }
+        }
+        else
+        {
+            BM = true_BM;
+        }
+
+        Eigen::SimplicialLDLT<SparseMatrix> chol_MBM(M.transpose() * BM);
+
+        if (chol_MBM.info() != SUCCESSFUL)
+        {
+            // LDLT decomposition fail
+            m_info = chol_MBM.info();
+            return chol_MBM.info();
+        }
+
+        SparseComplexMatrix Upper_MBM = chol_MBM.matrixU().template cast<Complex>();
+        ComplexVector D_MBM_vec = chol_MBM.vectorD().template cast<Complex>();
+
+        D_MBM_vec = D_MBM_vec.cwiseSqrt();
+
+        for (int i = 0; i < D_MBM_vec.rows(); i++)
+        {
+            D_MBM_vec(i) = Complex(1.0, 0.0) / D_MBM_vec(i);
+        }
+
+        SparseComplexMatrix D_MBM_mat(D_MBM_vec.asDiagonal());
+
+        SparseComplexMatrix U_inv(Upper_MBM.rows(), Upper_MBM.cols());
+        U_inv.setIdentity();
+        Upper_MBM.template triangularView<Eigen::Upper>().solveInPlace(U_inv);
+
+        SparseComplexMatrix right_product = U_inv * D_MBM_mat;
+        M = M * right_product.real();
+        if (flag_with_B)
+        {
+            true_BM = B * M;
+        }
+        else
+        {
+            true_BM = M;
+        }
+
+        return SUCCESSFUL;
+    }
+
+    void applyConstraintsInPlace(SparseMatrix& X, SparseMatrix& Y,
+                                 SparseMatrix& B)
+    {
+        SparseMatrix BY;
+        if (flag_with_B)
+        {
+            BY = B * Y;
+        }
+        else
+        {
+            BY = Y;
+        }
+
+        SparseMatrix YBY = Y.transpose() * BY;
+        SparseMatrix BYX = BY.transpose() * X;
+
+        SparseMatrix YBY_XYX = (Matrix(YBY).bdcSvd(Eigen::ComputeThinU | Eigen::ComputeThinV).solve(Matrix(BYX))).sparseView();
+        X = X - Y * YBY_XYX;
+    }
+
+    /*
+		return
+		'AB
+		CD'
+		*/
+    Matrix stack_4_matricies(Matrix A, Matrix B,
+                             Matrix C, Matrix D)
+    {
+        Matrix result(A.rows() + C.rows(), A.cols() + B.cols());
+        result.topLeftCorner(A.rows(), A.cols()) = A;
+        result.topRightCorner(B.rows(), B.cols()) = B;
+        result.bottomLeftCorner(C.rows(), C.cols()) = C;
+        result.bottomRightCorner(D.rows(), D.cols()) = D;
+        return result;
+    }
+
+    Matrix stack_9_matricies(Matrix A, Matrix B, Matrix C,
+                             Matrix D, Matrix E, Matrix F,
+                             Matrix G, Matrix H, Matrix I)
+    {
+        Matrix result(A.rows() + D.rows() + G.rows(), A.cols() + B.cols() + C.cols());
+        result.block(0, 0, A.rows(), A.cols()) = A;
+        result.block(0, A.cols(), B.rows(), B.cols()) = B;
+        result.block(0, A.cols() + B.cols(), C.rows(), C.cols()) = C;
+        result.block(A.rows(), 0, D.rows(), D.cols()) = D;
+        result.block(A.rows(), A.cols(), E.rows(), E.cols()) = E;
+        result.block(A.rows(), A.cols() + B.cols(), F.rows(), F.cols()) = F;
+        result.block(A.rows() + D.rows(), 0, G.rows(), G.cols()) = G;
+        result.block(A.rows() + D.rows(), A.cols(), H.rows(), H.cols()) = H;
+        result.block(A.rows() + D.rows(), A.cols() + B.cols(), I.rows(), I.cols()) = I;
+
+        return result;
+    }
+
+    void sort_epairs(Vector& evalues, Matrix& evectors, int SelectionRule)
+    {
+        std::function<bool(Scalar, Scalar)> cmp;
+        if (SelectionRule == SMALLEST_ALGE)
+            cmp = std::less<Scalar>{};
+        else
+            cmp = std::greater<Scalar>{};
+
+        std::map<Scalar, Vector, decltype(cmp)> epairs(cmp);
+        for (int i = 0; i < m_evectors.cols(); ++i)
+            epairs.insert(std::make_pair(evalues(i), evectors.col(i)));
+
+        int i = 0;
+        for (auto& epair : epairs)
+        {
+            evectors.col(i) = epair.second;
+            evalues(i) = epair.first;
+            i++;
+        }
+    }
+
+    void removeColumns(SparseMatrix& matrix, std::vector<int>& colToRemove)
+    {
+        // remove columns through matrix multiplication
+        SparseMatrix new_matrix(matrix.cols(), matrix.cols() - int(colToRemove.size()));
+        int iCol = 0;
+        std::vector<Eigen::Triplet<Scalar>> tripletList;
+        tripletList.reserve(matrix.cols() - int(colToRemove.size()));
+
+        for (int iRow = 0; iRow < matrix.cols(); iRow++)
+        {
+            if (std::find(colToRemove.begin(), colToRemove.end(), iRow) == colToRemove.end())
+            {
+                tripletList.push_back(Eigen::Triplet<Scalar>(iRow, iCol, 1));
+                iCol++;
+            }
+        }
+
+        new_matrix.setFromTriplets(tripletList.begin(), tripletList.end());
+        matrix = matrix * new_matrix;
+    }
+
+    int checkConvergence_getBlocksize(SparseMatrix& m_residuals, Scalar tolerance_L2, std::vector<int>& columnsToDelete)
+    {
+        // square roots from sum of squares by column
+        int BlockSize = m_nev;
+        Scalar sum, buffer;
+
+        for (int iCol = 0; iCol < m_nev; iCol++)
+        {
+            sum = 0;
+            for (int iRow = 0; iRow < m_n; iRow++)
+            {
+                buffer = m_residuals.coeff(iRow, iCol);
+                sum += buffer * buffer;
+            }
+
+            if (sqrt(sum) < tolerance_L2)
+            {
+                BlockSize--;
+                columnsToDelete.push_back(iCol);
+            }
+        }
+        return BlockSize;
+    }
+
+public:
+    LOBPCGSolver(const SparseMatrix& A, const SparseMatrix X) :
+        m_n(A.rows()),
+        m_nev(X.cols()),
+        m_info(NOT_COMPUTED),
+        flag_with_constraints(false),
+        flag_with_B(false),
+        flag_with_preconditioner(false),
+        A(A),
+        X(X)
+    {
+        if (A.rows() != X.rows() || A.rows() != A.cols())
+            throw std::invalid_argument("Wrong size");
+
+        //if (m_n < 5* m_nev)
+        //	throw std::invalid_argument("The problem size is small compared to the block size. Use standard eigensolver");
+    }
+
+    void setConstraints(const SparseMatrix& Y)
+    {
+        m_Y = Y;
+        flag_with_constraints = true;
+    }
+
+    void setB(const SparseMatrix& B)
+    {
+        if (B.rows() != A.rows() || B.cols() != A.cols())
+            throw std::invalid_argument("Wrong size");
+        m_B = B;
+        flag_with_B = true;
+    }
+
+    void setPreconditioner(const SparseMatrix& preconditioner)
+    {
+        m_preconditioner = preconditioner;
+        flag_with_preconditioner = true;
+    }
+
+    void compute(int maxit = 10, Scalar tol_div_n = 1e-7)
+    {
+        Scalar tolerance_L2 = tol_div_n * m_n;
+        int BlockSize;
+        int max_iter = std::min(m_n, maxit);
+
+        SparseMatrix directions, AX, AR, BX, AD, ADD, DD, BDD, BD, XAD, RAD, DAD, XBD, RBD, BR, sparse_eVecX, sparse_eVecR, sparse_eVecD, inverse_matrix;
+        Matrix XAR, RAR, XBR, gramA, gramB, eVecX, eVecR, eVecD;
+        std::vector<int> columnsToDelete;
+
+        if (flag_with_constraints)
+        {
+            // Apply the constraints Y to X
+            applyConstraintsInPlace(X, m_Y, m_B);
+        }
+
+        // Make initial vectors orthonormal
+        // implicit BX declaration
+        if (orthogonalizeInPlace(X, m_B, BX) != SUCCESSFUL)
+        {
+            max_iter = 0;
+        }
+
+        AX = A * X;
+        // Solve the following NxN eigenvalue problem for all N eigenvalues and -vectors:
+        // first approximation via a dense problem
+        Eigen::EigenSolver<Matrix> eigs(Matrix(X.transpose() * AX));
+
+        if (eigs.info() != SUCCESSFUL)
+        {
+            m_info = eigs.info();
+            max_iter = 0;
+        }
+        else
+        {
+            m_evalues = eigs.eigenvalues().real();
+            m_evectors = eigs.eigenvectors().real();
+            sort_epairs(m_evalues, m_evectors, SMALLEST_ALGE);
+            sparse_eVecX = m_evectors.sparseView();
+
+            X = X * sparse_eVecX;
+            AX = AX * sparse_eVecX;
+            BX = BX * sparse_eVecX;
+        }
+
+        for (int iter_num = 0; iter_num < max_iter; iter_num++)
+        {
+            m_residuals.resize(m_n, m_nev);
+            for (int i = 0; i < m_nev; i++)
+            {
+                m_residuals.col(i) = AX.col(i) - m_evalues(i) * BX.col(i);
+            }
+            BlockSize = checkConvergence_getBlocksize(m_residuals, tolerance_L2, columnsToDelete);
+
+            if (BlockSize == 0)
+            {
+                m_info = SUCCESSFUL;
+                break;
+            }
+
+            // substitution of the original active mask
+            if (columnsToDelete.size() > 0)
+            {
+                removeColumns(m_residuals, columnsToDelete);
+                if (iter_num > 0)
+                {
+                    removeColumns(directions, columnsToDelete);
+                    removeColumns(AD, columnsToDelete);
+                    removeColumns(BD, columnsToDelete);
+                }
+                columnsToDelete.clear();  // for next iteration
+            }
+
+            if (flag_with_preconditioner)
+            {
+                // Apply the preconditioner to the residuals
+                m_residuals = m_preconditioner * m_residuals;
+            }
+
+            if (flag_with_constraints)
+            {
+                // Apply the constraints Y to residuals
+                applyConstraintsInPlace(m_residuals, m_Y, m_B);
+            }
+
+            if (orthogonalizeInPlace(m_residuals, m_B, BR) != SUCCESSFUL)
+            {
+                break;
+            }
+            AR = A * m_residuals;
+
+            // Orthonormalize conjugate directions
+            if (iter_num > 0)
+            {
+                if (orthogonalizeInPlace(directions, m_B, BD, true) != SUCCESSFUL)
+                {
+                    break;
+                }
+                AD = A * directions;
+            }
+
+            // Perform the Rayleigh Ritz Procedure
+            XAR = Matrix(X.transpose() * AR);
+            RAR = Matrix(m_residuals.transpose() * AR);
+            XBR = Matrix(X.transpose() * BR);
+
+            if (iter_num > 0)
+            {
+                XAD = X.transpose() * AD;
+                RAD = m_residuals.transpose() * AD;
+                DAD = directions.transpose() * AD;
+                XBD = X.transpose() * BD;
+                RBD = m_residuals.transpose() * BD;
+
+                gramA = stack_9_matricies(m_evalues.asDiagonal(), XAR, XAD, XAR.transpose(), RAR, RAD, XAD.transpose(), RAD.transpose(), DAD.transpose());
+                gramB = stack_9_matricies(Matrix::Identity(m_nev, m_nev), XBR, XBD, XBR.transpose(), Matrix::Identity(BlockSize, BlockSize), RBD, XBD.transpose(), RBD.transpose(), Matrix::Identity(BlockSize, BlockSize));
+            }
+            else
+            {
+                gramA = stack_4_matricies(m_evalues.asDiagonal(), XAR, XAR.transpose(), RAR);
+                gramB = stack_4_matricies(Matrix::Identity(m_nev, m_nev), XBR, XBR.transpose(), Matrix::Identity(BlockSize, BlockSize));
+            }
+
+            //calculate the lowest/largest m eigenpairs; Solve the generalized eigenvalue problem.
+            DenseSymMatProd<Scalar> Aop(gramA);
+            DenseCholesky<Scalar> Bop(gramB);
+
+            SymGEigsSolver<Scalar, SMALLEST_ALGE, DenseSymMatProd<Scalar>,
+                           DenseCholesky<Scalar>, GEIGS_CHOLESKY>
+                geigs(&Aop, &Bop, m_nev, std::min(10, int(gramA.rows()) - 1));
+
+            geigs.init();
+            int nconv = geigs.compute();
+
+            //Mat evecs;
+            if (geigs.info() == SUCCESSFUL)
+            {
+                m_evalues = geigs.eigenvalues();
+                m_evectors = geigs.eigenvectors();
+                sort_epairs(m_evalues, m_evectors, SMALLEST_ALGE);
+            }
+            else
+            {
+                // Problem With General EgenVec
+                m_info = geigs.info();
+                break;
+            }
+
+            // Compute Ritz vectors
+            if (iter_num > 0)
+            {
+                eVecX = m_evectors.block(0, 0, m_nev, m_nev);
+                eVecR = m_evectors.block(m_nev, 0, BlockSize, m_nev);
+                eVecD = m_evectors.block(m_nev + BlockSize, 0, BlockSize, m_nev);
+
+                sparse_eVecX = eVecX.sparseView();
+                sparse_eVecR = eVecR.sparseView();
+                sparse_eVecD = eVecD.sparseView();
+
+                DD = m_residuals * sparse_eVecR;  // new conjugate directions
+                ADD = AR * sparse_eVecR;
+                BDD = BR * sparse_eVecR;
+
+                DD = DD + directions * sparse_eVecD;
+                ADD = ADD + AD * sparse_eVecD;
+                BDD = BDD + BD * sparse_eVecD;
+            }
+            else
+            {
+                eVecX = m_evectors.block(0, 0, m_nev, m_nev);
+                eVecR = m_evectors.block(m_nev, 0, BlockSize, m_nev);
+
+                sparse_eVecX = eVecX.sparseView();
+                sparse_eVecR = eVecR.sparseView();
+
+                DD = m_residuals * sparse_eVecR;
+                ADD = AR * sparse_eVecR;
+                BDD = BR * sparse_eVecR;
+            }
+
+            X = X * sparse_eVecX + DD;
+            AX = AX * sparse_eVecX + ADD;
+            BX = BX * sparse_eVecX + BDD;
+
+            directions = DD;
+            AD = ADD;
+            BD = BDD;
+
+        }  // iteration loop
+
+        // calculate last residuals
+        m_residuals.resize(m_n, m_nev);
+        for (int i = 0; i < m_nev; i++)
+        {
+            m_residuals.col(i) = AX.col(i) - m_evalues(i) * BX.col(i);
+        }
+        BlockSize = checkConvergence_getBlocksize(m_residuals, tolerance_L2, columnsToDelete);
+
+        if (BlockSize == 0)
+        {
+            m_info = SUCCESSFUL;
+        }
+    }  // compute
+
+    Vector eigenvalues()
+    {
+        return m_evalues;
+    }
+
+    Matrix eigenvectors()
+    {
+        return m_evectors;
+    }
+
+    Matrix residuals()
+    {
+        return Matrix(m_residuals);
+    }
+
+    int info() { return m_info; }
+};
+
+}  // namespace Spectra
+
+#endif  // LOBPCG_SOLVER

diff --git a/gtsam/3rdparty/ceres/autodiff.h b/gtsam/3rdparty/ceres/autodiff.h
index f124425..eed3789 100644
--- a/gtsam/3rdparty/ceres/autodiff.h
+++ b/gtsam/3rdparty/ceres/autodiff.h
@@ -142,10 +142,10 @@
 
 #include <stddef.h>
 
-#include <gtsam/3rdparty/ceres/jet.h>
-#include <gtsam/3rdparty/ceres/eigen.h>
-#include <gtsam/3rdparty/ceres/fixed_array.h>
-#include <gtsam/3rdparty/ceres/variadic_evaluate.h>
+#include "gtsam/3rdparty/ceres/jet.h"
+#include "gtsam/3rdparty/ceres/eigen.h"
+#include "gtsam/3rdparty/ceres/fixed_array.h"
+#include "gtsam/3rdparty/ceres/variadic_evaluate.h"
 #define DCHECK assert
 #define DCHECK_GT(a,b) assert((a)>(b))
 

diff --git a/gtsam/3rdparty/ceres/example.h b/gtsam/3rdparty/ceres/example.h
index 6b051fc..b5e9309 100644
--- a/gtsam/3rdparty/ceres/example.h
+++ b/gtsam/3rdparty/ceres/example.h
@@ -33,7 +33,7 @@
 
 #pragma once
 
-#include <gtsam/3rdparty/ceres/rotation.h>
+#include "gtsam/3rdparty/ceres/rotation.h"
 
 // Templated pinhole camera model for used with Ceres. The camera is
 // parameterized using 9 parameters: 3 for rotation, 3 for translation, 1 for

diff --git a/gtsam/3rdparty/ceres/fixed_array.h b/gtsam/3rdparty/ceres/fixed_array.h
index d85021d..854d8f7 100644
--- a/gtsam/3rdparty/ceres/fixed_array.h
+++ b/gtsam/3rdparty/ceres/fixed_array.h
@@ -33,9 +33,9 @@
 #define CERES_PUBLIC_INTERNAL_FIXED_ARRAY_H_
 
 #include <cstddef>
-#include <gtsam/3rdparty/ceres/eigen.h>
-#include <gtsam/3rdparty/ceres/macros.h>
-#include <gtsam/3rdparty/ceres/manual_constructor.h>
+#include "gtsam/3rdparty/ceres/eigen.h"
+#include "gtsam/3rdparty/ceres/macros.h"
+#include "gtsam/3rdparty/ceres/manual_constructor.h"
 
 namespace ceres {
 namespace internal {

diff --git a/gtsam/3rdparty/ceres/jet.h b/gtsam/3rdparty/ceres/jet.h
index d45dab9..686497f 100644
--- a/gtsam/3rdparty/ceres/jet.h
+++ b/gtsam/3rdparty/ceres/jet.h
@@ -162,8 +162,8 @@
 #include <limits>
 #include <string>
 
-#include <gtsam/3rdparty/ceres/eigen.h>
-#include <gtsam/3rdparty/ceres/fpclassify.h>
+#include "gtsam/3rdparty/ceres/eigen.h"
+#include "gtsam/3rdparty/ceres/fpclassify.h"
 
 namespace ceres {
 

diff --git a/gtsam/3rdparty/ceres/variadic_evaluate.h b/gtsam/3rdparty/ceres/variadic_evaluate.h
index 86aec48..229791a 100644
--- a/gtsam/3rdparty/ceres/variadic_evaluate.h
+++ b/gtsam/3rdparty/ceres/variadic_evaluate.h
@@ -34,9 +34,9 @@
 
 #include <stddef.h>
 
-#include <gtsam/3rdparty/ceres/jet.h>
-#include <gtsam/3rdparty/ceres/eigen.h>
-#include <gtsam/3rdparty/ceres/fixed_array.h>
+#include "gtsam/3rdparty/ceres/jet.h"
+#include "gtsam/3rdparty/ceres/eigen.h"
+#include "gtsam/3rdparty/ceres/fixed_array.h"
 
 namespace ceres {
 namespace internal {

diff --git a/gtsam/3rdparty/metis/GKlib/GKlib.h b/gtsam/3rdparty/metis/GKlib/GKlib.h
index 492c90f..d78d3ec 100644
--- a/gtsam/3rdparty/metis/GKlib/GKlib.h
+++ b/gtsam/3rdparty/metis/GKlib/GKlib.h
@@ -61,22 +61,22 @@
 
 
 
-#include <gk_types.h>
-#include <gk_struct.h>
-#include <gk_externs.h>
-#include <gk_defs.h>
-#include <gk_macros.h>
-#include <gk_getopt.h>
-
-#include <gk_mksort.h>
-#include <gk_mkblas.h>
-#include <gk_mkmemory.h>
-#include <gk_mkpqueue.h>
-#include <gk_mkpqueue2.h>
-#include <gk_mkrandom.h>
-#include <gk_mkutils.h>
-
-#include <gk_proto.h>
+#include "gk_types.h"
+#include "gk_struct.h"
+#include "gk_externs.h"
+#include "gk_defs.h"
+#include "gk_macros.h"
+#include "gk_getopt.h"
+
+#include "gk_mksort.h"
+#include "gk_mkblas.h"
+#include "gk_mkmemory.h"
+#include "gk_mkpqueue.h"
+#include "gk_mkpqueue2.h"
+#include "gk_mkrandom.h"
+#include "gk_mkutils.h"
+
+#include "gk_proto.h"
 
 
 #endif  /* GKlib.h */

diff --git a/gtsam/3rdparty/metis/libmetis/metislib.h b/gtsam/3rdparty/metis/libmetis/metislib.h
index 93d48f0..327e7b2 100644
--- a/gtsam/3rdparty/metis/libmetis/metislib.h
+++ b/gtsam/3rdparty/metis/libmetis/metislib.h
@@ -14,16 +14,16 @@
 #ifndef _LIBMETIS_METISLIB_H_
 #define _LIBMETIS_METISLIB_H_
 
-#include <GKlib.h>
+#include "GKlib.h"
 
 #if defined(ENABLE_OPENMP)
   #include <omp.h>
 #endif
 
 
-#include <metis.h>
+#include "metis.h"
 #include <rename.h>
-#include <gklib_defs.h>
+#include "gklib_defs.h"
 
 #include <defs.h>
 #include <struct.h>

diff --git a/gtsam/3rdparty/metis/metis.h b/gtsam/3rdparty/metis/metis.h
index a1ba086..3691250 100644
--- a/gtsam/3rdparty/metis/metis.h
+++ b/gtsam/3rdparty/metis/metis.h
@@ -8,6 +8,6 @@
 #ifndef GTSAM_3RDPARTY_METIS_METIS_H_
 #define GTSAM_3RDPARTY_METIS_METIS_H_
 
-#include <gtsam/3rdparty/metis/include/metis.h>
+#include "gtsam/3rdparty/metis/include/metis.h"
 
 #endif /* GTSAM_3RDPARTY_METIS_METIS_H_ */

diff --git a/gtsam/3rdparty/metis/programs/metisbin.h b/gtsam/3rdparty/metis/programs/metisbin.h
index 330b0f4..8b2511e 100644
--- a/gtsam/3rdparty/metis/programs/metisbin.h
+++ b/gtsam/3rdparty/metis/programs/metisbin.h
@@ -7,7 +7,7 @@
  * George
  */
 
-#include <GKlib.h>
+#include "GKlib.h"
 #include <stddef.h>
 #include <stdlib.h>
 #include <stdarg.h>
@@ -27,7 +27,7 @@
 #endif
 
 
-#include <metis.h>
+#include "metis.h"
 #include "../libmetis/rename.h"
 #include "../libmetis/gklib_defs.h"
 #include "../libmetis/defs.h"

diff --git a/gtsam/base/ConcurrentMap.h b/gtsam/base/ConcurrentMap.h
index 372f02d..c62b3ba 100644
--- a/gtsam/base/ConcurrentMap.h
+++ b/gtsam/base/ConcurrentMap.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/global_includes.h>
+#include "gtsam/global_includes.h"
 
 // Change class depending on whether we are using TBB
 #ifdef GTSAM_USE_TBB
@@ -42,7 +42,7 @@ using ConcurrentMapBase = tbb::concurrent_unordered_map<
 #else
 
 // If we're not using TBB, use a FastMap for ConcurrentMap
-#include <gtsam/base/FastMap.h>
+#include "gtsam/base/FastMap.h"
 template <typename KEY, typename VALUE>
 using ConcurrentMapBase = gtsam::FastMap<KEY, VALUE>;
 
@@ -53,7 +53,7 @@ using ConcurrentMapBase = gtsam::FastMap<KEY, VALUE>;
 #include <boost/serialization/split_member.hpp>
 #endif
 
-#include <gtsam/base/FastVector.h>
+#include "gtsam/base/FastVector.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/DSFVector.cpp b/gtsam/base/DSFVector.cpp
index 75a4ef3..2e6ba39 100644
--- a/gtsam/base/DSFVector.cpp
+++ b/gtsam/base/DSFVector.cpp
@@ -16,7 +16,7 @@
  * @brief a faster implementation for DSF, which uses vector rather than btree.
  */
 
-#include <gtsam/base/DSFVector.h>
+#include "gtsam/base/DSFVector.h"
 #include <algorithm>
 #include <cassert>
 

diff --git a/gtsam/base/DSFVector.h b/gtsam/base/DSFVector.h
index a8b1276..c2b7da2 100644
--- a/gtsam/base/DSFVector.h
+++ b/gtsam/base/DSFVector.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/dllexport.h>
-#include <gtsam/global_includes.h>
+#include "gtsam/dllexport.h"
+#include "gtsam/global_includes.h"
 
 #include <memory>
 

diff --git a/gtsam/base/FastDefaultAllocator.h b/gtsam/base/FastDefaultAllocator.h
index bf5cfc4..c3847b4 100644
--- a/gtsam/base/FastDefaultAllocator.h
+++ b/gtsam/base/FastDefaultAllocator.h
@@ -17,7 +17,7 @@
  */
 
 #pragma once
-#include <gtsam/config.h>      // Configuration from CMake
+#include "gtsam/config.h"      // Configuration from CMake
 
 #if !defined GTSAM_ALLOCATOR_BOOSTPOOL && !defined GTSAM_ALLOCATOR_TBB && !defined GTSAM_ALLOCATOR_STL
 #  ifdef GTSAM_USE_TBB

diff --git a/gtsam/base/FastList.h b/gtsam/base/FastList.h
index 414c1e8..1c36b90 100644
--- a/gtsam/base/FastList.h
+++ b/gtsam/base/FastList.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/base/FastDefaultAllocator.h>
+#include "gtsam/base/FastDefaultAllocator.h"
 #include <list>
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>

diff --git a/gtsam/base/FastMap.h b/gtsam/base/FastMap.h
index e8ef3fc..f3b8c00 100644
--- a/gtsam/base/FastMap.h
+++ b/gtsam/base/FastMap.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/base/FastDefaultAllocator.h>
+#include "gtsam/base/FastDefaultAllocator.h"
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>
 #include <boost/serialization/map.hpp>

diff --git a/gtsam/base/FastSet.h b/gtsam/base/FastSet.h
index a1be08d..12aa370 100644
--- a/gtsam/base/FastSet.h
+++ b/gtsam/base/FastSet.h
@@ -26,8 +26,8 @@
 #include <boost/serialization/nvp.hpp>
 #include <boost/serialization/set.hpp>
 #endif
-#include <gtsam/base/FastDefaultAllocator.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/base/FastDefaultAllocator.h"
+#include "gtsam/base/Testable.h"
 
 #include <functional>
 #include <set>

diff --git a/gtsam/base/FastVector.h b/gtsam/base/FastVector.h
index 0faf80f..d09db46 100644
--- a/gtsam/base/FastVector.h
+++ b/gtsam/base/FastVector.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/base/FastDefaultAllocator.h>
+#include "gtsam/base/FastDefaultAllocator.h"
 #include <vector>
 
 namespace gtsam {

diff --git a/gtsam/base/GenericValue.h b/gtsam/base/GenericValue.h
index 87ce7a7..01bb548 100644
--- a/gtsam/base/GenericValue.h
+++ b/gtsam/base/GenericValue.h
@@ -19,9 +19,9 @@
 
 #pragma once
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/types.h>
-#include <gtsam/base/Value.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/types.h"
+#include "gtsam/base/Value.h"
 
 #include <cmath>
 #include <iostream>

diff --git a/gtsam/base/Group.h b/gtsam/base/Group.h
index 09534ef..7fecb5e 100644
--- a/gtsam/base/Group.h
+++ b/gtsam/base/Group.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
+#include "gtsam/base/Testable.h"
 
 #include <utility>
 

diff --git a/gtsam/base/Lie.h b/gtsam/base/Lie.h
index 862ae6f..a41a686 100644
--- a/gtsam/base/Lie.h
+++ b/gtsam/base/Lie.h
@@ -23,8 +23,8 @@
 
 #pragma once
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/Group.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/Group.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/Manifold.h b/gtsam/base/Manifold.h
index 922b8dd..02319be 100644
--- a/gtsam/base/Manifold.h
+++ b/gtsam/base/Manifold.h
@@ -19,10 +19,10 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/OptionalJacobian.h>
-#include <gtsam/base/concepts.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/OptionalJacobian.h"
+#include "gtsam/base/concepts.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/Matrix.cpp b/gtsam/base/Matrix.cpp
index 1e04bc5..d38800e 100644
--- a/gtsam/base/Matrix.cpp
+++ b/gtsam/base/Matrix.cpp
@@ -15,11 +15,11 @@
  * @author Christian Potthast
  */
 
-#include <gtsam/global_includes.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/FastList.h>
+#include "gtsam/global_includes.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/FastList.h"
 #include <Eigen/SVD>
 #include <Eigen/LU>
 

diff --git a/gtsam/base/Matrix.h b/gtsam/base/Matrix.h
index c8dc46e..a4059f5 100644
--- a/gtsam/base/Matrix.h
+++ b/gtsam/base/Matrix.h
@@ -24,8 +24,8 @@
 
 #pragma once
 
-#include <gtsam/base/OptionalJacobian.h>
-#include <gtsam/base/Vector.h>
+#include "gtsam/base/OptionalJacobian.h"
+#include "gtsam/base/Vector.h"
 
 #include <vector>
 

diff --git a/gtsam/base/MatrixSerialization.h b/gtsam/base/MatrixSerialization.h
index 9cf7302..1cd3185 100644
--- a/gtsam/base/MatrixSerialization.h
+++ b/gtsam/base/MatrixSerialization.h
@@ -22,7 +22,7 @@
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #pragma once
 
-#include <gtsam/base/Matrix.h>
+#include "gtsam/base/Matrix.h"
 
 #include <boost/serialization/array.hpp>
 #include <boost/serialization/nvp.hpp>

diff --git a/gtsam/base/OptionalJacobian.h b/gtsam/base/OptionalJacobian.h
index 22a17e1..92ad193 100644
--- a/gtsam/base/OptionalJacobian.h
+++ b/gtsam/base/OptionalJacobian.h
@@ -20,7 +20,7 @@
 #pragma once
 #include <cstddef>
 #include <functional>
-#include <gtsam/config.h>      // Configuration from CMake
+#include "gtsam/config.h"      // Configuration from CMake
 #include <Eigen/Dense>
 #include <optional>
 #include <stdexcept>

diff --git a/gtsam/base/ProductLieGroup.h b/gtsam/base/ProductLieGroup.h
index bb7ba72..210d85d 100644
--- a/gtsam/base/ProductLieGroup.h
+++ b/gtsam/base/ProductLieGroup.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/base/Lie.h>
+#include "gtsam/base/Lie.h"
 #include <utility>  // pair
 
 namespace gtsam {

diff --git a/gtsam/base/SymmetricBlockMatrix.cpp b/gtsam/base/SymmetricBlockMatrix.cpp
index d37bbf7..84df90a 100644
--- a/gtsam/base/SymmetricBlockMatrix.cpp
+++ b/gtsam/base/SymmetricBlockMatrix.cpp
@@ -16,11 +16,11 @@
  * @date    Sep 18, 2010
  */
 
-#include <gtsam/base/SymmetricBlockMatrix.h>
-#include <gtsam/base/VerticalBlockMatrix.h>
-#include <gtsam/base/cholesky.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/base/ThreadsafeException.h>
+#include "gtsam/base/SymmetricBlockMatrix.h"
+#include "gtsam/base/VerticalBlockMatrix.h"
+#include "gtsam/base/cholesky.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/base/ThreadsafeException.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/SymmetricBlockMatrix.h b/gtsam/base/SymmetricBlockMatrix.h
index 1783857..3944f23 100644
--- a/gtsam/base/SymmetricBlockMatrix.h
+++ b/gtsam/base/SymmetricBlockMatrix.h
@@ -17,10 +17,10 @@
 */
 #pragma once
 
-#include <gtsam/base/FastVector.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/types.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/base/FastVector.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/types.h"
+#include "gtsam/dllexport.h"
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>
 #endif

diff --git a/gtsam/base/Testable.h b/gtsam/base/Testable.h
index 8eb6326..45fb4a5 100644
--- a/gtsam/base/Testable.h
+++ b/gtsam/base/Testable.h
@@ -33,7 +33,7 @@
 
 #pragma once
 
-#include <gtsam/base/concepts.h>
+#include "gtsam/base/concepts.h"
 
 #include <functional>
 #include <iostream>

diff --git a/gtsam/base/TestableAssertions.h b/gtsam/base/TestableAssertions.h
index b5068ad..14070a1 100644
--- a/gtsam/base/TestableAssertions.h
+++ b/gtsam/base/TestableAssertions.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/global_includes.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/global_includes.h"
 
 #include <functional>
 #include <optional>

diff --git a/gtsam/base/ThreadsafeException.h b/gtsam/base/ThreadsafeException.h
index 79dbe6b..d3621e4 100644
--- a/gtsam/base/ThreadsafeException.h
+++ b/gtsam/base/ThreadsafeException.h
@@ -19,9 +19,9 @@
 
 #pragma once
 
-#include <gtsam/config.h> // for GTSAM_USE_TBB
+#include "gtsam/config.h" // for GTSAM_USE_TBB
 
-#include <gtsam/dllexport.h>
+#include "gtsam/dllexport.h"
 #include <string>
 #include <typeinfo>
 #include <exception>

diff --git a/gtsam/base/Value.h b/gtsam/base/Value.h
index c36de42..298a7a7 100644
--- a/gtsam/base/Value.h
+++ b/gtsam/base/Value.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/config.h>      // Configuration from CMake
+#include "gtsam/config.h"      // Configuration from CMake
 
-#include <gtsam/base/Vector.h>
+#include "gtsam/base/Vector.h"
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>
 #include <boost/serialization/assume_abstract.hpp>

diff --git a/gtsam/base/Vector.cpp b/gtsam/base/Vector.cpp
index dbd48df..1a84dc1 100644
--- a/gtsam/base/Vector.cpp
+++ b/gtsam/base/Vector.cpp
@@ -17,7 +17,7 @@
  * @author  Varun Agrawal
  */
 
-#include <gtsam/base/Vector.h>
+#include "gtsam/base/Vector.h"
 #include <stdexcept>
 #include <cstdarg>
 #include <limits>

diff --git a/gtsam/base/Vector.h b/gtsam/base/Vector.h
index 4ef3742..07dab2c 100644
--- a/gtsam/base/Vector.h
+++ b/gtsam/base/Vector.h
@@ -26,7 +26,7 @@
 #define MKL_BLAS MKL_DOMAIN_BLAS
 #endif
 
-#include <gtsam/global_includes.h>
+#include "gtsam/global_includes.h"
 #include <Eigen/Core>
 #include <iosfwd>
 #include <list>

diff --git a/gtsam/base/VectorSerialization.h b/gtsam/base/VectorSerialization.h
index 7acf108..699094d 100644
--- a/gtsam/base/VectorSerialization.h
+++ b/gtsam/base/VectorSerialization.h
@@ -20,7 +20,7 @@
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #pragma once
 
-#include <gtsam/base/Vector.h>
+#include "gtsam/base/Vector.h"
 
 #include <boost/serialization/array.hpp>
 #include <boost/serialization/nvp.hpp>

diff --git a/gtsam/base/VectorSpace.h b/gtsam/base/VectorSpace.h
index c5c4ad6..d2ace4f 100644
--- a/gtsam/base/VectorSpace.h
+++ b/gtsam/base/VectorSpace.h
@@ -8,7 +8,7 @@
 
 #pragma once
 
-#include <gtsam/base/Lie.h>
+#include "gtsam/base/Lie.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/VerticalBlockMatrix.cpp b/gtsam/base/VerticalBlockMatrix.cpp
index 344081c..56fec81 100644
--- a/gtsam/base/VerticalBlockMatrix.cpp
+++ b/gtsam/base/VerticalBlockMatrix.cpp
@@ -16,8 +16,8 @@
  * @author  Richard Roberts
  * @date    Sep 18, 2010 */
 
-#include <gtsam/base/VerticalBlockMatrix.h>
-#include <gtsam/base/SymmetricBlockMatrix.h>
+#include "gtsam/base/VerticalBlockMatrix.h"
+#include "gtsam/base/SymmetricBlockMatrix.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/VerticalBlockMatrix.h b/gtsam/base/VerticalBlockMatrix.h
index c8fef76..0f054d2 100644
--- a/gtsam/base/VerticalBlockMatrix.h
+++ b/gtsam/base/VerticalBlockMatrix.h
@@ -17,9 +17,9 @@
  * @date    Sep 18, 2010 */
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/MatrixSerialization.h>
-#include <gtsam/base/FastVector.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/MatrixSerialization.h"
+#include "gtsam/base/FastVector.h"
 
 #include <cassert>
 

diff --git a/gtsam/base/chartTesting.h b/gtsam/base/chartTesting.h
index 05b06a4..49ec94d 100644
--- a/gtsam/base/chartTesting.h
+++ b/gtsam/base/chartTesting.h
@@ -18,12 +18,12 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/Testable.h>
-#include <CppUnitLite/TestResult.h>
-#include <CppUnitLite/Test.h>
-#include <CppUnitLite/Failure.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/Testable.h"
+#include "CppUnitLite/TestResult.h"
+#include "CppUnitLite/Test.h"
+#include "CppUnitLite/Failure.h"
 
 namespace gtsam {
 // Do a full concept check and test the invertibility of local() vs. retract().

diff --git a/gtsam/base/cholesky.cpp b/gtsam/base/cholesky.cpp
index 9fee627..6f8746d 100644
--- a/gtsam/base/cholesky.cpp
+++ b/gtsam/base/cholesky.cpp
@@ -17,8 +17,8 @@
  * @date    Nov 5, 2010
  */
 
-#include <gtsam/base/cholesky.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/base/cholesky.h"
+#include "gtsam/base/timing.h"
 
 #include <cmath>
 #include <cassert>

diff --git a/gtsam/base/cholesky.h b/gtsam/base/cholesky.h
index bf7d18a..bb41cab 100644
--- a/gtsam/base/cholesky.h
+++ b/gtsam/base/cholesky.h
@@ -17,7 +17,7 @@
  */
 #pragma once
 
-#include <gtsam/base/Matrix.h>
+#include "gtsam/base/Matrix.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/debug.cpp b/gtsam/base/debug.cpp
index 592b42d..76c790e 100644
--- a/gtsam/base/debug.cpp
+++ b/gtsam/base/debug.cpp
@@ -16,8 +16,8 @@
  * @date    Feb 1, 2011
  */
 
-#include <gtsam/base/debug.h>
-#include <gtsam/config.h> // for GTSAM_USE_TBB
+#include "gtsam/base/debug.h"
+#include "gtsam/config.h" // for GTSAM_USE_TBB
 
 #ifdef GTSAM_USE_TBB
 #include <mutex> // std::mutex, std::unique_lock

diff --git a/gtsam/base/debug.h b/gtsam/base/debug.h
index 5f42580..13f721b 100644
--- a/gtsam/base/debug.h
+++ b/gtsam/base/debug.h
@@ -16,8 +16,8 @@
  * @date    Feb 1, 2011
  */
 
-#include <gtsam/base/FastMap.h>
-#include <gtsam/global_includes.h>
+#include "gtsam/base/FastMap.h"
+#include "gtsam/global_includes.h"
 #include <string>
 
 

diff --git a/gtsam/base/kruskal-inl.h b/gtsam/base/kruskal-inl.h
index d610541..c60cf64 100644
--- a/gtsam/base/kruskal-inl.h
+++ b/gtsam/base/kruskal-inl.h
@@ -19,10 +19,10 @@
 
 #pragma once
 
-#include <gtsam/base/DSFMap.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/types.h>
-#include <gtsam/inference/VariableIndex.h>
+#include "gtsam/base/DSFMap.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/types.h"
+#include "gtsam/inference/VariableIndex.h"
 
 #include <algorithm>
 #include <numeric>

diff --git a/gtsam/base/kruskal.h b/gtsam/base/kruskal.h
index 058c224..fb07bb8 100644
--- a/gtsam/base/kruskal.h
+++ b/gtsam/base/kruskal.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/base/FastMap.h>
-#include <gtsam/inference/FactorGraph.h>
+#include "gtsam/base/FastMap.h"
+#include "gtsam/inference/FactorGraph.h"
 
 #include <vector>
 
@@ -38,4 +38,4 @@ std::vector<size_t> kruskal(const FactorGraph<FACTOR> &fg,
                             const std::vector<double> &weights);
 }  // namespace gtsam::utils
 
-#include <gtsam/base/kruskal-inl.h>
+#include "gtsam/base/kruskal-inl.h"

diff --git a/gtsam/base/lieProxies.h b/gtsam/base/lieProxies.h
index c811eb5..53e1d5e 100644
--- a/gtsam/base/lieProxies.h
+++ b/gtsam/base/lieProxies.h
@@ -17,7 +17,7 @@
 
 #pragma once
 
-#include <gtsam/global_includes.h>
+#include "gtsam/global_includes.h"
 
 /**
  * Global functions in a separate testing namespace

diff --git a/gtsam/base/make_shared.h b/gtsam/base/make_shared.h
index 98a4a7e..e1e0669 100644
--- a/gtsam/base/make_shared.h
+++ b/gtsam/base/make_shared.h
@@ -17,7 +17,7 @@
 
 #pragma once
 
-#include <gtsam/base/types.h>
+#include "gtsam/base/types.h"
 
 #include <Eigen/Core>
 

diff --git a/gtsam/base/numericalDerivative.h b/gtsam/base/numericalDerivative.h
index 8183841..0b59cf9 100644
--- a/gtsam/base/numericalDerivative.h
+++ b/gtsam/base/numericalDerivative.h
@@ -20,10 +20,10 @@
 
 #include <functional>
 
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/base/Lie.h>
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/base/Lie.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/serializationTestHelpers.h b/gtsam/base/serializationTestHelpers.h
index 09b36cd..6d7c365 100644
--- a/gtsam/base/serializationTestHelpers.h
+++ b/gtsam/base/serializationTestHelpers.h
@@ -24,8 +24,8 @@
 #include <sstream>
 #include <string>
 
-#include <gtsam/base/serialization.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "gtsam/base/serialization.h"
+#include "gtsam/base/TestableAssertions.h"
 
 #include <boost/serialization/serialization.hpp>
 #include <boost/filesystem.hpp>

diff --git a/gtsam/base/testLie.h b/gtsam/base/testLie.h
index 63eb867..b651d16 100644
--- a/gtsam/base/testLie.h
+++ b/gtsam/base/testLie.h
@@ -18,12 +18,12 @@
 
 #pragma once
 
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/numericalDerivative.h"
 
-#include <CppUnitLite/TestResult.h>
-#include <CppUnitLite/Test.h>
-#include <CppUnitLite/Failure.h>
+#include "CppUnitLite/TestResult.h"
+#include "CppUnitLite/Test.h"
+#include "CppUnitLite/Failure.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/tests/testCholesky.cpp b/gtsam/base/tests/testCholesky.cpp
index 9b80658..0469e93 100644
--- a/gtsam/base/tests/testCholesky.cpp
+++ b/gtsam/base/tests/testCholesky.cpp
@@ -15,9 +15,9 @@
  * @date    Nov 5, 2010
  */
 
-#include <gtsam/base/debug.h>
-#include <gtsam/base/cholesky.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/debug.h"
+#include "gtsam/base/cholesky.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 using namespace std;

diff --git a/gtsam/base/tests/testDSFMap.cpp b/gtsam/base/tests/testDSFMap.cpp
index 3fd5568..20fe305 100644
--- a/gtsam/base/tests/testDSFMap.cpp
+++ b/gtsam/base/tests/testDSFMap.cpp
@@ -16,8 +16,8 @@
  * @brief unit tests for DSFMap
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/DSFMap.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/DSFMap.h"
 
 #include <iostream>
 #include <list>

diff --git a/gtsam/base/tests/testDSFVector.cpp b/gtsam/base/tests/testDSFVector.cpp
index c626f94..b2ab004 100644
--- a/gtsam/base/tests/testDSFVector.cpp
+++ b/gtsam/base/tests/testDSFVector.cpp
@@ -16,9 +16,9 @@
  * @brief unit tests for DSF
  */
 
-#include <gtsam/base/DSFVector.h>
+#include "gtsam/base/DSFVector.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 
 #include <iostream>

diff --git a/gtsam/base/tests/testDebug.cpp b/gtsam/base/tests/testDebug.cpp
index 81e4f03..b00e3d1 100644
--- a/gtsam/base/tests/testDebug.cpp
+++ b/gtsam/base/tests/testDebug.cpp
@@ -15,12 +15,12 @@
  * @date    Feb 14, 2011
  */
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #undef NDEBUG
 #define NDEBUG
 #undef GTSAM_ENABLE_DEBUG
-#include <gtsam/base/debug.h>
+#include "gtsam/base/debug.h"
 
 /* ************************************************************************* */
 TEST(Debug, debug_disabled) {
@@ -33,7 +33,7 @@ TEST(Debug, debug_disabled) {
 }
 
 #define GTSAM_ENABLE_DEBUG
-#include <gtsam/base/debug.h>
+#include "gtsam/base/debug.h"
 
 /* ************************************************************************* */
 TEST(Debug, debug_enabled) {

diff --git a/gtsam/base/tests/testFastContainers.cpp b/gtsam/base/tests/testFastContainers.cpp
index acb6347..ef737d0 100644
--- a/gtsam/base/tests/testFastContainers.cpp
+++ b/gtsam/base/tests/testFastContainers.cpp
@@ -7,11 +7,11 @@
  * @author Alex Cunningham
  */
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/FastSet.h>
-#include <gtsam/base/FastVector.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/FastSet.h"
+#include "gtsam/base/FastVector.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/base/tests/testGroup.cpp b/gtsam/base/tests/testGroup.cpp
index 3c8b04f..4457629 100644
--- a/gtsam/base/tests/testGroup.cpp
+++ b/gtsam/base/tests/testGroup.cpp
@@ -15,8 +15,8 @@
  * @author Frank Dellaert
  **/
 
-#include <gtsam/base/Group.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/base/Group.h"
+#include "gtsam/base/Testable.h"
 #include <Eigen/Core>
 #include <iostream>
 
@@ -70,8 +70,8 @@ struct traits<Symmetric<N> > : internal::MultiplicativeGroupTraits<Symmetric<N>
 
 } // namespace gtsam
 
-#include <gtsam/base/Testable.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/Testable.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/base/tests/testKruskal.cpp b/gtsam/base/tests/testKruskal.cpp
index bb8cfca..7fcbfef 100644
--- a/gtsam/base/tests/testKruskal.cpp
+++ b/gtsam/base/tests/testKruskal.cpp
@@ -15,15 +15,15 @@
  * @author Ankur Roy Chowdhury
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/kruskal.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/kruskal.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 #include <list>
 #include <memory>

diff --git a/gtsam/base/tests/testMatrix.cpp b/gtsam/base/tests/testMatrix.cpp
index 3fbf117..6610c6a 100644
--- a/gtsam/base/tests/testMatrix.cpp
+++ b/gtsam/base/tests/testMatrix.cpp
@@ -16,10 +16,10 @@
  * @author Carlos Nieto
  **/
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/base/testLie.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/base/testLie.h"
+#include "CppUnitLite/TestHarness.h"
 #include <iostream>
 #include <sstream>
 #include <optional>

diff --git a/gtsam/base/tests/testNumericalDerivative.cpp b/gtsam/base/tests/testNumericalDerivative.cpp
index b14f699..53a40e1 100644
--- a/gtsam/base/tests/testNumericalDerivative.cpp
+++ b/gtsam/base/tests/testNumericalDerivative.cpp
@@ -15,8 +15,8 @@
  * @date    Apr 8, 2011
  */
 
-#include <gtsam/base/numericalDerivative.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/numericalDerivative.h"
+#include "CppUnitLite/TestHarness.h"
 
 #include <cassert>
 

diff --git a/gtsam/base/tests/testOptionalJacobian.cpp b/gtsam/base/tests/testOptionalJacobian.cpp
index 4c775af..b0a46d8 100644
--- a/gtsam/base/tests/testOptionalJacobian.cpp
+++ b/gtsam/base/tests/testOptionalJacobian.cpp
@@ -16,9 +16,9 @@
  * @date    Nov 28, 2014
  **/
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/OptionalJacobian.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/OptionalJacobian.h"
+#include "CppUnitLite/TestHarness.h"
 
 #include <optional>
 #include <functional>

diff --git a/gtsam/base/tests/testSerializationBase.cpp b/gtsam/base/tests/testSerializationBase.cpp
index 9387d9b..4dbd961 100644
--- a/gtsam/base/tests/testSerializationBase.cpp
+++ b/gtsam/base/tests/testSerializationBase.cpp
@@ -16,20 +16,20 @@
  * @date Feb 7, 2012
  */
 
-#include <gtsam/inference/Key.h>
-
-#include <gtsam/base/ConcurrentMap.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/MatrixSerialization.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/FastList.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/FastSet.h>
-#include <gtsam/base/FastVector.h>
-
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/base/std_optional_serialization.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/inference/Key.h"
+
+#include "gtsam/base/ConcurrentMap.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/MatrixSerialization.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/FastList.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/FastSet.h"
+#include "gtsam/base/FastVector.h"
+
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/base/std_optional_serialization.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/base/tests/testStdOptionalSerialization.cpp b/gtsam/base/tests/testStdOptionalSerialization.cpp
index d9bd1da..fa19e58 100644
--- a/gtsam/base/tests/testStdOptionalSerialization.cpp
+++ b/gtsam/base/tests/testStdOptionalSerialization.cpp
@@ -1,4 +1,4 @@
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <boost/archive/binary_iarchive.hpp>
 #include <boost/archive/binary_oarchive.hpp>

diff --git a/gtsam/base/tests/testSymmetricBlockMatrix.cpp b/gtsam/base/tests/testSymmetricBlockMatrix.cpp
index 24dbe0a..597e4b0 100644
--- a/gtsam/base/tests/testSymmetricBlockMatrix.cpp
+++ b/gtsam/base/tests/testSymmetricBlockMatrix.cpp
@@ -15,8 +15,8 @@
 * @author Richard Roberts
 **/
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/SymmetricBlockMatrix.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/SymmetricBlockMatrix.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/base/tests/testTreeTraversal.cpp b/gtsam/base/tests/testTreeTraversal.cpp
index 74660bb..34d92b5 100644
--- a/gtsam/base/tests/testTreeTraversal.cpp
+++ b/gtsam/base/tests/testTreeTraversal.cpp
@@ -15,9 +15,9 @@
  * @author Richard Roberts
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/treeTraversal-inst.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/treeTraversal-inst.h"
 
 #include <vector>
 #include <list>

diff --git a/gtsam/base/tests/testVector.cpp b/gtsam/base/tests/testVector.cpp
index d95b142..3d9d25e 100644
--- a/gtsam/base/tests/testVector.cpp
+++ b/gtsam/base/tests/testVector.cpp
@@ -15,10 +15,10 @@
  * @author Frank Dellaert
  **/
 
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/base/testLie.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/base/testLie.h"
+#include "CppUnitLite/TestHarness.h"
 #include <iostream>
 
 using namespace std;

diff --git a/gtsam/base/tests/testVerticalBlockMatrix.cpp b/gtsam/base/tests/testVerticalBlockMatrix.cpp
index 758d776..bd827d1 100644
--- a/gtsam/base/tests/testVerticalBlockMatrix.cpp
+++ b/gtsam/base/tests/testVerticalBlockMatrix.cpp
@@ -16,8 +16,8 @@
  * @date   February 15, 2014
  **/
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/VerticalBlockMatrix.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/VerticalBlockMatrix.h"
 
 #include<list>
 #include<vector>

diff --git a/gtsam/base/tests/testWeightedSampler.cpp b/gtsam/base/tests/testWeightedSampler.cpp
index 8ebcdfd..fb58eb6 100644
--- a/gtsam/base/tests/testWeightedSampler.cpp
+++ b/gtsam/base/tests/testWeightedSampler.cpp
@@ -16,9 +16,9 @@
  * @date    MAy 2019
  **/
 
-#include <gtsam/base/WeightedSampler.h>
+#include "gtsam/base/WeightedSampler.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <random>
 

diff --git a/gtsam/base/timing.cpp b/gtsam/base/timing.cpp
index b435950..a4cce2c 100644
--- a/gtsam/base/timing.cpp
+++ b/gtsam/base/timing.cpp
@@ -16,8 +16,8 @@
  * @date     Oct 5, 2010
  */
 
-#include <gtsam/base/debug.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/base/debug.h"
+#include "gtsam/base/timing.h"
 
 #include <algorithm>
 #include <cassert>

diff --git a/gtsam/base/timing.h b/gtsam/base/timing.h
index 99c55a3..6a7b78b 100644
--- a/gtsam/base/timing.h
+++ b/gtsam/base/timing.h
@@ -17,9 +17,9 @@
  */
 #pragma once
 
-#include <gtsam/base/FastMap.h>
-#include <gtsam/dllexport.h>
-#include <gtsam/config.h> // for GTSAM_USE_TBB
+#include "gtsam/base/FastMap.h"
+#include "gtsam/dllexport.h"
+#include "gtsam/config.h" // for GTSAM_USE_TBB
 
 #ifdef GTSAM_USE_BOOST_FEATURES
 #include <boost/version.hpp>

diff --git a/gtsam/base/treeTraversal-inst.h b/gtsam/base/treeTraversal-inst.h
index 70cc5b1..965acfe 100644
--- a/gtsam/base/treeTraversal-inst.h
+++ b/gtsam/base/treeTraversal-inst.h
@@ -16,13 +16,13 @@
  */
 #pragma once
 
-#include <gtsam/base/treeTraversal/parallelTraversalTasks.h>
-#include <gtsam/base/treeTraversal/statistics.h>
+#include "gtsam/base/treeTraversal/parallelTraversalTasks.h"
+#include "gtsam/base/treeTraversal/statistics.h"
 
-#include <gtsam/base/FastList.h>
-#include <gtsam/base/FastVector.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/config.h> // for GTSAM_USE_TBB
+#include "gtsam/base/FastList.h"
+#include "gtsam/base/FastVector.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/config.h" // for GTSAM_USE_TBB
 
 #include <stack>
 #include <vector>

diff --git a/gtsam/base/treeTraversal/parallelTraversalTasks.h b/gtsam/base/treeTraversal/parallelTraversalTasks.h
index 41996a3..b0a133a 100644
--- a/gtsam/base/treeTraversal/parallelTraversalTasks.h
+++ b/gtsam/base/treeTraversal/parallelTraversalTasks.h
@@ -16,7 +16,7 @@
 */
 #pragma once
 
-#include <gtsam/global_includes.h>
+#include "gtsam/global_includes.h"
 
 #include <memory>
 

diff --git a/gtsam/base/treeTraversal/statistics.h b/gtsam/base/treeTraversal/statistics.h
index 3ab0c94..0fd915f 100644
--- a/gtsam/base/treeTraversal/statistics.h
+++ b/gtsam/base/treeTraversal/statistics.h
@@ -17,8 +17,8 @@
 */
 #pragma once
 
-#include <gtsam/global_includes.h>
-#include <gtsam/base/FastMap.h>
+#include "gtsam/global_includes.h"
+#include "gtsam/base/FastMap.h"
 
 #include <ostream>
 

diff --git a/gtsam/base/types.cpp b/gtsam/base/types.cpp
index 83db14d..3a92095 100644
--- a/gtsam/base/types.cpp
+++ b/gtsam/base/types.cpp
@@ -17,7 +17,7 @@
  * @ingroup base
  */
 
-#include <gtsam/base/types.h>
+#include "gtsam/base/types.h"
 
 #ifdef _WIN32
 #define WIN32_LEAN_AND_MEAN

diff --git a/gtsam/base/types.h b/gtsam/base/types.h
index c734678..216be99 100644
--- a/gtsam/base/types.h
+++ b/gtsam/base/types.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/config.h>  // for GTSAM_USE_TBB
-#include <gtsam/dllexport.h>
+#include "gtsam/config.h"  // for GTSAM_USE_TBB
+#include "gtsam/dllexport.h"
 
 #include <cstddef>
 #include <cstdint>

diff --git a/gtsam/base/utilities.cpp b/gtsam/base/utilities.cpp
index 189156c..c7a9d1e 100644
--- a/gtsam/base/utilities.cpp
+++ b/gtsam/base/utilities.cpp
@@ -1,4 +1,4 @@
-#include <gtsam/base/utilities.h>
+#include "gtsam/base/utilities.h"
 
 namespace gtsam {
 

diff --git a/gtsam/base/utilities.h b/gtsam/base/utilities.h
index a67c5d1..7c97781 100644
--- a/gtsam/base/utilities.h
+++ b/gtsam/base/utilities.h
@@ -4,7 +4,7 @@
 #include <iostream>
 #include <sstream>
 
-#include <gtsam/dllexport.h>
+#include "gtsam/dllexport.h"
 
 namespace gtsam {
 /**

diff --git a/gtsam/basis/Basis.cpp b/gtsam/basis/Basis.cpp
index 3e684b1..595260d 100644
--- a/gtsam/basis/Basis.cpp
+++ b/gtsam/basis/Basis.cpp
@@ -16,7 +16,7 @@
  * @date June 20, 2023
  */
 
-#include <gtsam/basis/Basis.h>
+#include "gtsam/basis/Basis.h"
 
 namespace gtsam {
 

diff --git a/gtsam/basis/Basis.h b/gtsam/basis/Basis.h
index 960440d..d5381ac 100644
--- a/gtsam/basis/Basis.h
+++ b/gtsam/basis/Basis.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/OptionalJacobian.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/OptionalJacobian.h"
 
 #include <iostream>
 

diff --git a/gtsam/basis/BasisFactors.h b/gtsam/basis/BasisFactors.h
index ad92ad6..70b75bd 100644
--- a/gtsam/basis/BasisFactors.h
+++ b/gtsam/basis/BasisFactors.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/basis/Basis.h>
-#include <gtsam/nonlinear/FunctorizedFactor.h>
+#include "gtsam/basis/Basis.h"
+#include "gtsam/nonlinear/FunctorizedFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/basis/Chebyshev.cpp b/gtsam/basis/Chebyshev.cpp
index 3b5825f..65ae4ef 100644
--- a/gtsam/basis/Chebyshev.cpp
+++ b/gtsam/basis/Chebyshev.cpp
@@ -16,7 +16,7 @@
  * @date July 4, 2020
  */
 
-#include <gtsam/basis/Chebyshev.h>
+#include "gtsam/basis/Chebyshev.h"
 
 namespace gtsam {
 

diff --git a/gtsam/basis/Chebyshev.h b/gtsam/basis/Chebyshev.h
index 1c16c47..36c131c 100644
--- a/gtsam/basis/Chebyshev.h
+++ b/gtsam/basis/Chebyshev.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/basis/Basis.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/basis/Basis.h"
 
 namespace gtsam {
 

diff --git a/gtsam/basis/Chebyshev2.cpp b/gtsam/basis/Chebyshev2.cpp
index 71c3db7..f8d9534 100644
--- a/gtsam/basis/Chebyshev2.cpp
+++ b/gtsam/basis/Chebyshev2.cpp
@@ -16,7 +16,7 @@
  * @date July 4, 2020
  */
 
-#include <gtsam/basis/Chebyshev2.h>
+#include "gtsam/basis/Chebyshev2.h"
 
 namespace gtsam {
 

diff --git a/gtsam/basis/Chebyshev2.h b/gtsam/basis/Chebyshev2.h
index 207f4b6..3705d1e 100644
--- a/gtsam/basis/Chebyshev2.h
+++ b/gtsam/basis/Chebyshev2.h
@@ -32,9 +32,9 @@
 
 #pragma once
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/OptionalJacobian.h>
-#include <gtsam/basis/Basis.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/OptionalJacobian.h"
+#include "gtsam/basis/Basis.h"
 
 namespace gtsam {
 

diff --git a/gtsam/basis/FitBasis.h b/gtsam/basis/FitBasis.h
index f5cb99b..5cea16b 100644
--- a/gtsam/basis/FitBasis.h
+++ b/gtsam/basis/FitBasis.h
@@ -24,11 +24,11 @@
 
 #pragma once
 
-#include <gtsam/basis/Basis.h>
-#include <gtsam/basis/BasisFactors.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/basis/Basis.h"
+#include "gtsam/basis/BasisFactors.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 namespace gtsam {
 

diff --git a/gtsam/basis/Fourier.h b/gtsam/basis/Fourier.h
index eb259bd..2bb6d3e 100644
--- a/gtsam/basis/Fourier.h
+++ b/gtsam/basis/Fourier.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/basis/Basis.h>
+#include "gtsam/basis/Basis.h"
 
 namespace gtsam {
 

diff --git a/gtsam/basis/tests/testBasisFactors.cpp b/gtsam/basis/tests/testBasisFactors.cpp
index d33e13d..3f70f98 100644
--- a/gtsam/basis/tests/testBasisFactors.cpp
+++ b/gtsam/basis/tests/testBasisFactors.cpp
@@ -17,18 +17,18 @@
  * @brief unit tests for factors in BasisFactors.h
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/basis/Basis.h>
-#include <gtsam/basis/BasisFactors.h>
-#include <gtsam/basis/Chebyshev2.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/FunctorizedFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/factorTesting.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/basis/Basis.h"
+#include "gtsam/basis/BasisFactors.h"
+#include "gtsam/basis/Chebyshev2.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/FunctorizedFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/factorTesting.h"
 
 using gtsam::Chebyshev2;
 using gtsam::LevenbergMarquardtOptimizer;

diff --git a/gtsam/basis/tests/testChebyshev.cpp b/gtsam/basis/tests/testChebyshev.cpp
index 7d7f932..f6087c9 100644
--- a/gtsam/basis/tests/testChebyshev.cpp
+++ b/gtsam/basis/tests/testChebyshev.cpp
@@ -16,11 +16,11 @@
  * @brief Unit tests for Chebyshev Basis Decompositions
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/basis/Chebyshev.h>
-#include <gtsam/basis/FitBasis.h>
-#include <gtsam/nonlinear/factorTesting.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/basis/Chebyshev.h"
+#include "gtsam/basis/FitBasis.h"
+#include "gtsam/nonlinear/factorTesting.h"
 
 using namespace std;
 using namespace gtsam;
@@ -67,8 +67,8 @@ TEST(Chebyshev, Evaluation) {
 }
 
 //******************************************************************************
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/Marginals.h"
 TEST(Chebyshev, Expression) {
   // Create linear factor graph
   NonlinearFactorGraph graph;

diff --git a/gtsam/basis/tests/testChebyshev2.cpp b/gtsam/basis/tests/testChebyshev2.cpp
index 7807149..dcd7abe 100644
--- a/gtsam/basis/tests/testChebyshev2.cpp
+++ b/gtsam/basis/tests/testChebyshev2.cpp
@@ -17,13 +17,13 @@
  *        methods
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/basis/Chebyshev2.h>
-#include <gtsam/basis/FitBasis.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/factorTesting.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/basis/Chebyshev2.h"
+#include "gtsam/basis/FitBasis.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/factorTesting.h"
 
 #include <cstddef>
 #include <functional>

diff --git a/gtsam/basis/tests/testFourier.cpp b/gtsam/basis/tests/testFourier.cpp
index 2995e8c..c83de2f 100644
--- a/gtsam/basis/tests/testFourier.cpp
+++ b/gtsam/basis/tests/testFourier.cpp
@@ -16,11 +16,11 @@
  * @brief Unit tests for Fourier Basis Decompositions with Expressions
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/basis/FitBasis.h>
-#include <gtsam/basis/Fourier.h>
-#include <gtsam/nonlinear/factorTesting.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/basis/FitBasis.h"
+#include "gtsam/basis/Fourier.h"
+#include "gtsam/nonlinear/factorTesting.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/config.h b/gtsam/config.h
new file mode 100644
index 0000000..42e784b
--- /dev/null
+++ b/gtsam/config.h
@@ -0,0 +1,91 @@
+/* ----------------------------------------------------------------------------
+
+ * GTSAM Copyright 2010, Georgia Tech Research Corporation,
+ * Atlanta, Georgia 30332-0415
+ * All Rights Reserved
+ * Authors: Frank Dellaert, et al. (see THANKS for the full author list)
+
+ * See LICENSE for the license information
+
+ * -------------------------------------------------------------------------- */
+
+/**
+ * @file    config.h
+ * @brief   Settings and paths configured with CMake
+ * @author  Richard Roberts
+ */
+
+#pragma once
+
+// Library version
+#define GTSAM_VERSION_MAJOR 4
+#define GTSAM_VERSION_MINOR 3
+#define GTSAM_VERSION_PATCH 0
+#define GTSAM_VERSION_NUMERIC 40300
+#define GTSAM_VERSION_STRING "4.3a0"
+
+// Paths to example datasets distributed with GTSAM
+#define GTSAM_SOURCE_TREE_DATASET_DIR "/mnt/data/bazelification/gtsam/Data"
+#define GTSAM_INSTALLED_DATASET_DIR "/gtsam_examples/Data"
+
+// Whether GTSAM is compiled to use quaternions for Rot3 (otherwise uses rotation matrices)
+/* #undef GTSAM_USE_QUATERNIONS */
+
+// Whether GTSAM is compiled to use Pose3::EXPMAP as the default coordinates mode for Pose3's retract and localCoordinates (otherwise, Pose3::FIRST_ORDER will be used)
+#define GTSAM_POSE3_EXPMAP
+
+// Whether GTSAM is compiled to use Rot3::EXPMAP as the default coordinates mode for Rot3's retract and localCoordinates (otherwise, Pose3::CAYLEY will be used)
+#ifndef GTSAM_USE_QUATERNIONS
+	#define GTSAM_ROT3_EXPMAP
+#endif
+
+// Whether to enable merging of equal leaf nodes in the Discrete Decision Tree.
+#define GTSAM_DT_MERGING
+
+// Whether we are using TBB (if TBB was found and GTSAM_WITH_TBB is enabled in CMake)
+#define GTSAM_USE_TBB
+
+// Whether we are using a TBB version higher than 2020
+#define TBB_GREATER_EQUAL_2020
+
+// Whether we are using system-Eigen or our own patched version
+/* #undef GTSAM_USE_SYSTEM_EIGEN */
+
+// Whether Eigen will use MKL (if MKL was found and GTSAM_WITH_EIGEN_MKL is enabled in CMake)
+/* #undef GTSAM_USE_EIGEN_MKL */
+/* #undef EIGEN_USE_MKL_ALL */
+
+// Whether Eigen with MKL will use OpenMP (if OpenMP was found, Eigen uses MKL, and GTSAM_WITH_EIGEN_MKL_OPENMP is enabled in CMake)
+/* #undef GTSAM_USE_EIGEN_MKL_OPENMP */
+
+// Eigen library version (needed to avoid mixing versions, which often leads
+// to segfaults)
+/*#define GTSAM_EIGEN_VERSION_WORLD 3*/
+/*#define GTSAM_EIGEN_VERSION_MAJOR 4*/
+/* #undef GTSAM_EIGEN_VERSION_MINOR */
+
+
+// The default allocator to use
+/* #undef GTSAM_ALLOCATOR_BOOSTPOOL */
+#define GTSAM_ALLOCATOR_TBB
+/* #undef GTSAM_ALLOCATOR_STL */
+
+// Option for not throwing the CheiralityException for points that are behind a camera
+#define GTSAM_THROW_CHEIRALITY_EXCEPTION
+
+// Make sure dependent projects that want it can see deprecated functions
+#define GTSAM_ALLOW_DEPRECATED_SINCE_V43
+
+// Support Metis-based nested dissection
+#define GTSAM_SUPPORT_NESTED_DISSECTION
+
+// Support Metis-based nested dissection
+#define GTSAM_TANGENT_PREINTEGRATION
+
+// Whether to use the system installed Metis instead of the provided one
+/* #undef GTSAM_USE_SYSTEM_METIS */
+
+// Toggle switch for BetweenFactor jacobian computation
+/* #undef GTSAM_SLOW_BUT_CORRECT_BETWEENFACTOR */
+
+/* #undef GTSAM_SLOW_BUT_CORRECT_EXPMAP */

diff --git a/gtsam/discrete/AlgebraicDecisionTree.cpp b/gtsam/discrete/AlgebraicDecisionTree.cpp
index 83ee405..4914c7c 100644
--- a/gtsam/discrete/AlgebraicDecisionTree.cpp
+++ b/gtsam/discrete/AlgebraicDecisionTree.cpp
@@ -19,7 +19,7 @@
 
 #include "AlgebraicDecisionTree.h"
 
-#include <gtsam/base/types.h>
+#include "gtsam/base/types.h"
 
 namespace gtsam {
 

diff --git a/gtsam/discrete/AlgebraicDecisionTree.h b/gtsam/discrete/AlgebraicDecisionTree.h
index 383346a..f3b5353 100644
--- a/gtsam/discrete/AlgebraicDecisionTree.h
+++ b/gtsam/discrete/AlgebraicDecisionTree.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/discrete/DecisionTree-inl.h>
-#include <gtsam/discrete/Ring.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/discrete/DecisionTree-inl.h"
+#include "gtsam/discrete/Ring.h"
 
 #include <iomanip>
 #include <limits>

diff --git a/gtsam/discrete/DecisionTree-inl.h b/gtsam/discrete/DecisionTree-inl.h
index bda44bb..c52ae66 100644
--- a/gtsam/discrete/DecisionTree-inl.h
+++ b/gtsam/discrete/DecisionTree-inl.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/discrete/DecisionTree.h>
+#include "gtsam/discrete/DecisionTree.h"
 
 #include <algorithm>
 #include <cassert>

diff --git a/gtsam/discrete/DecisionTree.h b/gtsam/discrete/DecisionTree.h
index 486f798..f8d2345 100644
--- a/gtsam/discrete/DecisionTree.h
+++ b/gtsam/discrete/DecisionTree.h
@@ -19,9 +19,9 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/types.h>
-#include <gtsam/discrete/Assignment.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/types.h"
+#include "gtsam/discrete/Assignment.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>

diff --git a/gtsam/discrete/DecisionTreeFactor.cpp b/gtsam/discrete/DecisionTreeFactor.cpp
index 1ac782b..3be6326 100644
--- a/gtsam/discrete/DecisionTreeFactor.cpp
+++ b/gtsam/discrete/DecisionTreeFactor.cpp
@@ -17,10 +17,10 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/base/FastSet.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteConditional.h>
+#include "gtsam/base/FastSet.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteConditional.h"
 
 #include <utility>
 

diff --git a/gtsam/discrete/DecisionTreeFactor.h b/gtsam/discrete/DecisionTreeFactor.h
index e1eb2a4..c9de0f2 100644
--- a/gtsam/discrete/DecisionTreeFactor.h
+++ b/gtsam/discrete/DecisionTreeFactor.h
@@ -18,11 +18,11 @@
 
 #pragma once
 
-#include <gtsam/discrete/AlgebraicDecisionTree.h>
-#include <gtsam/discrete/DiscreteFactor.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/discrete/Ring.h>
-#include <gtsam/inference/Ordering.h>
+#include "gtsam/discrete/AlgebraicDecisionTree.h"
+#include "gtsam/discrete/DiscreteFactor.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/discrete/Ring.h"
+#include "gtsam/inference/Ordering.h"
 
 #include <algorithm>
 #include <map>

diff --git a/gtsam/discrete/DiscreteBayesNet.cpp b/gtsam/discrete/DiscreteBayesNet.cpp
index 56265b0..33c9579 100644
--- a/gtsam/discrete/DiscreteBayesNet.cpp
+++ b/gtsam/discrete/DiscreteBayesNet.cpp
@@ -16,9 +16,9 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/inference/FactorGraph-inst.h>
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/inference/FactorGraph-inst.h"
 
 namespace gtsam {
 

diff --git a/gtsam/discrete/DiscreteBayesNet.h b/gtsam/discrete/DiscreteBayesNet.h
index a5a4621..5899b82 100644
--- a/gtsam/discrete/DiscreteBayesNet.h
+++ b/gtsam/discrete/DiscreteBayesNet.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/inference/BayesNet.h>
-#include <gtsam/inference/FactorGraph.h>
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/inference/BayesNet.h"
+#include "gtsam/inference/FactorGraph.h"
 
 #include <memory>
 #include <map>

diff --git a/gtsam/discrete/DiscreteBayesTree.cpp b/gtsam/discrete/DiscreteBayesTree.cpp
index 139292e..c953268 100644
--- a/gtsam/discrete/DiscreteBayesTree.cpp
+++ b/gtsam/discrete/DiscreteBayesTree.cpp
@@ -17,11 +17,11 @@
  * @author  Richard Roberts
  */
 
-#include <gtsam/base/treeTraversal-inst.h>
-#include <gtsam/inference/BayesTree-inst.h>
-#include <gtsam/inference/BayesTreeCliqueBase-inst.h>
-#include <gtsam/discrete/DiscreteBayesTree.h>
-#include <gtsam/discrete/DiscreteBayesNet.h>
+#include "gtsam/base/treeTraversal-inst.h"
+#include "gtsam/inference/BayesTree-inst.h"
+#include "gtsam/inference/BayesTreeCliqueBase-inst.h"
+#include "gtsam/discrete/DiscreteBayesTree.h"
+#include "gtsam/discrete/DiscreteBayesNet.h"
 
 namespace gtsam {
 

diff --git a/gtsam/discrete/DiscreteBayesTree.h b/gtsam/discrete/DiscreteBayesTree.h
index 89baf49..d1140c4 100644
--- a/gtsam/discrete/DiscreteBayesTree.h
+++ b/gtsam/discrete/DiscreteBayesTree.h
@@ -20,11 +20,11 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/inference/BayesTree.h>
-#include <gtsam/inference/Conditional.h>
-#include <gtsam/inference/BayesTreeCliqueBase.h>
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/inference/BayesTree.h"
+#include "gtsam/inference/Conditional.h"
+#include "gtsam/inference/BayesTreeCliqueBase.h"
 
 #include <string>
 

diff --git a/gtsam/discrete/DiscreteConditional.cpp b/gtsam/discrete/DiscreteConditional.cpp
index eeb5dca..feb2a4b 100644
--- a/gtsam/discrete/DiscreteConditional.cpp
+++ b/gtsam/discrete/DiscreteConditional.cpp
@@ -16,12 +16,12 @@
  *  @author Frank Dellaert
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/discrete/Ring.h>
-#include <gtsam/discrete/Signature.h>
-#include <gtsam/hybrid/HybridValues.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/discrete/Ring.h"
+#include "gtsam/discrete/Signature.h"
+#include "gtsam/hybrid/HybridValues.h"
 
 #include <algorithm>
 #include <random>

diff --git a/gtsam/discrete/DiscreteConditional.h b/gtsam/discrete/DiscreteConditional.h
index 8cba6db..89098b2 100644
--- a/gtsam/discrete/DiscreteConditional.h
+++ b/gtsam/discrete/DiscreteConditional.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/Signature.h>
-#include <gtsam/inference/Conditional-inst.h>
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/Signature.h"
+#include "gtsam/inference/Conditional-inst.h"
 
 #include <memory>
 #include <string>

diff --git a/gtsam/discrete/DiscreteDistribution.cpp b/gtsam/discrete/DiscreteDistribution.cpp
index 7397714..9ef017a 100644
--- a/gtsam/discrete/DiscreteDistribution.cpp
+++ b/gtsam/discrete/DiscreteDistribution.cpp
@@ -15,7 +15,7 @@
  *  @author Frank Dellaert
  */
 
-#include <gtsam/discrete/DiscreteDistribution.h>
+#include "gtsam/discrete/DiscreteDistribution.h"
 
 #include <vector>
 

diff --git a/gtsam/discrete/DiscreteDistribution.h b/gtsam/discrete/DiscreteDistribution.h
index 09ea503..93ad82a 100644
--- a/gtsam/discrete/DiscreteDistribution.h
+++ b/gtsam/discrete/DiscreteDistribution.h
@@ -17,7 +17,7 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteConditional.h>
+#include "gtsam/discrete/DiscreteConditional.h"
 
 #include <string>
 #include <vector>

diff --git a/gtsam/discrete/DiscreteEliminationTree.cpp b/gtsam/discrete/DiscreteEliminationTree.cpp
index a295364..54ffd7c 100644
--- a/gtsam/discrete/DiscreteEliminationTree.cpp
+++ b/gtsam/discrete/DiscreteEliminationTree.cpp
@@ -16,8 +16,8 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/inference/EliminationTree-inst.h>
-#include <gtsam/discrete/DiscreteEliminationTree.h>
+#include "gtsam/inference/EliminationTree-inst.h"
+#include "gtsam/discrete/DiscreteEliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/discrete/DiscreteEliminationTree.h b/gtsam/discrete/DiscreteEliminationTree.h
index 54e4fca..4d76313 100644
--- a/gtsam/discrete/DiscreteEliminationTree.h
+++ b/gtsam/discrete/DiscreteEliminationTree.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/inference/EliminationTree.h>
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/inference/EliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/discrete/DiscreteFactor.cpp b/gtsam/discrete/DiscreteFactor.cpp
index 68cc1df..18cabbe 100644
--- a/gtsam/discrete/DiscreteFactor.cpp
+++ b/gtsam/discrete/DiscreteFactor.cpp
@@ -17,9 +17,9 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/base/Vector.h>
-#include <gtsam/discrete/DiscreteFactor.h>
-#include <gtsam/hybrid/HybridValues.h>
+#include "gtsam/base/Vector.h"
+#include "gtsam/discrete/DiscreteFactor.h"
+#include "gtsam/hybrid/HybridValues.h"
 
 #include <cmath>
 #include <sstream>

diff --git a/gtsam/discrete/DiscreteFactor.h b/gtsam/discrete/DiscreteFactor.h
index 29981e9..4e55eb9 100644
--- a/gtsam/discrete/DiscreteFactor.h
+++ b/gtsam/discrete/DiscreteFactor.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/discrete/AlgebraicDecisionTree.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/inference/Factor.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/discrete/AlgebraicDecisionTree.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/inference/Factor.h"
 
 #include <string>
 namespace gtsam {

diff --git a/gtsam/discrete/DiscreteFactorGraph.cpp b/gtsam/discrete/DiscreteFactorGraph.cpp
index d0bf210..a4ef627 100644
--- a/gtsam/discrete/DiscreteFactorGraph.cpp
+++ b/gtsam/discrete/DiscreteFactorGraph.cpp
@@ -17,14 +17,14 @@
  *  @author Varun Agrawal
  */
 
-#include <gtsam/discrete/DiscreteBayesTree.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/discrete/DiscreteEliminationTree.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteJunctionTree.h>
-#include <gtsam/discrete/DiscreteLookupDAG.h>
-#include <gtsam/inference/EliminateableFactorGraph-inst.h>
-#include <gtsam/inference/FactorGraph-inst.h>
+#include "gtsam/discrete/DiscreteBayesTree.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/discrete/DiscreteEliminationTree.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteJunctionTree.h"
+#include "gtsam/discrete/DiscreteLookupDAG.h"
+#include "gtsam/inference/EliminateableFactorGraph-inst.h"
+#include "gtsam/inference/FactorGraph-inst.h"
 
 using std::vector;
 using std::string;

diff --git a/gtsam/discrete/DiscreteFactorGraph.h b/gtsam/discrete/DiscreteFactorGraph.h
index c57d225..06bd941 100644
--- a/gtsam/discrete/DiscreteFactorGraph.h
+++ b/gtsam/discrete/DiscreteFactorGraph.h
@@ -19,12 +19,12 @@
 
 #pragma once
 
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteLookupDAG.h>
-#include <gtsam/inference/EliminateableFactorGraph.h>
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/FastSet.h>
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteLookupDAG.h"
+#include "gtsam/inference/EliminateableFactorGraph.h"
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/FastSet.h"
 
 #include <string>
 #include <utility>

diff --git a/gtsam/discrete/DiscreteJunctionTree.cpp b/gtsam/discrete/DiscreteJunctionTree.cpp
index dc24860..c6d6529 100644
--- a/gtsam/discrete/DiscreteJunctionTree.cpp
+++ b/gtsam/discrete/DiscreteJunctionTree.cpp
@@ -16,9 +16,9 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/inference/JunctionTree-inst.h>
-#include <gtsam/discrete/DiscreteJunctionTree.h>
-#include <gtsam/discrete/DiscreteEliminationTree.h>
+#include "gtsam/inference/JunctionTree-inst.h"
+#include "gtsam/discrete/DiscreteJunctionTree.h"
+#include "gtsam/discrete/DiscreteEliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/discrete/DiscreteJunctionTree.h b/gtsam/discrete/DiscreteJunctionTree.h
index f6171c6..7e3390e 100644
--- a/gtsam/discrete/DiscreteJunctionTree.h
+++ b/gtsam/discrete/DiscreteJunctionTree.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteBayesTree.h>
-#include <gtsam/inference/JunctionTree.h>
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteBayesTree.h"
+#include "gtsam/inference/JunctionTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/discrete/DiscreteKey.h b/gtsam/discrete/DiscreteKey.h
index 44cc192..0f94eff 100644
--- a/gtsam/discrete/DiscreteKey.h
+++ b/gtsam/discrete/DiscreteKey.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/global_includes.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/global_includes.h"
+#include "gtsam/inference/Key.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/vector.hpp>

diff --git a/gtsam/discrete/DiscreteLookupDAG.cpp b/gtsam/discrete/DiscreteLookupDAG.cpp
index d1108e7..5db5414 100644
--- a/gtsam/discrete/DiscreteLookupDAG.cpp
+++ b/gtsam/discrete/DiscreteLookupDAG.cpp
@@ -16,9 +16,9 @@
  *  @author Frank Dellaert
  */
 
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteLookupDAG.h>
-#include <gtsam/discrete/DiscreteValues.h>
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteLookupDAG.h"
+#include "gtsam/discrete/DiscreteValues.h"
 
 #include <iterator>
 #include <string>

diff --git a/gtsam/discrete/DiscreteLookupDAG.h b/gtsam/discrete/DiscreteLookupDAG.h
index f077a13..00aa15a 100644
--- a/gtsam/discrete/DiscreteLookupDAG.h
+++ b/gtsam/discrete/DiscreteLookupDAG.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/inference/BayesNet.h>
-#include <gtsam/inference/FactorGraph.h>
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/inference/BayesNet.h"
+#include "gtsam/inference/FactorGraph.h"
 
 #include <memory>
 #include <string>

diff --git a/gtsam/discrete/DiscreteMarginals.h b/gtsam/discrete/DiscreteMarginals.h
index b97e608..80d8ddb 100644
--- a/gtsam/discrete/DiscreteMarginals.h
+++ b/gtsam/discrete/DiscreteMarginals.h
@@ -20,9 +20,9 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteBayesTree.h>
-#include <gtsam/base/Vector.h>
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteBayesTree.h"
+#include "gtsam/base/Vector.h"
 
 namespace gtsam {
 

diff --git a/gtsam/discrete/DiscreteValues.cpp b/gtsam/discrete/DiscreteValues.cpp
index e21fb71..5c3f661 100644
--- a/gtsam/discrete/DiscreteValues.cpp
+++ b/gtsam/discrete/DiscreteValues.cpp
@@ -15,7 +15,7 @@
  *  @author Frank Dellaert
  */
 
-#include <gtsam/discrete/DiscreteValues.h>
+#include "gtsam/discrete/DiscreteValues.h"
 
 #include <sstream>
 

diff --git a/gtsam/discrete/DiscreteValues.h b/gtsam/discrete/DiscreteValues.h
index 9fdff01..7835c70 100644
--- a/gtsam/discrete/DiscreteValues.h
+++ b/gtsam/discrete/DiscreteValues.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/discrete/Assignment.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/discrete/Assignment.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/inference/Key.h"
 
 #include <map>
 #include <string>

diff --git a/gtsam/discrete/Signature.h b/gtsam/discrete/Signature.h
index df175bc..46a2c6a 100644
--- a/gtsam/discrete/Signature.h
+++ b/gtsam/discrete/Signature.h
@@ -20,7 +20,7 @@
 #include <string>
 #include <vector>
 #include <optional>
-#include <gtsam/discrete/DiscreteKey.h>
+#include "gtsam/discrete/DiscreteKey.h"
 
 namespace gtsam {
 

diff --git a/gtsam/discrete/SignatureParser.cpp b/gtsam/discrete/SignatureParser.cpp
index 31e4253..015d911 100644
--- a/gtsam/discrete/SignatureParser.cpp
+++ b/gtsam/discrete/SignatureParser.cpp
@@ -1,4 +1,4 @@
-#include <gtsam/discrete/SignatureParser.h>
+#include "gtsam/discrete/SignatureParser.h"
 
 #include <algorithm>
 #include <iterator>

diff --git a/gtsam/discrete/SignatureParser.h b/gtsam/discrete/SignatureParser.h
index ddc548f..529805a 100644
--- a/gtsam/discrete/SignatureParser.h
+++ b/gtsam/discrete/SignatureParser.h
@@ -22,7 +22,7 @@
 #include <string>
 #include <vector>
 
-#include <gtsam/dllexport.h>
+#include "gtsam/dllexport.h"
 
 namespace gtsam {
 /**

diff --git a/gtsam/discrete/TableFactor.cpp b/gtsam/discrete/TableFactor.cpp
index de1e1f8..68aabc6 100644
--- a/gtsam/discrete/TableFactor.cpp
+++ b/gtsam/discrete/TableFactor.cpp
@@ -16,11 +16,11 @@
  * @author Yoonwoo Kim, Varun Agrawal
  */
 
-#include <gtsam/base/FastSet.h>
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/discrete/TableFactor.h>
-#include <gtsam/hybrid/HybridValues.h>
+#include "gtsam/base/FastSet.h"
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/discrete/TableFactor.h"
+#include "gtsam/hybrid/HybridValues.h"
 
 #include <utility>
 

diff --git a/gtsam/discrete/TableFactor.h b/gtsam/discrete/TableFactor.h
index d27c474..94bc697 100644
--- a/gtsam/discrete/TableFactor.h
+++ b/gtsam/discrete/TableFactor.h
@@ -17,10 +17,10 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteFactor.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/discrete/Ring.h>
-#include <gtsam/inference/Ordering.h>
+#include "gtsam/discrete/DiscreteFactor.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/discrete/Ring.h"
+#include "gtsam/inference/Ordering.h"
 
 #include <Eigen/Sparse>
 #include <algorithm>

diff --git a/gtsam/discrete/tests/testAlgebraicDecisionTree.cpp b/gtsam/discrete/tests/testAlgebraicDecisionTree.cpp
index a5e46d5..57491b4 100644
--- a/gtsam/discrete/tests/testAlgebraicDecisionTree.cpp
+++ b/gtsam/discrete/tests/testAlgebraicDecisionTree.cpp
@@ -16,14 +16,14 @@
  * @date   Mar 6, 2011
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/discrete/DiscreteKey.h>  // make sure we have traits
-#include <gtsam/discrete/DiscreteValues.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/discrete/DiscreteKey.h"  // make sure we have traits
+#include "gtsam/discrete/DiscreteValues.h"
 // headers first to make sure no missing headers
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/discrete/AlgebraicDecisionTree.h>
-#include <gtsam/discrete/DecisionTree-inl.h>  // for convert only
-#include <gtsam/discrete/Signature.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/discrete/AlgebraicDecisionTree.h"
+#include "gtsam/discrete/DecisionTree-inl.h"  // for convert only
+#include "gtsam/discrete/Signature.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/discrete/tests/testDecisionTree.cpp b/gtsam/discrete/tests/testDecisionTree.cpp
index c664fe6..dd1203d 100644
--- a/gtsam/discrete/tests/testDecisionTree.cpp
+++ b/gtsam/discrete/tests/testDecisionTree.cpp
@@ -19,13 +19,13 @@
 
 // #define DT_DEBUG_MEMORY
 #define DISABLE_DOT
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/discrete/DecisionTree-inl.h>
-#include <gtsam/discrete/Ring.h>
-#include <gtsam/discrete/Signature.h>
-#include <gtsam/inference/Symbol.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/discrete/DecisionTree-inl.h"
+#include "gtsam/discrete/Ring.h"
+#include "gtsam/discrete/Signature.h"
+#include "gtsam/inference/Symbol.h"
 
 #include <iomanip>
 

diff --git a/gtsam/discrete/tests/testDecisionTreeFactor.cpp b/gtsam/discrete/tests/testDecisionTreeFactor.cpp
index 756a0ce..0cc7586 100644
--- a/gtsam/discrete/tests/testDecisionTreeFactor.cpp
+++ b/gtsam/discrete/tests/testDecisionTreeFactor.cpp
@@ -17,15 +17,15 @@
  *  @author Duy-Nguyen Ta
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/discrete/DiscreteFactor.h>
-#include <gtsam/discrete/Signature.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/Ordering.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/discrete/DiscreteFactor.h"
+#include "gtsam/discrete/Signature.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/Ordering.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/discrete/tests/testDiscreteBayesNet.cpp b/gtsam/discrete/tests/testDiscreteBayesNet.cpp
index 49a360c..1c4ac67 100644
--- a/gtsam/discrete/tests/testDiscreteBayesNet.cpp
+++ b/gtsam/discrete/tests/testDiscreteBayesNet.cpp
@@ -16,13 +16,13 @@
  *  @author Frank Dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteMarginals.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteMarginals.h"
 
 #include <iostream>
 #include <string>

diff --git a/gtsam/discrete/tests/testDiscreteBayesTree.cpp b/gtsam/discrete/tests/testDiscreteBayesTree.cpp
index 617eb7c..027b707 100644
--- a/gtsam/discrete/tests/testDiscreteBayesTree.cpp
+++ b/gtsam/discrete/tests/testDiscreteBayesTree.cpp
@@ -15,14 +15,14 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/base/Vector.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/inference/BayesNet.h>
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteBayesTree.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/Vector.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/inference/BayesNet.h"
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteBayesTree.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 #include <vector>

diff --git a/gtsam/discrete/tests/testDiscreteConditional.cpp b/gtsam/discrete/tests/testDiscreteConditional.cpp
index 2482a86..c50e8f8 100644
--- a/gtsam/discrete/tests/testDiscreteConditional.cpp
+++ b/gtsam/discrete/tests/testDiscreteConditional.cpp
@@ -17,13 +17,13 @@
  * @date    Feb 14, 2011
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteBayesNet.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteBayesNet.h"
 
 
 using namespace std;

diff --git a/gtsam/discrete/tests/testDiscreteDistribution.cpp b/gtsam/discrete/tests/testDiscreteDistribution.cpp
index d88b510..27a11ec 100644
--- a/gtsam/discrete/tests/testDiscreteDistribution.cpp
+++ b/gtsam/discrete/tests/testDiscreteDistribution.cpp
@@ -16,9 +16,9 @@
  * @date    December 2021
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/discrete/Signature.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/discrete/Signature.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/discrete/tests/testDiscreteFactor.cpp b/gtsam/discrete/tests/testDiscreteFactor.cpp
index 7fc5ee2..bcc0964 100644
--- a/gtsam/discrete/tests/testDiscreteFactor.cpp
+++ b/gtsam/discrete/tests/testDiscreteFactor.cpp
@@ -16,10 +16,10 @@
  *  @author Duy-Nguyen Ta
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/discrete/DiscreteFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/discrete/DiscreteFactor.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/discrete/tests/testDiscreteFactorGraph.cpp b/gtsam/discrete/tests/testDiscreteFactorGraph.cpp
index 0d71c12..35865e5 100644
--- a/gtsam/discrete/tests/testDiscreteFactorGraph.cpp
+++ b/gtsam/discrete/tests/testDiscreteFactorGraph.cpp
@@ -15,14 +15,14 @@
  *  @author Duy-Nguyen Ta
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/discrete/DiscreteBayesTree.h>
-#include <gtsam/discrete/DiscreteEliminationTree.h>
-#include <gtsam/discrete/DiscreteFactor.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/inference/BayesNet.h>
-#include <gtsam/inference/Symbol.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/discrete/DiscreteBayesTree.h"
+#include "gtsam/discrete/DiscreteEliminationTree.h"
+#include "gtsam/discrete/DiscreteFactor.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/inference/BayesNet.h"
+#include "gtsam/inference/Symbol.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/discrete/tests/testDiscreteLookupDAG.cpp b/gtsam/discrete/tests/testDiscreteLookupDAG.cpp
index 8c3ff5a..ac8dbb7 100644
--- a/gtsam/discrete/tests/testDiscreteLookupDAG.cpp
+++ b/gtsam/discrete/tests/testDiscreteLookupDAG.cpp
@@ -16,9 +16,9 @@
  *  @author Frank Dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/discrete/DiscreteLookupDAG.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/discrete/DiscreteLookupDAG.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/discrete/tests/testDiscreteMarginals.cpp b/gtsam/discrete/tests/testDiscreteMarginals.cpp
index 76bed2f..8f19869 100644
--- a/gtsam/discrete/tests/testDiscreteMarginals.cpp
+++ b/gtsam/discrete/tests/testDiscreteMarginals.cpp
@@ -17,9 +17,9 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/discrete/DiscreteMarginals.h>
+#include "gtsam/discrete/DiscreteMarginals.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/discrete/tests/testDiscreteValues.cpp b/gtsam/discrete/tests/testDiscreteValues.cpp
index 4798948..bf94094 100644
--- a/gtsam/discrete/tests/testDiscreteValues.cpp
+++ b/gtsam/discrete/tests/testDiscreteValues.cpp
@@ -16,10 +16,10 @@
  *  @author Frank Dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/discrete/Signature.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/discrete/Signature.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/discrete/tests/testSerializationDiscrete.cpp b/gtsam/discrete/tests/testSerializationDiscrete.cpp
index df7df0b..b0f550e 100644
--- a/gtsam/discrete/tests/testSerializationDiscrete.cpp
+++ b/gtsam/discrete/tests/testSerializationDiscrete.cpp
@@ -16,11 +16,11 @@
  *  @author Varun Agrawal
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/inference/Symbol.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/inference/Symbol.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/discrete/tests/testSignature.cpp b/gtsam/discrete/tests/testSignature.cpp
index bf39e84..dd50e63 100644
--- a/gtsam/discrete/tests/testSignature.cpp
+++ b/gtsam/discrete/tests/testSignature.cpp
@@ -17,9 +17,9 @@
  * @date Sept 19th 2011
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/discrete/Signature.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/discrete/Signature.h"
 
 #include <vector>
 

diff --git a/gtsam/discrete/tests/testSignatureParser.cpp b/gtsam/discrete/tests/testSignatureParser.cpp
index e0db846..ef3b4b6 100644
--- a/gtsam/discrete/tests/testSignatureParser.cpp
+++ b/gtsam/discrete/tests/testSignatureParser.cpp
@@ -3,9 +3,9 @@
  * @file testSimpleParser.cpp
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/discrete/SignatureParser.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/discrete/SignatureParser.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/discrete/tests/testTableFactor.cpp b/gtsam/discrete/tests/testTableFactor.cpp
index a455faa..48619ad 100644
--- a/gtsam/discrete/tests/testTableFactor.cpp
+++ b/gtsam/discrete/tests/testTableFactor.cpp
@@ -16,13 +16,13 @@
  *  @author Yoonwoo Kim
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/discrete/Signature.h>
-#include <gtsam/discrete/TableFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/discrete/Signature.h"
+#include "gtsam/discrete/TableFactor.h"
 
 #include <chrono>
 #include <random>

diff --git a/gtsam/dllexport.h b/gtsam/dllexport.h
new file mode 100644
index 0000000..61d3273
--- /dev/null
+++ b/gtsam/dllexport.h
@@ -0,0 +1,60 @@
+/* ----------------------------------------------------------------------------
+
+ * GTSAM Copyright 2010, Georgia Tech Research Corporation, 
+ * Atlanta, Georgia 30332-0415
+ * All Rights Reserved
+ * Authors: Frank Dellaert, et al. (see THANKS for the full author list)
+
+ * See LICENSE for the license information
+
+ * -------------------------------------------------------------------------- */
+
+/**
+ * @file     dllexport.h
+ * @brief    Symbols for exporting classes and methods from DLLs
+ * @author   Richard Roberts
+ * @date     Mar 9, 2013
+ */
+
+// Macros for exporting DLL symbols on Windows
+// Usage example:
+// In header file:
+//   class GTSAM_EXPORT MyClass { ... };
+//   
+// Results in the following declarations:
+// When included while compiling the GTSAM library itself:
+//   class __declspec(dllexport) MyClass { ... };
+// When included while compiling other code against GTSAM:
+//   class __declspec(dllimport) MyClass { ... };
+
+#pragma once
+
+// Whether GTSAM is compiled as static or DLL in windows. 
+// This will be used to decide whether include __declspec(dllimport) or not in headers
+#define GTSAM_SHARED_LIB
+
+#ifdef _WIN32
+#  ifndef GTSAM_SHARED_LIB
+#    define GTSAM_EXPORT
+#    define GTSAM_EXTERN_EXPORT extern
+#  else
+#    ifdef GTSAM_EXPORTS
+#      define GTSAM_EXPORT __declspec(dllexport)
+#      define GTSAM_EXTERN_EXPORT __declspec(dllexport) extern
+#    else
+#      define GTSAM_EXPORT __declspec(dllimport)
+#      define GTSAM_EXTERN_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+#else
+#ifdef __APPLE__
+#  define GTSAM_EXPORT __attribute__((visibility("default")))
+#  define GTSAM_EXTERN_EXPORT extern
+#else
+#  define GTSAM_EXPORT
+#  define GTSAM_EXTERN_EXPORT extern
+#endif
+#endif
+
+#undef GTSAM_SHARED_LIB
+

diff --git a/gtsam/geometry/BearingRange.h b/gtsam/geometry/BearingRange.h
index 07229df..36dc071 100644
--- a/gtsam/geometry/BearingRange.h
+++ b/gtsam/geometry/BearingRange.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/OptionalJacobian.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/OptionalJacobian.h"
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>
 #endif

diff --git a/gtsam/geometry/Cal3.cpp b/gtsam/geometry/Cal3.cpp
index 41de47f..86dfcac 100644
--- a/gtsam/geometry/Cal3.cpp
+++ b/gtsam/geometry/Cal3.cpp
@@ -15,7 +15,7 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/geometry/Cal3.h>
+#include "gtsam/geometry/Cal3.h"
 
 #include <cmath>
 #include <fstream>

diff --git a/gtsam/geometry/Cal3.h b/gtsam/geometry/Cal3.h
index 5eecee8..98f2608 100644
--- a/gtsam/geometry/Cal3.h
+++ b/gtsam/geometry/Cal3.h
@@ -21,7 +21,7 @@
 
 #pragma once
 
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Point2.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Cal3Bundler.cpp b/gtsam/geometry/Cal3Bundler.cpp
index 1520e59..92bdf06 100644
--- a/gtsam/geometry/Cal3Bundler.cpp
+++ b/gtsam/geometry/Cal3Bundler.cpp
@@ -15,11 +15,11 @@
  * @author ydjian
  */
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Cal3Bundler.h b/gtsam/geometry/Cal3Bundler.h
index 01eb943..2edb599 100644
--- a/gtsam/geometry/Cal3Bundler.h
+++ b/gtsam/geometry/Cal3Bundler.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3f.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Cal3f.h"
+#include "gtsam/geometry/Point2.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Cal3DS2.cpp b/gtsam/geometry/Cal3DS2.cpp
index 0295e22..0f2a923 100644
--- a/gtsam/geometry/Cal3DS2.cpp
+++ b/gtsam/geometry/Cal3DS2.cpp
@@ -16,11 +16,11 @@
  * @author Varun Agrawal
  */
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/geometry/Cal3DS2.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/geometry/Cal3DS2.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Cal3DS2.h b/gtsam/geometry/Cal3DS2.h
index 0ecfc24..bf7016a 100644
--- a/gtsam/geometry/Cal3DS2.h
+++ b/gtsam/geometry/Cal3DS2.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3DS2_Base.h>
+#include "gtsam/geometry/Cal3DS2_Base.h"
 #include <memory>
 
 namespace gtsam {

diff --git a/gtsam/geometry/Cal3DS2_Base.cpp b/gtsam/geometry/Cal3DS2_Base.cpp
index b05728f..76a00fc 100644
--- a/gtsam/geometry/Cal3DS2_Base.cpp
+++ b/gtsam/geometry/Cal3DS2_Base.cpp
@@ -16,11 +16,11 @@
  * @author Varun Agrawal
  */
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/geometry/Cal3DS2_Base.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/geometry/Cal3DS2_Base.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Cal3DS2_Base.h b/gtsam/geometry/Cal3DS2_Base.h
index 6eff04c..96410a7 100644
--- a/gtsam/geometry/Cal3DS2_Base.h
+++ b/gtsam/geometry/Cal3DS2_Base.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Cal3.h"
+#include "gtsam/geometry/Point2.h"
 #include <memory>
 
 namespace gtsam {

diff --git a/gtsam/geometry/Cal3Fisheye.cpp b/gtsam/geometry/Cal3Fisheye.cpp
index 357183b..de3aa26 100644
--- a/gtsam/geometry/Cal3Fisheye.cpp
+++ b/gtsam/geometry/Cal3Fisheye.cpp
@@ -16,11 +16,11 @@
  * @author Varun Agrawal
  */
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/geometry/Cal3Fisheye.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/geometry/Cal3Fisheye.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Cal3Fisheye.h b/gtsam/geometry/Cal3Fisheye.h
index 4c542c5..9a5c2eb 100644
--- a/gtsam/geometry/Cal3Fisheye.h
+++ b/gtsam/geometry/Cal3Fisheye.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Cal3.h"
+#include "gtsam/geometry/Point2.h"
 
 #include <memory>
 

diff --git a/gtsam/geometry/Cal3Unified.cpp b/gtsam/geometry/Cal3Unified.cpp
index 11aabca..14e9540 100644
--- a/gtsam/geometry/Cal3Unified.cpp
+++ b/gtsam/geometry/Cal3Unified.cpp
@@ -16,10 +16,10 @@
  * @author Varun Agrawal
  */
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/geometry/Cal3Unified.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/geometry/Cal3Unified.h"
+#include "gtsam/geometry/Point2.h"
 
 #include <cmath>
 

diff --git a/gtsam/geometry/Cal3Unified.h b/gtsam/geometry/Cal3Unified.h
index 7eb4d2e..8ff6f8a 100644
--- a/gtsam/geometry/Cal3Unified.h
+++ b/gtsam/geometry/Cal3Unified.h
@@ -23,7 +23,7 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3DS2_Base.h>
+#include "gtsam/geometry/Cal3DS2_Base.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Cal3_S2.cpp b/gtsam/geometry/Cal3_S2.cpp
index 1a76c3f..d6f464d 100644
--- a/gtsam/geometry/Cal3_S2.cpp
+++ b/gtsam/geometry/Cal3_S2.cpp
@@ -15,7 +15,7 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/geometry/Cal3_S2.h>
+#include "gtsam/geometry/Cal3_S2.h"
 
 #include <cmath>
 #include <fstream>

diff --git a/gtsam/geometry/Cal3_S2.h b/gtsam/geometry/Cal3_S2.h
index 568cde4..ce008d5 100644
--- a/gtsam/geometry/Cal3_S2.h
+++ b/gtsam/geometry/Cal3_S2.h
@@ -21,8 +21,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Cal3.h"
+#include "gtsam/geometry/Point2.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Cal3_S2Stereo.cpp b/gtsam/geometry/Cal3_S2Stereo.cpp
index 9ef8c83..88d7d1d 100644
--- a/gtsam/geometry/Cal3_S2Stereo.cpp
+++ b/gtsam/geometry/Cal3_S2Stereo.cpp
@@ -15,7 +15,7 @@
  * @author Chris Beall
  */
 
-#include <gtsam/geometry/Cal3_S2Stereo.h>
+#include "gtsam/geometry/Cal3_S2Stereo.h"
 
 #include <iostream>
 

diff --git a/gtsam/geometry/Cal3_S2Stereo.h b/gtsam/geometry/Cal3_S2Stereo.h
index 292519c..b80f7b3 100644
--- a/gtsam/geometry/Cal3_S2Stereo.h
+++ b/gtsam/geometry/Cal3_S2Stereo.h
@@ -17,7 +17,7 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3_S2.h>
+#include "gtsam/geometry/Cal3_S2.h"
 #include <iosfwd>
 
 namespace gtsam {

diff --git a/gtsam/geometry/Cal3f.cpp b/gtsam/geometry/Cal3f.cpp
index b8e365e..af89495 100644
--- a/gtsam/geometry/Cal3f.cpp
+++ b/gtsam/geometry/Cal3f.cpp
@@ -23,9 +23,9 @@
  * @date   October 2024
  */
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/geometry/Cal3f.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/geometry/Cal3f.h"
 
 #include <iostream>
 #include <cassert>

diff --git a/gtsam/geometry/Cal3f.h b/gtsam/geometry/Cal3f.h
index 6c3c214..2755aa1 100644
--- a/gtsam/geometry/Cal3f.h
+++ b/gtsam/geometry/Cal3f.h
@@ -23,7 +23,7 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3.h>
+#include "gtsam/geometry/Cal3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/CalibratedCamera.cpp b/gtsam/geometry/CalibratedCamera.cpp
index 34deb5c..63f29f4 100644
--- a/gtsam/geometry/CalibratedCamera.cpp
+++ b/gtsam/geometry/CalibratedCamera.cpp
@@ -16,8 +16,8 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/CalibratedCamera.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/CalibratedCamera.h"
 
 using namespace std;
 

diff --git a/gtsam/geometry/CalibratedCamera.h b/gtsam/geometry/CalibratedCamera.h
index d3d1e1b..0c5e644 100644
--- a/gtsam/geometry/CalibratedCamera.h
+++ b/gtsam/geometry/CalibratedCamera.h
@@ -18,13 +18,13 @@
 
 #pragma once
 
-#include <gtsam/geometry/BearingRange.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/concepts.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/ThreadsafeException.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/geometry/BearingRange.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/concepts.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/ThreadsafeException.h"
+#include "gtsam/dllexport.h"
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>
 #endif

diff --git a/gtsam/geometry/CameraSet.h b/gtsam/geometry/CameraSet.h
index e3c16f0..21711e8 100644
--- a/gtsam/geometry/CameraSet.h
+++ b/gtsam/geometry/CameraSet.h
@@ -18,12 +18,12 @@
 
 #pragma once
 
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/SymmetricBlockMatrix.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/geometry/CalibratedCamera.h>  // for Cheirality exception
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/SymmetricBlockMatrix.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/geometry/CalibratedCamera.h"  // for Cheirality exception
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/inference/Key.h"
 
 #include <vector>
 #include <cassert>

diff --git a/gtsam/geometry/Cyclic.cpp b/gtsam/geometry/Cyclic.cpp
index 70580c3..d5c5465 100644
--- a/gtsam/geometry/Cyclic.cpp
+++ b/gtsam/geometry/Cyclic.cpp
@@ -15,7 +15,7 @@
  * @author Frank Dellaert
  **/
 
-#include <gtsam/geometry/Cyclic.h>
+#include "gtsam/geometry/Cyclic.h"
 
 namespace gtsam {
 } // \namespace gtsam

diff --git a/gtsam/geometry/Cyclic.h b/gtsam/geometry/Cyclic.h
index a503a60..e17dc22 100644
--- a/gtsam/geometry/Cyclic.h
+++ b/gtsam/geometry/Cyclic.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/base/Group.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/base/Group.h"
+#include "gtsam/base/Testable.h"
 
 #include <cassert>
 #include <iostream>  // for cout :-(

diff --git a/gtsam/geometry/EssentialMatrix.cpp b/gtsam/geometry/EssentialMatrix.cpp
index 020c94f..4953569 100644
--- a/gtsam/geometry/EssentialMatrix.cpp
+++ b/gtsam/geometry/EssentialMatrix.cpp
@@ -5,7 +5,7 @@
  * @date December 5, 2014
  */
 
-#include <gtsam/geometry/EssentialMatrix.h>
+#include "gtsam/geometry/EssentialMatrix.h"
 #include <iostream>
 
 using namespace std;

diff --git a/gtsam/geometry/EssentialMatrix.h b/gtsam/geometry/EssentialMatrix.h
index 3986f30..0f89bdf 100644
--- a/gtsam/geometry/EssentialMatrix.h
+++ b/gtsam/geometry/EssentialMatrix.h
@@ -7,10 +7,10 @@
 
 #pragma once
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/base/Manifold.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/base/Manifold.h"
 
 #include <iosfwd>
 #include <string>

diff --git a/gtsam/geometry/FundamentalMatrix.cpp b/gtsam/geometry/FundamentalMatrix.cpp
index 837ba72..43465b3 100644
--- a/gtsam/geometry/FundamentalMatrix.cpp
+++ b/gtsam/geometry/FundamentalMatrix.cpp
@@ -5,9 +5,9 @@
  * @date October 2024
  */
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/geometry/FundamentalMatrix.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/geometry/FundamentalMatrix.h"
+#include "gtsam/geometry/Point2.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/FundamentalMatrix.h b/gtsam/geometry/FundamentalMatrix.h
index 0752ced..485d37e 100644
--- a/gtsam/geometry/FundamentalMatrix.h
+++ b/gtsam/geometry/FundamentalMatrix.h
@@ -7,10 +7,10 @@
 
 #pragma once
 
-#include <gtsam/base/OptionalJacobian.h>
-#include <gtsam/geometry/EssentialMatrix.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/Unit3.h>
+#include "gtsam/base/OptionalJacobian.h"
+#include "gtsam/geometry/EssentialMatrix.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/Unit3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Line3.cpp b/gtsam/geometry/Line3.cpp
index f5cf344..271309a 100644
--- a/gtsam/geometry/Line3.cpp
+++ b/gtsam/geometry/Line3.cpp
@@ -1,4 +1,4 @@
-#include <gtsam/geometry/Line3.h>
+#include "gtsam/geometry/Line3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Line3.h b/gtsam/geometry/Line3.h
index 5ae50e1..a2cb7d0 100644
--- a/gtsam/geometry/Line3.h
+++ b/gtsam/geometry/Line3.h
@@ -16,8 +16,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/Pose3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/OrientedPlane3.cpp b/gtsam/geometry/OrientedPlane3.cpp
index c2da4bd..688009f 100644
--- a/gtsam/geometry/OrientedPlane3.cpp
+++ b/gtsam/geometry/OrientedPlane3.cpp
@@ -17,7 +17,7 @@
  * @brief  A plane, represented by a normal direction and perpendicular distance
  */
 
-#include <gtsam/geometry/OrientedPlane3.h>
+#include "gtsam/geometry/OrientedPlane3.h"
 
 #include <iostream>
 

diff --git a/gtsam/geometry/OrientedPlane3.h b/gtsam/geometry/OrientedPlane3.h
index 3d84086..da6f98b 100644
--- a/gtsam/geometry/OrientedPlane3.h
+++ b/gtsam/geometry/OrientedPlane3.h
@@ -20,8 +20,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/geometry/Pose3.h"
 #include <string>
 
 namespace gtsam {

diff --git a/gtsam/geometry/PinholeCamera.h b/gtsam/geometry/PinholeCamera.h
index 0439b2f..5f47417 100644
--- a/gtsam/geometry/PinholeCamera.h
+++ b/gtsam/geometry/PinholeCamera.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/PinholePose.h>
-#include <gtsam/geometry/BearingRange.h>
+#include "gtsam/geometry/PinholePose.h"
+#include "gtsam/geometry/BearingRange.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/PinholePose.h b/gtsam/geometry/PinholePose.h
index f1191db..fdea33d 100644
--- a/gtsam/geometry/PinholePose.h
+++ b/gtsam/geometry/PinholePose.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/CalibratedCamera.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/CalibratedCamera.h"
+#include "gtsam/geometry/Point2.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/PinholeSet.h b/gtsam/geometry/PinholeSet.h
index 55269f9..3afb542 100644
--- a/gtsam/geometry/PinholeSet.h
+++ b/gtsam/geometry/PinholeSet.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/CameraSet.h>
-#include <gtsam/geometry/triangulation.h>
+#include "gtsam/geometry/CameraSet.h"
+#include "gtsam/geometry/triangulation.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Point2.cpp b/gtsam/geometry/Point2.cpp
index 54c94ad..cdeb4ea 100644
--- a/gtsam/geometry/Point2.cpp
+++ b/gtsam/geometry/Point2.cpp
@@ -15,7 +15,7 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/geometry/Point2.h"
 #include <cmath>
 #include <iostream>
 

diff --git a/gtsam/geometry/Point2.h b/gtsam/geometry/Point2.h
index 76beea1..473621f 100644
--- a/gtsam/geometry/Point2.h
+++ b/gtsam/geometry/Point2.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/base/std_optional_serialization.h>
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/base/std_optional_serialization.h"
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>
 #endif

diff --git a/gtsam/geometry/Point3.cpp b/gtsam/geometry/Point3.cpp
index 79fd6b9..617a59b 100644
--- a/gtsam/geometry/Point3.cpp
+++ b/gtsam/geometry/Point3.cpp
@@ -14,7 +14,7 @@
  * @brief 3D Point
  */
 
-#include <gtsam/geometry/Point3.h>
+#include "gtsam/geometry/Point3.h"
 #include <cmath>
 #include <iostream>
 #include <vector>

diff --git a/gtsam/geometry/Point3.h b/gtsam/geometry/Point3.h
index d5c3281..b316312 100644
--- a/gtsam/geometry/Point3.h
+++ b/gtsam/geometry/Point3.h
@@ -21,11 +21,11 @@
 
 #pragma once
 
-#include <gtsam/config.h>
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/dllexport.h>
-#include <gtsam/base/VectorSerialization.h>
+#include "gtsam/config.h"
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/dllexport.h"
+#include "gtsam/base/VectorSerialization.h"
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>
 #endif

diff --git a/gtsam/geometry/Pose2.cpp b/gtsam/geometry/Pose2.cpp
index 6404814..82a4a9f 100644
--- a/gtsam/geometry/Pose2.cpp
+++ b/gtsam/geometry/Pose2.cpp
@@ -14,10 +14,10 @@
  * @brief 2D Pose
  */
 
-#include <gtsam/geometry/concepts.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/concepts.h>
+#include "gtsam/geometry/concepts.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/concepts.h"
 
 #include <cmath>
 #include <cassert>

diff --git a/gtsam/geometry/Pose2.h b/gtsam/geometry/Pose2.h
index ff9a639..7d66a5f 100644
--- a/gtsam/geometry/Pose2.h
+++ b/gtsam/geometry/Pose2.h
@@ -20,12 +20,12 @@
 
 #pragma once
 
-#include <gtsam/geometry/BearingRange.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Rot2.h>
-#include <gtsam/base/Lie.h>
-#include <gtsam/dllexport.h>
-#include <gtsam/base/std_optional_serialization.h>
+#include "gtsam/geometry/BearingRange.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Rot2.h"
+#include "gtsam/base/Lie.h"
+#include "gtsam/dllexport.h"
+#include "gtsam/base/std_optional_serialization.h"
 
 #include <optional>
 

diff --git a/gtsam/geometry/Pose3.cpp b/gtsam/geometry/Pose3.cpp
index 5f0e8e3..9abf1cb 100644
--- a/gtsam/geometry/Pose3.cpp
+++ b/gtsam/geometry/Pose3.cpp
@@ -14,10 +14,10 @@
  * @brief 3D Pose
  */
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/concepts.h>
-#include <gtsam/base/concepts.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/concepts.h"
+#include "gtsam/base/concepts.h"
 
 #include <cmath>
 #include <iostream>

diff --git a/gtsam/geometry/Pose3.h b/gtsam/geometry/Pose3.h
index d7c280c..252d2d5 100644
--- a/gtsam/geometry/Pose3.h
+++ b/gtsam/geometry/Pose3.h
@@ -17,12 +17,12 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/config.h>
+#include "gtsam/config.h"
 
-#include <gtsam/geometry/BearingRange.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/base/Lie.h>
+#include "gtsam/geometry/BearingRange.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/base/Lie.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Quaternion.h b/gtsam/geometry/Quaternion.h
index 36f8915..a44dd55 100644
--- a/gtsam/geometry/Quaternion.h
+++ b/gtsam/geometry/Quaternion.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/concepts.h>
-#include <gtsam/geometry/SO3.h> // Logmap/Expmap derivatives
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/concepts.h"
+#include "gtsam/geometry/SO3.h" // Logmap/Expmap derivatives
 #include <limits>
 #include <iostream>
 

diff --git a/gtsam/geometry/Rot2.cpp b/gtsam/geometry/Rot2.cpp
index 9bf631e..67ad392 100644
--- a/gtsam/geometry/Rot2.cpp
+++ b/gtsam/geometry/Rot2.cpp
@@ -16,7 +16,7 @@
  * @brief 2D Rotations
  */
 
-#include <gtsam/geometry/Rot2.h>
+#include "gtsam/geometry/Rot2.h"
 #include <iostream>
 
 using namespace std;

diff --git a/gtsam/geometry/Rot2.h b/gtsam/geometry/Rot2.h
index 6bb97ff..299acd2 100644
--- a/gtsam/geometry/Rot2.h
+++ b/gtsam/geometry/Rot2.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/base/Lie.h>
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/base/Lie.h"
 
 #include <random>
 

diff --git a/gtsam/geometry/Rot3.cpp b/gtsam/geometry/Rot3.cpp
index 10ba589..f08067f 100644
--- a/gtsam/geometry/Rot3.cpp
+++ b/gtsam/geometry/Rot3.cpp
@@ -19,8 +19,8 @@
  * @author  Varun Agrawal
  */
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/SO3.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/SO3.h"
 
 #include <cmath>
 #include <cassert>

diff --git a/gtsam/geometry/Rot3.h b/gtsam/geometry/Rot3.h
index d1e3304..4953eb2 100644
--- a/gtsam/geometry/Rot3.h
+++ b/gtsam/geometry/Rot3.h
@@ -23,11 +23,11 @@
 
 #pragma once
 
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/geometry/Quaternion.h>
-#include <gtsam/geometry/SO3.h>
-#include <gtsam/base/concepts.h>
-#include <gtsam/config.h> // Get GTSAM_USE_QUATERNIONS macro
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/geometry/Quaternion.h"
+#include "gtsam/geometry/SO3.h"
+#include "gtsam/base/concepts.h"
+#include "gtsam/config.h" // Get GTSAM_USE_QUATERNIONS macro
 
 #include <random>
 

diff --git a/gtsam/geometry/Rot3M.cpp b/gtsam/geometry/Rot3M.cpp
index 45e04da..9130ae0 100644
--- a/gtsam/geometry/Rot3M.cpp
+++ b/gtsam/geometry/Rot3M.cpp
@@ -18,12 +18,12 @@
  * @author  Richard Roberts
  */
 
-#include <gtsam/config.h> // Get GTSAM_USE_QUATERNIONS macro
+#include "gtsam/config.h" // Get GTSAM_USE_QUATERNIONS macro
 
 #ifndef GTSAM_USE_QUATERNIONS
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/SO3.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/SO3.h"
 #include <cmath>
 
 using namespace std;

diff --git a/gtsam/geometry/Rot3Q.cpp b/gtsam/geometry/Rot3Q.cpp
index 3e50551..e3c01ec 100644
--- a/gtsam/geometry/Rot3Q.cpp
+++ b/gtsam/geometry/Rot3Q.cpp
@@ -15,11 +15,11 @@
  * @author  Richard Roberts
  */
 
-#include <gtsam/config.h> // Get GTSAM_USE_QUATERNIONS macro
+#include "gtsam/config.h" // Get GTSAM_USE_QUATERNIONS macro
 
 #ifdef GTSAM_USE_QUATERNIONS
 
-#include <gtsam/geometry/Rot3.h>
+#include "gtsam/geometry/Rot3.h"
 #include <cmath>
 
 using namespace std;

diff --git a/gtsam/geometry/SO3.cpp b/gtsam/geometry/SO3.cpp
index c54306a..8fd385c 100644
--- a/gtsam/geometry/SO3.cpp
+++ b/gtsam/geometry/SO3.cpp
@@ -18,11 +18,11 @@
  * @date    December 2014
  */
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/concepts.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/SO3.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/concepts.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/SO3.h"
 
 #include <Eigen/SVD>
 #include <cmath>

diff --git a/gtsam/geometry/SO3.h b/gtsam/geometry/SO3.h
index f831aa4..c9ddc80 100644
--- a/gtsam/geometry/SO3.h
+++ b/gtsam/geometry/SO3.h
@@ -20,11 +20,11 @@
 
 #pragma once
 
-#include <gtsam/geometry/SOn.h>
+#include "gtsam/geometry/SOn.h"
 
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/dllexport.h"
 
 #include <vector>
 

diff --git a/gtsam/geometry/SO4.cpp b/gtsam/geometry/SO4.cpp
index 1c4920a..bb1b1a0 100644
--- a/gtsam/geometry/SO4.cpp
+++ b/gtsam/geometry/SO4.cpp
@@ -16,10 +16,10 @@
  * @author  Luca Carlone
  */
 
-#include <gtsam/base/concepts.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/geometry/SO4.h>
-#include <gtsam/geometry/Unit3.h>
+#include "gtsam/base/concepts.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/geometry/SO4.h"
+#include "gtsam/geometry/Unit3.h"
 
 #include <Eigen/Eigenvalues>
 

diff --git a/gtsam/geometry/SO4.h b/gtsam/geometry/SO4.h
index 834cab7..b0929d0 100644
--- a/gtsam/geometry/SO4.h
+++ b/gtsam/geometry/SO4.h
@@ -19,13 +19,13 @@
 
 #pragma once
 
-#include <gtsam/geometry/SOn.h>
+#include "gtsam/geometry/SOn.h"
 
-#include <gtsam/base/Group.h>
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/base/Group.h"
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/dllexport.h"
 
 #include <string>
 

diff --git a/gtsam/geometry/SOn-inl.h b/gtsam/geometry/SOn-inl.h
index 284ae76..1d7a2db 100644
--- a/gtsam/geometry/SOn-inl.h
+++ b/gtsam/geometry/SOn-inl.h
@@ -18,7 +18,7 @@
  * @date    March 2019
  */
 
-#include <gtsam/base/Matrix.h>
+#include "gtsam/base/Matrix.h"
 
 #include <iostream>
 

diff --git a/gtsam/geometry/SOn.cpp b/gtsam/geometry/SOn.cpp
index 7088513..4c55bda 100644
--- a/gtsam/geometry/SOn.cpp
+++ b/gtsam/geometry/SOn.cpp
@@ -17,7 +17,7 @@
  * @date    March 2019
  */
 
-#include <gtsam/geometry/SOn.h>
+#include "gtsam/geometry/SOn.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/SOn.h b/gtsam/geometry/SOn.h
index b0da3b2..f22ef1b 100644
--- a/gtsam/geometry/SOn.h
+++ b/gtsam/geometry/SOn.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/make_shared.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/make_shared.h"
+#include "gtsam/dllexport.h"
 #include <Eigen/Core>
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION

diff --git a/gtsam/geometry/Similarity2.cpp b/gtsam/geometry/Similarity2.cpp
index c786049..d9c1001 100644
--- a/gtsam/geometry/Similarity2.cpp
+++ b/gtsam/geometry/Similarity2.cpp
@@ -15,11 +15,11 @@
  * @author John Lambert, Varun Agrawal
  */
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/Similarity2.h>
-#include <gtsam/slam/KarcherMeanFactor-inl.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/Similarity2.h"
+#include "gtsam/slam/KarcherMeanFactor-inl.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Similarity2.h b/gtsam/geometry/Similarity2.h
index 6bec716..aac44b2 100644
--- a/gtsam/geometry/Similarity2.h
+++ b/gtsam/geometry/Similarity2.h
@@ -17,12 +17,12 @@
 
 #pragma once
 
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/dllexport.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Rot2.h>
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/dllexport.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Rot2.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Similarity3.cpp b/gtsam/geometry/Similarity3.cpp
index cf2360b..93d3a85 100644
--- a/gtsam/geometry/Similarity3.cpp
+++ b/gtsam/geometry/Similarity3.cpp
@@ -16,11 +16,11 @@
  * @author John Lambert
  */
 
-#include <gtsam/geometry/Similarity3.h>
+#include "gtsam/geometry/Similarity3.h"
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/slam/KarcherMeanFactor-inl.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/slam/KarcherMeanFactor-inl.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/Similarity3.h b/gtsam/geometry/Similarity3.h
index 05bd043..f93d0c2 100644
--- a/gtsam/geometry/Similarity3.h
+++ b/gtsam/geometry/Similarity3.h
@@ -18,12 +18,12 @@
 
 #pragma once
 
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/dllexport.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Rot3.h>
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/dllexport.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Rot3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/SimpleCamera.h b/gtsam/geometry/SimpleCamera.h
index 7944514..17f997c 100644
--- a/gtsam/geometry/SimpleCamera.h
+++ b/gtsam/geometry/SimpleCamera.h
@@ -18,14 +18,14 @@
 
 #pragma once
 
-#include <gtsam/geometry/BearingRange.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/Cal3DS2.h>
-#include <gtsam/geometry/Cal3Fisheye.h>
-#include <gtsam/geometry/Cal3Unified.h>
-#include <gtsam/geometry/Cal3Fisheye.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/PinholeCamera.h>
+#include "gtsam/geometry/BearingRange.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/Cal3DS2.h"
+#include "gtsam/geometry/Cal3Fisheye.h"
+#include "gtsam/geometry/Cal3Unified.h"
+#include "gtsam/geometry/Cal3Fisheye.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/PinholeCamera.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/SphericalCamera.cpp b/gtsam/geometry/SphericalCamera.cpp
index 5c6a2b3..8610696 100644
--- a/gtsam/geometry/SphericalCamera.cpp
+++ b/gtsam/geometry/SphericalCamera.cpp
@@ -16,7 +16,7 @@
  * @author Luca Carlone
  */
 
-#include <gtsam/geometry/SphericalCamera.h>
+#include "gtsam/geometry/SphericalCamera.h"
 
 using namespace std;
 

diff --git a/gtsam/geometry/SphericalCamera.h b/gtsam/geometry/SphericalCamera.h
index 1ff87ce..36af5b2 100644
--- a/gtsam/geometry/SphericalCamera.h
+++ b/gtsam/geometry/SphericalCamera.h
@@ -18,13 +18,13 @@
 
 #pragma once
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/ThreadsafeException.h>
-#include <gtsam/base/concepts.h>
-#include <gtsam/dllexport.h>
-#include <gtsam/geometry/BearingRange.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Unit3.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/ThreadsafeException.h"
+#include "gtsam/base/concepts.h"
+#include "gtsam/dllexport.h"
+#include "gtsam/geometry/BearingRange.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Unit3.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>

diff --git a/gtsam/geometry/StereoCamera.cpp b/gtsam/geometry/StereoCamera.cpp
index 54cdee2..d1ea30e 100644
--- a/gtsam/geometry/StereoCamera.cpp
+++ b/gtsam/geometry/StereoCamera.cpp
@@ -15,7 +15,7 @@
 *@author  Chris Beall
  */
 
-#include <gtsam/geometry/StereoCamera.h>
+#include "gtsam/geometry/StereoCamera.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/StereoCamera.h b/gtsam/geometry/StereoCamera.h
index 0261255..87dc4dc 100644
--- a/gtsam/geometry/StereoCamera.h
+++ b/gtsam/geometry/StereoCamera.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3_S2Stereo.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/StereoPoint2.h>
+#include "gtsam/geometry/Cal3_S2Stereo.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/StereoPoint2.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/StereoPoint2.cpp b/gtsam/geometry/StereoPoint2.cpp
index 2254d8a..4ed6580 100644
--- a/gtsam/geometry/StereoPoint2.cpp
+++ b/gtsam/geometry/StereoPoint2.cpp
@@ -16,7 +16,7 @@
  */
 
 #include <iostream>
-#include <gtsam/geometry/StereoPoint2.h>
+#include "gtsam/geometry/StereoPoint2.h"
 
 using namespace std;
 

diff --git a/gtsam/geometry/StereoPoint2.h b/gtsam/geometry/StereoPoint2.h
index 7a1910e..be72079 100644
--- a/gtsam/geometry/StereoPoint2.h
+++ b/gtsam/geometry/StereoPoint2.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/base/VectorSpace.h>
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/base/VectorSpace.h"
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>
 #endif

diff --git a/gtsam/geometry/Unit3.cpp b/gtsam/geometry/Unit3.cpp
index ac2ac07..c46c10e 100644
--- a/gtsam/geometry/Unit3.cpp
+++ b/gtsam/geometry/Unit3.cpp
@@ -19,9 +19,9 @@
  * @brief The Unit3 class - basically a point on a unit sphere
  */
 
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/config.h>  // for GTSAM_USE_TBB
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/config.h"  // for GTSAM_USE_TBB
 
 #include <iostream>
 #include <limits>

diff --git a/gtsam/geometry/Unit3.h b/gtsam/geometry/Unit3.h
index a730428..b4d3e7e 100644
--- a/gtsam/geometry/Unit3.h
+++ b/gtsam/geometry/Unit3.h
@@ -20,13 +20,13 @@
 
 #pragma once
 
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/VectorSerialization.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/VectorSerialization.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/dllexport.h"
 
 
 #include <random>

diff --git a/gtsam/geometry/concepts.h b/gtsam/geometry/concepts.h
index 30d87ac..d02ae91 100644
--- a/gtsam/geometry/concepts.h
+++ b/gtsam/geometry/concepts.h
@@ -24,7 +24,7 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
+#include "gtsam/base/Matrix.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/tests/testBearingRange.cpp b/gtsam/geometry/tests/testBearingRange.cpp
index ff2a9a6..2cfdcfb 100644
--- a/gtsam/geometry/tests/testBearingRange.cpp
+++ b/gtsam/geometry/tests/testBearingRange.cpp
@@ -16,12 +16,12 @@
  *  @date July 2015
  */
 
-#include <gtsam/geometry/BearingRange.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/serializationTestHelpers.h>
+#include "gtsam/geometry/BearingRange.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/serializationTestHelpers.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testCal3Bundler.cpp b/gtsam/geometry/tests/testCal3Bundler.cpp
index 15e6339..29904de 100644
--- a/gtsam/geometry/tests/testCal3Bundler.cpp
+++ b/gtsam/geometry/tests/testCal3Bundler.cpp
@@ -14,11 +14,11 @@
  * @brief Unit tests for Bundler calibration model.
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Cal3Bundler.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Cal3Bundler.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/geometry/tests/testCal3DFisheye.cpp b/gtsam/geometry/tests/testCal3DFisheye.cpp
index 28064a9..1873410 100644
--- a/gtsam/geometry/tests/testCal3DFisheye.cpp
+++ b/gtsam/geometry/tests/testCal3DFisheye.cpp
@@ -15,13 +15,13 @@
  * @author ghaggin
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Cal3Fisheye.h>
-#include <gtsam/geometry/Point3.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Cal3Fisheye.h"
+#include "gtsam/geometry/Point3.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/geometry/tests/testCal3DS2.cpp b/gtsam/geometry/tests/testCal3DS2.cpp
index e9ee398..8301896 100644
--- a/gtsam/geometry/tests/testCal3DS2.cpp
+++ b/gtsam/geometry/tests/testCal3DS2.cpp
@@ -14,11 +14,11 @@
  * @brief Unit tests for Cal3DS2 calibration model.
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Cal3DS2.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Cal3DS2.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/geometry/tests/testCal3Unified.cpp b/gtsam/geometry/tests/testCal3Unified.cpp
index 0f58bd8..69cf909 100644
--- a/gtsam/geometry/tests/testCal3Unified.cpp
+++ b/gtsam/geometry/tests/testCal3Unified.cpp
@@ -14,14 +14,14 @@
  * @brief Unit tests for Cal3Unified calibration model.
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Cal3Unified.h>
-
-#include <gtsam/inference/Key.h>
-#include <gtsam/nonlinear/Values.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Cal3Unified.h"
+
+#include "gtsam/inference/Key.h"
+#include "gtsam/nonlinear/Values.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/geometry/tests/testCal3_S2.cpp b/gtsam/geometry/tests/testCal3_S2.cpp
index 68d5e23..3fa659b 100644
--- a/gtsam/geometry/tests/testCal3_S2.cpp
+++ b/gtsam/geometry/tests/testCal3_S2.cpp
@@ -14,11 +14,11 @@
  * @brief Unit tests for basic Cal3_S2 calibration model.
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Cal3_S2.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Cal3_S2.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/geometry/tests/testCal3_S2Stereo.cpp b/gtsam/geometry/tests/testCal3_S2Stereo.cpp
index 070eee8..e5269f8 100644
--- a/gtsam/geometry/tests/testCal3_S2Stereo.cpp
+++ b/gtsam/geometry/tests/testCal3_S2Stereo.cpp
@@ -14,11 +14,11 @@
  * @brief Unit tests for stereo-rig calibration model.
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Cal3_S2Stereo.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Cal3_S2Stereo.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/geometry/tests/testCal3f.cpp b/gtsam/geometry/tests/testCal3f.cpp
index d21d39f..d2e372a 100644
--- a/gtsam/geometry/tests/testCal3f.cpp
+++ b/gtsam/geometry/tests/testCal3f.cpp
@@ -13,11 +13,11 @@
  * @brief Unit tests for the Cal3f calibration model.
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Cal3f.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Cal3f.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/geometry/tests/testCalibratedCamera.cpp b/gtsam/geometry/tests/testCalibratedCamera.cpp
index 27f882f..5654306 100644
--- a/gtsam/geometry/tests/testCalibratedCamera.cpp
+++ b/gtsam/geometry/tests/testCalibratedCamera.cpp
@@ -15,12 +15,12 @@
  * @brief test CalibratedCamera class
  */
 
-#include <gtsam/geometry/CalibratedCamera.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/geometry/CalibratedCamera.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 

diff --git a/gtsam/geometry/tests/testCameraSet.cpp b/gtsam/geometry/tests/testCameraSet.cpp
index 144f283..dc0b3a3 100644
--- a/gtsam/geometry/tests/testCameraSet.cpp
+++ b/gtsam/geometry/tests/testCameraSet.cpp
@@ -16,19 +16,19 @@
  *  @date   Feb 19, 2015
  */
 
-#include <gtsam/geometry/CameraSet.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/CameraSet.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;
 
 /* ************************************************************************* */
 // Cal3Bundler test
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Cal3Bundler.h>
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Cal3Bundler.h"
 TEST(CameraSet, Pinhole) {
   typedef PinholeCamera<Cal3Bundler> Camera;
   typedef CameraSet<Camera> Set;
@@ -210,7 +210,7 @@ TEST(CameraSet, SchurComplementAndRearrangeBlocks) {
 }
 
 /* ************************************************************************* */
-#include <gtsam/geometry/StereoCamera.h>
+#include "gtsam/geometry/StereoCamera.h"
 TEST(CameraSet, Stereo) {
   CameraSet<StereoCamera> set;
   typedef StereoCamera::MeasurementVector ZZ;

diff --git a/gtsam/geometry/tests/testCyclic.cpp b/gtsam/geometry/tests/testCyclic.cpp
index b0e0ca0..1aed256 100644
--- a/gtsam/geometry/tests/testCyclic.cpp
+++ b/gtsam/geometry/tests/testCyclic.cpp
@@ -15,9 +15,9 @@
  * @author Frank Dellaert
  **/
 
-#include <gtsam/geometry/Cyclic.h>
-#include <gtsam/base/Testable.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/Cyclic.h"
+#include "gtsam/base/Testable.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testEssentialMatrix.cpp b/gtsam/geometry/tests/testEssentialMatrix.cpp
index bd45681..bbe65cf 100644
--- a/gtsam/geometry/tests/testEssentialMatrix.cpp
+++ b/gtsam/geometry/tests/testEssentialMatrix.cpp
@@ -5,11 +5,11 @@
  * @date December 17, 2013
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/CalibratedCamera.h>
-#include <gtsam/geometry/EssentialMatrix.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/CalibratedCamera.h"
+#include "gtsam/geometry/EssentialMatrix.h"
 
 #include <sstream>
 

diff --git a/gtsam/geometry/tests/testFundamentalMatrix.cpp b/gtsam/geometry/tests/testFundamentalMatrix.cpp
index eed5da7..7fd601b 100644
--- a/gtsam/geometry/tests/testFundamentalMatrix.cpp
+++ b/gtsam/geometry/tests/testFundamentalMatrix.cpp
@@ -5,13 +5,13 @@
  * @date October 23, 2024
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/geometry/FundamentalMatrix.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/SimpleCamera.h>
-#include <gtsam/geometry/Unit3.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/geometry/FundamentalMatrix.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/SimpleCamera.h"
+#include "gtsam/geometry/Unit3.h"
 
 #include <cmath>
 

diff --git a/gtsam/geometry/tests/testLine3.cpp b/gtsam/geometry/tests/testLine3.cpp
index ae2a5e0..115f5f6 100644
--- a/gtsam/geometry/tests/testLine3.cpp
+++ b/gtsam/geometry/tests/testLine3.cpp
@@ -1,11 +1,11 @@
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Line3.h>
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/expressionTesting.h>
-#include <gtsam/slam/PriorFactor.h>
-#include <gtsam/slam/expressions.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Line3.h"
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/expressionTesting.h"
+#include "gtsam/slam/PriorFactor.h"
+#include "gtsam/slam/expressions.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/geometry/tests/testOrientedPlane3.cpp b/gtsam/geometry/tests/testOrientedPlane3.cpp
index f27b507..1528e00 100644
--- a/gtsam/geometry/tests/testOrientedPlane3.cpp
+++ b/gtsam/geometry/tests/testOrientedPlane3.cpp
@@ -17,9 +17,9 @@
  * @brief Tests the OrientedPlane3 class
  */
 
-#include <gtsam/geometry/OrientedPlane3.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/OrientedPlane3.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std::placeholders;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testPinholeCamera.cpp b/gtsam/geometry/tests/testPinholeCamera.cpp
index 6b5d936..04dd87c 100644
--- a/gtsam/geometry/tests/testPinholeCamera.cpp
+++ b/gtsam/geometry/tests/testPinholeCamera.cpp
@@ -15,14 +15,14 @@
  * @brief test PinholeCamera class
  */
 
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <cmath>
 #include <iostream>

diff --git a/gtsam/geometry/tests/testPinholePose.cpp b/gtsam/geometry/tests/testPinholePose.cpp
index 7d795db..4344a83 100644
--- a/gtsam/geometry/tests/testPinholePose.cpp
+++ b/gtsam/geometry/tests/testPinholePose.cpp
@@ -16,14 +16,14 @@
  * @date   Feb 20, 2015
  */
 
-#include <gtsam/geometry/PinholePose.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/PinholePose.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <cmath>
 #include <iostream>

diff --git a/gtsam/geometry/tests/testPinholeSet.cpp b/gtsam/geometry/tests/testPinholeSet.cpp
index 9ca8847..847ca2e 100644
--- a/gtsam/geometry/tests/testPinholeSet.cpp
+++ b/gtsam/geometry/tests/testPinholeSet.cpp
@@ -16,16 +16,16 @@
  *  @date   Feb 19, 2015
  */
 
-#include <gtsam/geometry/PinholeSet.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/PinholeSet.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;
 
 /* ************************************************************************* */
-#include <gtsam/geometry/CalibratedCamera.h>
+#include "gtsam/geometry/CalibratedCamera.h"
 TEST(PinholeSet, Stereo) {
   typedef Point2Vector ZZ;
   PinholeSet<CalibratedCamera> set;
@@ -67,8 +67,8 @@ TEST(PinholeSet, Stereo) {
 
 /* ************************************************************************* */
 // Cal3Bundler test
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Cal3Bundler.h>
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Cal3Bundler.h"
 TEST(PinholeSet, Pinhole) {
   typedef PinholeCamera<Cal3Bundler> Camera;
   typedef Point2Vector ZZ;

diff --git a/gtsam/geometry/tests/testPoint2.cpp b/gtsam/geometry/tests/testPoint2.cpp
index e8bbfe0..8236417 100644
--- a/gtsam/geometry/tests/testPoint2.cpp
+++ b/gtsam/geometry/tests/testPoint2.cpp
@@ -15,11 +15,11 @@
  * @author Frank Dellaert
  **/
 
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/lieProxies.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/lieProxies.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testPoint3.cpp b/gtsam/geometry/tests/testPoint3.cpp
index b3b751e..9409e94 100644
--- a/gtsam/geometry/tests/testPoint3.cpp
+++ b/gtsam/geometry/tests/testPoint3.cpp
@@ -14,10 +14,10 @@
  * @brief  Unit tests for Point3 class
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Point3.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Point3.h"
 
 using namespace std::placeholders;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testPose2.cpp b/gtsam/geometry/tests/testPose2.cpp
index 9e4efe7..7c38d4f 100644
--- a/gtsam/geometry/tests/testPose2.cpp
+++ b/gtsam/geometry/tests/testPose2.cpp
@@ -14,14 +14,14 @@
  * @brief  Unit tests for Pose2 class
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/lieProxies.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Rot2.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/lieProxies.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Rot2.h"
 
 #include <optional>
 #include <cmath>

diff --git a/gtsam/geometry/tests/testPose3.cpp b/gtsam/geometry/tests/testPose3.cpp
index 4ff4f9a..f65201b 100644
--- a/gtsam/geometry/tests/testPose3.cpp
+++ b/gtsam/geometry/tests/testPose3.cpp
@@ -14,14 +14,14 @@
  * @brief  Unit tests for Pose3 class
  */
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/base/lieProxies.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/base/lieProxies.h"
+#include "gtsam/base/TestableAssertions.h"
 
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 #include <cmath>
 #include <functional>
 

diff --git a/gtsam/geometry/tests/testPoseAdjointMap.h b/gtsam/geometry/tests/testPoseAdjointMap.h
index 1d006c3..51d2496 100644
--- a/gtsam/geometry/tests/testPoseAdjointMap.h
+++ b/gtsam/geometry/tests/testPoseAdjointMap.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
 
 namespace test_pose_adjoint_map
 {

diff --git a/gtsam/geometry/tests/testQuaternion.cpp b/gtsam/geometry/tests/testQuaternion.cpp
index c99c67e..e3d692e 100644
--- a/gtsam/geometry/tests/testQuaternion.cpp
+++ b/gtsam/geometry/tests/testQuaternion.cpp
@@ -15,11 +15,11 @@
  * @author Frank Dellaert
  **/
 
-#include <gtsam/geometry/Quaternion.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/testLie.h>
+#include "gtsam/geometry/Quaternion.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/testLie.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testRot2.cpp b/gtsam/geometry/tests/testRot2.cpp
index 5a087ed..d936cc1 100644
--- a/gtsam/geometry/tests/testRot2.cpp
+++ b/gtsam/geometry/tests/testRot2.cpp
@@ -15,10 +15,10 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/geometry/Rot2.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/testLie.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/Rot2.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/testLie.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/geometry/tests/testRot3.cpp b/gtsam/geometry/tests/testRot3.cpp
index ce056ed..d88384f 100644
--- a/gtsam/geometry/tests/testRot3.cpp
+++ b/gtsam/geometry/tests/testRot3.cpp
@@ -17,14 +17,14 @@
  * @author  Varun Agrawal
  */
 
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/lieProxies.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/lieProxies.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testRot3M.cpp b/gtsam/geometry/tests/testRot3M.cpp
index 7944db6..f1f448b 100644
--- a/gtsam/geometry/tests/testRot3M.cpp
+++ b/gtsam/geometry/tests/testRot3M.cpp
@@ -16,9 +16,9 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/base/Testable.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/base/Testable.h"
+#include "CppUnitLite/TestHarness.h"
 
 #ifndef GTSAM_USE_QUATERNIONS
 

diff --git a/gtsam/geometry/tests/testRot3Q.cpp b/gtsam/geometry/tests/testRot3Q.cpp
index 94f2168..67e17aa 100644
--- a/gtsam/geometry/tests/testRot3Q.cpp
+++ b/gtsam/geometry/tests/testRot3Q.cpp
@@ -15,13 +15,13 @@
  * @author  Alireza Fathi
  */
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/Quaternion.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/Quaternion.h"
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testSO3.cpp b/gtsam/geometry/tests/testSO3.cpp
index 3ecabe8..b763b4a 100644
--- a/gtsam/geometry/tests/testSO3.cpp
+++ b/gtsam/geometry/tests/testSO3.cpp
@@ -15,10 +15,10 @@
  * @author Frank Dellaert
  **/
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/geometry/SO3.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/geometry/SO3.h"
 
 using namespace std::placeholders;
 using namespace std;

diff --git a/gtsam/geometry/tests/testSO4.cpp b/gtsam/geometry/tests/testSO4.cpp
index 7a31989..e8c08d3 100644
--- a/gtsam/geometry/tests/testSO4.cpp
+++ b/gtsam/geometry/tests/testSO4.cpp
@@ -15,14 +15,14 @@
  * @author Frank Dellaert
  **/
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/lieProxies.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/SO4.h>
-#include <gtsam/geometry/SO3.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/lieProxies.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/SO4.h"
+#include "gtsam/geometry/SO3.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 #include <random>

diff --git a/gtsam/geometry/tests/testSOn.cpp b/gtsam/geometry/tests/testSOn.cpp
index 741ddd3..92def7b 100644
--- a/gtsam/geometry/tests/testSOn.cpp
+++ b/gtsam/geometry/tests/testSOn.cpp
@@ -15,20 +15,20 @@
  * @author Frank Dellaert
  **/
 
-#include <gtsam/geometry/SO3.h>
-#include <gtsam/geometry/SO4.h>
-#include <gtsam/geometry/SOn.h>
-
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/lieProxies.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/nonlinear/Values.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/SO3.h"
+#include "gtsam/geometry/SO4.h"
+#include "gtsam/geometry/SOn.h"
+
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/lieProxies.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/nonlinear/Values.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 #include <random>

diff --git a/gtsam/geometry/tests/testSerializationGeometry.cpp b/gtsam/geometry/tests/testSerializationGeometry.cpp
index aa111c3..e4fa23d 100644
--- a/gtsam/geometry/tests/testSerializationGeometry.cpp
+++ b/gtsam/geometry/tests/testSerializationGeometry.cpp
@@ -16,21 +16,21 @@
  * @date Feb 7, 2012
  */
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/geometry/EssentialMatrix.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Cal3_S2Stereo.h>
-#include <gtsam/geometry/CalibratedCamera.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Cal3DS2.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/Cal3Unified.h>
-#include <gtsam/geometry/StereoCamera.h>
-#include <gtsam/geometry/StereoPoint2.h>
-
-#include <gtsam/base/serializationTestHelpers.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/geometry/EssentialMatrix.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Cal3_S2Stereo.h"
+#include "gtsam/geometry/CalibratedCamera.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Cal3DS2.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/Cal3Unified.h"
+#include "gtsam/geometry/StereoCamera.h"
+#include "gtsam/geometry/StereoPoint2.h"
+
+#include "gtsam/base/serializationTestHelpers.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testSimilarity2.cpp b/gtsam/geometry/tests/testSimilarity2.cpp
index 9a64ba1..08a30dc 100644
--- a/gtsam/geometry/tests/testSimilarity2.cpp
+++ b/gtsam/geometry/tests/testSimilarity2.cpp
@@ -15,11 +15,11 @@
  * @author Varun Agrawal
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/geometry/Similarity2.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/geometry/Similarity2.h"
 
 #include <functional>
 

diff --git a/gtsam/geometry/tests/testSimilarity3.cpp b/gtsam/geometry/tests/testSimilarity3.cpp
index e4f68f2..e923bb6 100644
--- a/gtsam/geometry/tests/testSimilarity3.cpp
+++ b/gtsam/geometry/tests/testSimilarity3.cpp
@@ -16,18 +16,18 @@
  * @author Zhaoyang Lv
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Similarity3.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/ExpressionFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Similarity3.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/ExpressionFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 #include <functional>
 

diff --git a/gtsam/geometry/tests/testSphericalCamera.cpp b/gtsam/geometry/tests/testSphericalCamera.cpp
index cf8970d..7807b32 100644
--- a/gtsam/geometry/tests/testSphericalCamera.cpp
+++ b/gtsam/geometry/tests/testSphericalCamera.cpp
@@ -16,10 +16,10 @@
  * @author Luca Carlone
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/SphericalCamera.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/SphericalCamera.h"
 
 #include <cmath>
 #include <iostream>

diff --git a/gtsam/geometry/tests/testStereoCamera.cpp b/gtsam/geometry/tests/testStereoCamera.cpp
index df275c9..e76c4d2 100644
--- a/gtsam/geometry/tests/testStereoCamera.cpp
+++ b/gtsam/geometry/tests/testStereoCamera.cpp
@@ -16,10 +16,10 @@
  * @author  Chris Beall
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/StereoCamera.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/StereoCamera.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testStereoPoint2.cpp b/gtsam/geometry/tests/testStereoPoint2.cpp
index 3977589..6c763e0 100644
--- a/gtsam/geometry/tests/testStereoPoint2.cpp
+++ b/gtsam/geometry/tests/testStereoPoint2.cpp
@@ -17,10 +17,10 @@
  * @author Alex Cunningham
  */
 
-#include <gtsam/geometry/StereoPoint2.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/lieProxies.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/StereoPoint2.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/lieProxies.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testTriangulation.cpp b/gtsam/geometry/tests/testTriangulation.cpp
index e7812e5..5ad2c5b 100644
--- a/gtsam/geometry/tests/testTriangulation.cpp
+++ b/gtsam/geometry/tests/testTriangulation.cpp
@@ -18,17 +18,17 @@
  * @author Akshay Krishnan
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/Cal3DS2.h>
-#include <gtsam/geometry/CameraSet.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/SphericalCamera.h>
-#include <gtsam/geometry/StereoCamera.h>
-#include <gtsam/geometry/triangulation.h>
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/slam/StereoFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/Cal3DS2.h"
+#include "gtsam/geometry/CameraSet.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/SphericalCamera.h"
+#include "gtsam/geometry/StereoCamera.h"
+#include "gtsam/geometry/triangulation.h"
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/slam/StereoFactor.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/geometry/tests/testUnit3.cpp b/gtsam/geometry/tests/testUnit3.cpp
index 0c4c2c7..6bc7da7 100644
--- a/gtsam/geometry/tests/testUnit3.cpp
+++ b/gtsam/geometry/tests/testUnit3.cpp
@@ -18,18 +18,18 @@
  * @brief Tests the Unit3 class
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <cmath>
 #include <random>

diff --git a/gtsam/geometry/triangulation.cpp b/gtsam/geometry/triangulation.cpp
index 039dfd7..0bfbdd0 100644
--- a/gtsam/geometry/triangulation.cpp
+++ b/gtsam/geometry/triangulation.cpp
@@ -17,10 +17,10 @@
  * @author Akshay Krishnan
  */
 
-#include <gtsam/geometry/triangulation.h>
+#include "gtsam/geometry/triangulation.h"
 
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
 namespace gtsam {
 

diff --git a/gtsam/geometry/triangulation.h b/gtsam/geometry/triangulation.h
index 9087f01..fa24607 100644
--- a/gtsam/geometry/triangulation.h
+++ b/gtsam/geometry/triangulation.h
@@ -20,19 +20,19 @@
 
 #pragma once
 
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/Cal3Fisheye.h>
-#include <gtsam/geometry/Cal3Unified.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Cal3DS2.h>
-#include <gtsam/geometry/CameraSet.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/SphericalCamera.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/TriangulationFactor.h>
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/Cal3Fisheye.h"
+#include "gtsam/geometry/Cal3Unified.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Cal3DS2.h"
+#include "gtsam/geometry/CameraSet.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/SphericalCamera.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/TriangulationFactor.h"
 
 #include <optional>
 

diff --git a/gtsam/global_includes.h b/gtsam/global_includes.h
index 94ae9ee..7637a6e 100644
--- a/gtsam/global_includes.h
+++ b/gtsam/global_includes.h
@@ -18,6 +18,6 @@
 
 #pragma once
 
-#include <gtsam/config.h>      // Configuration from CMake
-#include <gtsam/base/types.h>  // Basic types, constants, and compatibility functions
+#include "gtsam/config.h"      // Configuration from CMake
+#include "gtsam/base/types.h"  // Basic types, constants, and compatibility functions
 // types.h includes dllexport.h, which contains macros for dllspec tags for Windows DLLs

diff --git a/gtsam/hybrid/HybridBayesNet.cpp b/gtsam/hybrid/HybridBayesNet.cpp
index 623b82e..90c6bd9 100644
--- a/gtsam/hybrid/HybridBayesNet.cpp
+++ b/gtsam/hybrid/HybridBayesNet.cpp
@@ -16,11 +16,11 @@
  * @date   January 2022
  */
 
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridValues.h>
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridValues.h"
 
 #include <memory>
 

diff --git a/gtsam/hybrid/HybridBayesNet.h b/gtsam/hybrid/HybridBayesNet.h
index 96afb87..401ce43 100644
--- a/gtsam/hybrid/HybridBayesNet.h
+++ b/gtsam/hybrid/HybridBayesNet.h
@@ -17,13 +17,13 @@
 
 #pragma once
 
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/global_includes.h>
-#include <gtsam/hybrid/HybridConditional.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/inference/BayesNet.h>
-#include <gtsam/linear/GaussianBayesNet.h>
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/global_includes.h"
+#include "gtsam/hybrid/HybridConditional.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/inference/BayesNet.h"
+#include "gtsam/linear/GaussianBayesNet.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridBayesTree.cpp b/gtsam/hybrid/HybridBayesTree.cpp
index 1b633e0..50e0868 100644
--- a/gtsam/hybrid/HybridBayesTree.cpp
+++ b/gtsam/hybrid/HybridBayesTree.cpp
@@ -17,15 +17,15 @@
  * @author  Fan Jiang, Varun Agrawal
  */
 
-#include <gtsam/base/treeTraversal-inst.h>
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridBayesTree.h>
-#include <gtsam/hybrid/HybridConditional.h>
-#include <gtsam/inference/BayesTree-inst.h>
-#include <gtsam/inference/BayesTreeCliqueBase-inst.h>
-#include <gtsam/linear/GaussianJunctionTree.h>
+#include "gtsam/base/treeTraversal-inst.h"
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridBayesTree.h"
+#include "gtsam/hybrid/HybridConditional.h"
+#include "gtsam/inference/BayesTree-inst.h"
+#include "gtsam/inference/BayesTreeCliqueBase-inst.h"
+#include "gtsam/linear/GaussianJunctionTree.h"
 
 #include <memory>
 

diff --git a/gtsam/hybrid/HybridBayesTree.h b/gtsam/hybrid/HybridBayesTree.h
index 0fe9ca6..5a0c408 100644
--- a/gtsam/hybrid/HybridBayesTree.h
+++ b/gtsam/hybrid/HybridBayesTree.h
@@ -19,12 +19,12 @@
 
 #pragma once
 
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/inference/BayesTree.h>
-#include <gtsam/inference/BayesTreeCliqueBase.h>
-#include <gtsam/inference/Conditional.h>
-#include <gtsam/linear/GaussianBayesTree.h>
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/inference/BayesTree.h"
+#include "gtsam/inference/BayesTreeCliqueBase.h"
+#include "gtsam/inference/Conditional.h"
+#include "gtsam/linear/GaussianBayesTree.h"
 
 #include <string>
 

diff --git a/gtsam/hybrid/HybridConditional.cpp b/gtsam/hybrid/HybridConditional.cpp
index 97ec1a1..9e95a70 100644
--- a/gtsam/hybrid/HybridConditional.cpp
+++ b/gtsam/hybrid/HybridConditional.cpp
@@ -16,11 +16,11 @@
  *  @author Varun Agrawal
  */
 
-#include <gtsam/hybrid/HybridConditional.h>
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/inference/Conditional-inst.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/hybrid/HybridConditional.h"
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/inference/Conditional-inst.h"
+#include "gtsam/inference/Key.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridConditional.h b/gtsam/hybrid/HybridConditional.h
index f3df725..4843543 100644
--- a/gtsam/hybrid/HybridConditional.h
+++ b/gtsam/hybrid/HybridConditional.h
@@ -18,13 +18,13 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/inference/Conditional.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/linear/GaussianConditional.h>
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/inference/Conditional.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/linear/GaussianConditional.h"
 
 #include <memory>
 #include <stdexcept>

diff --git a/gtsam/hybrid/HybridEliminationTree.cpp b/gtsam/hybrid/HybridEliminationTree.cpp
index c2df2dd..13f796b 100644
--- a/gtsam/hybrid/HybridEliminationTree.cpp
+++ b/gtsam/hybrid/HybridEliminationTree.cpp
@@ -15,8 +15,8 @@
  * @author Fan Jiang
  */
 
-#include <gtsam/hybrid/HybridEliminationTree.h>
-#include <gtsam/inference/EliminationTree-inst.h>
+#include "gtsam/hybrid/HybridEliminationTree.h"
+#include "gtsam/inference/EliminationTree-inst.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridEliminationTree.h b/gtsam/hybrid/HybridEliminationTree.h
index 543e09c..deea155 100644
--- a/gtsam/hybrid/HybridEliminationTree.h
+++ b/gtsam/hybrid/HybridEliminationTree.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/inference/EliminationTree.h>
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/inference/EliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridFactor.cpp b/gtsam/hybrid/HybridFactor.cpp
index 3338951..1aa43f3 100644
--- a/gtsam/hybrid/HybridFactor.cpp
+++ b/gtsam/hybrid/HybridFactor.cpp
@@ -15,7 +15,7 @@
  *  @author Fan Jiang
  */
 
-#include <gtsam/hybrid/HybridFactor.h>
+#include "gtsam/hybrid/HybridFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridFactor.h b/gtsam/hybrid/HybridFactor.h
index 8d6fef3..940935b 100644
--- a/gtsam/hybrid/HybridFactor.h
+++ b/gtsam/hybrid/HybridFactor.h
@@ -18,13 +18,13 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/discrete/DecisionTree.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/discrete/TableFactor.h>
-#include <gtsam/inference/Factor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/discrete/DecisionTree.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/discrete/TableFactor.h"
+#include "gtsam/inference/Factor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
 
 #include <cstddef>
 #include <string>

diff --git a/gtsam/hybrid/HybridFactorGraph.cpp b/gtsam/hybrid/HybridFactorGraph.cpp
index 78c051b..bc8fe35 100644
--- a/gtsam/hybrid/HybridFactorGraph.cpp
+++ b/gtsam/hybrid/HybridFactorGraph.cpp
@@ -17,8 +17,8 @@
  * @date   January, 2023
  */
 
-#include <gtsam/hybrid/HybridFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/hybrid/HybridFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridFactorGraph.h b/gtsam/hybrid/HybridFactorGraph.h
index 921cc14..b6728e1 100644
--- a/gtsam/hybrid/HybridFactorGraph.h
+++ b/gtsam/hybrid/HybridFactorGraph.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/inference/FactorGraph.h>
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/inference/FactorGraph.h"
 
 #include <unordered_map>
 

diff --git a/gtsam/hybrid/HybridGaussianConditional.cpp b/gtsam/hybrid/HybridGaussianConditional.cpp
index 5434667..1ebab8c 100644
--- a/gtsam/hybrid/HybridGaussianConditional.cpp
+++ b/gtsam/hybrid/HybridGaussianConditional.cpp
@@ -18,16 +18,16 @@
  * @date   Mar 12, 2022
  */
 
-#include <gtsam/base/utilities.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/inference/Conditional-inst.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/JacobianFactor.h>
+#include "gtsam/base/utilities.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/inference/Conditional-inst.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/JacobianFactor.h"
 
 #include <cstddef>
 #include <memory>

diff --git a/gtsam/hybrid/HybridGaussianConditional.h b/gtsam/hybrid/HybridGaussianConditional.h
index 0d2b132..e7001e7 100644
--- a/gtsam/hybrid/HybridGaussianConditional.h
+++ b/gtsam/hybrid/HybridGaussianConditional.h
@@ -20,14 +20,14 @@
 
 #pragma once
 
-#include <gtsam/discrete/DecisionTree-inl.h>
-#include <gtsam/discrete/DecisionTree.h>
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/inference/Conditional.h>
-#include <gtsam/linear/GaussianConditional.h>
+#include "gtsam/discrete/DecisionTree-inl.h"
+#include "gtsam/discrete/DecisionTree.h"
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/inference/Conditional.h"
+#include "gtsam/linear/GaussianConditional.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridGaussianFactor.cpp b/gtsam/hybrid/HybridGaussianFactor.cpp
index fd9bd2f..6f2438f 100644
--- a/gtsam/hybrid/HybridGaussianFactor.cpp
+++ b/gtsam/hybrid/HybridGaussianFactor.cpp
@@ -18,16 +18,16 @@
  * @date   Mar 12, 2022
  */
 
-#include <gtsam/base/types.h>
-#include <gtsam/base/utilities.h>
-#include <gtsam/discrete/DecisionTree-inl.h>
-#include <gtsam/discrete/DecisionTree.h>
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridGaussianProductFactor.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
+#include "gtsam/base/types.h"
+#include "gtsam/base/utilities.h"
+#include "gtsam/discrete/DecisionTree-inl.h"
+#include "gtsam/discrete/DecisionTree.h"
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridGaussianProductFactor.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridGaussianFactor.h b/gtsam/hybrid/HybridGaussianFactor.h
index 6d10646..b55ef6e 100644
--- a/gtsam/hybrid/HybridGaussianFactor.h
+++ b/gtsam/hybrid/HybridGaussianFactor.h
@@ -20,13 +20,13 @@
 
 #pragma once
 
-#include <gtsam/discrete/AlgebraicDecisionTree.h>
-#include <gtsam/discrete/DecisionTree.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/hybrid/HybridGaussianProductFactor.h>
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
+#include "gtsam/discrete/AlgebraicDecisionTree.h"
+#include "gtsam/discrete/DecisionTree.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/hybrid/HybridGaussianProductFactor.h"
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridGaussianFactorGraph.cpp b/gtsam/hybrid/HybridGaussianFactorGraph.cpp
index 8832cbb..39410a2 100644
--- a/gtsam/hybrid/HybridGaussianFactorGraph.cpp
+++ b/gtsam/hybrid/HybridGaussianFactorGraph.cpp
@@ -18,29 +18,29 @@
  * @date   Mar 11, 2022
  */
 
-#include <gtsam/base/utilities.h>
-#include <gtsam/discrete/Assignment.h>
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteEliminationTree.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteJunctionTree.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridConditional.h>
-#include <gtsam/hybrid/HybridEliminationTree.h>
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridJunctionTree.h>
-#include <gtsam/inference/EliminateableFactorGraph-inst.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/GaussianEliminationTree.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianJunctionTree.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/linear/JacobianFactor.h>
+#include "gtsam/base/utilities.h"
+#include "gtsam/discrete/Assignment.h"
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteEliminationTree.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteJunctionTree.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridConditional.h"
+#include "gtsam/hybrid/HybridEliminationTree.h"
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridJunctionTree.h"
+#include "gtsam/inference/EliminateableFactorGraph-inst.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/GaussianEliminationTree.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianJunctionTree.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/linear/JacobianFactor.h"
 
 #include <cstddef>
 #include <iostream>

diff --git a/gtsam/hybrid/HybridGaussianFactorGraph.h b/gtsam/hybrid/HybridGaussianFactorGraph.h
index e3c1e2d..0302ca9 100644
--- a/gtsam/hybrid/HybridGaussianFactorGraph.h
+++ b/gtsam/hybrid/HybridGaussianFactorGraph.h
@@ -18,16 +18,16 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/hybrid/HybridFactorGraph.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/inference/EliminateableFactorGraph.h>
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/hybrid/HybridFactorGraph.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/inference/EliminateableFactorGraph.h"
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/VectorValues.h"
 
 #include <functional>
 #include <optional>

diff --git a/gtsam/hybrid/HybridGaussianISAM.cpp b/gtsam/hybrid/HybridGaussianISAM.cpp
index 28116df..5b22193 100644
--- a/gtsam/hybrid/HybridGaussianISAM.cpp
+++ b/gtsam/hybrid/HybridGaussianISAM.cpp
@@ -17,12 +17,12 @@
  * @author Varun Agrawal
  */
 
-#include <gtsam/base/treeTraversal-inst.h>
-#include <gtsam/hybrid/HybridBayesTree.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridGaussianISAM.h>
-#include <gtsam/inference/ISAM-inst.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/base/treeTraversal-inst.h"
+#include "gtsam/hybrid/HybridBayesTree.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridGaussianISAM.h"
+#include "gtsam/inference/ISAM-inst.h"
+#include "gtsam/inference/Key.h"
 
 #include <iterator>
 

diff --git a/gtsam/hybrid/HybridGaussianISAM.h b/gtsam/hybrid/HybridGaussianISAM.h
index ba2de52..eda0b27 100644
--- a/gtsam/hybrid/HybridGaussianISAM.h
+++ b/gtsam/hybrid/HybridGaussianISAM.h
@@ -19,10 +19,10 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/hybrid/HybridBayesTree.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/inference/ISAM.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/hybrid/HybridBayesTree.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/inference/ISAM.h"
 
 #include <optional>
 

diff --git a/gtsam/hybrid/HybridGaussianProductFactor.cpp b/gtsam/hybrid/HybridGaussianProductFactor.cpp
index 280059f..9bfb367 100644
--- a/gtsam/hybrid/HybridGaussianProductFactor.cpp
+++ b/gtsam/hybrid/HybridGaussianProductFactor.cpp
@@ -16,11 +16,11 @@
  *  @author Varun Agrawal
  */
 
-#include <gtsam/base/types.h>
-#include <gtsam/discrete/DecisionTree.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridGaussianProductFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
+#include "gtsam/base/types.h"
+#include "gtsam/discrete/DecisionTree.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridGaussianProductFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
 
 #include <string>
 

diff --git a/gtsam/hybrid/HybridGaussianProductFactor.h b/gtsam/hybrid/HybridGaussianProductFactor.h
index 60a58a3..08c7bfc 100644
--- a/gtsam/hybrid/HybridGaussianProductFactor.h
+++ b/gtsam/hybrid/HybridGaussianProductFactor.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/discrete/DecisionTree.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
+#include "gtsam/discrete/DecisionTree.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
 
 #include <iostream>
 

diff --git a/gtsam/hybrid/HybridJunctionTree.cpp b/gtsam/hybrid/HybridJunctionTree.cpp
index b9bdcbe..8dab497 100644
--- a/gtsam/hybrid/HybridJunctionTree.cpp
+++ b/gtsam/hybrid/HybridJunctionTree.cpp
@@ -15,11 +15,11 @@
  * @author Fan Jiang
  */
 
-#include <gtsam/hybrid/HybridEliminationTree.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridJunctionTree.h>
-#include <gtsam/inference/JunctionTree-inst.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/hybrid/HybridEliminationTree.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridJunctionTree.h"
+#include "gtsam/inference/JunctionTree-inst.h"
+#include "gtsam/inference/Key.h"
 
 #include <unordered_map>
 #include <cassert>

diff --git a/gtsam/hybrid/HybridJunctionTree.h b/gtsam/hybrid/HybridJunctionTree.h
index 17b4649..377ac0c 100644
--- a/gtsam/hybrid/HybridJunctionTree.h
+++ b/gtsam/hybrid/HybridJunctionTree.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/hybrid/HybridBayesTree.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/inference/JunctionTree.h>
+#include "gtsam/hybrid/HybridBayesTree.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/inference/JunctionTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridNonlinearFactor.cpp b/gtsam/hybrid/HybridNonlinearFactor.cpp
index 376bc66..6fb33b8 100644
--- a/gtsam/hybrid/HybridNonlinearFactor.cpp
+++ b/gtsam/hybrid/HybridNonlinearFactor.cpp
@@ -16,10 +16,10 @@
  * @date   Sep 12, 2024
  */
 
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/hybrid/HybridNonlinearFactor.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/hybrid/HybridNonlinearFactor.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 #include <memory>
 

diff --git a/gtsam/hybrid/HybridNonlinearFactor.h b/gtsam/hybrid/HybridNonlinearFactor.h
index e264b1d..05d5096 100644
--- a/gtsam/hybrid/HybridNonlinearFactor.h
+++ b/gtsam/hybrid/HybridNonlinearFactor.h
@@ -19,12 +19,12 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Symbol.h>
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Symbol.h"
 
 #include <vector>
 

diff --git a/gtsam/hybrid/HybridNonlinearFactorGraph.cpp b/gtsam/hybrid/HybridNonlinearFactorGraph.cpp
index 2f5031c..49839d8 100644
--- a/gtsam/hybrid/HybridNonlinearFactorGraph.cpp
+++ b/gtsam/hybrid/HybridNonlinearFactorGraph.cpp
@@ -16,13 +16,13 @@
  * @date   May 28, 2022
  */
 
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/TableFactor.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridNonlinearFactor.h>
-#include <gtsam/hybrid/HybridNonlinearFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/TableFactor.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridNonlinearFactor.h"
+#include "gtsam/hybrid/HybridNonlinearFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridNonlinearFactorGraph.h b/gtsam/hybrid/HybridNonlinearFactorGraph.h
index f79f7b4..9515157 100644
--- a/gtsam/hybrid/HybridNonlinearFactorGraph.h
+++ b/gtsam/hybrid/HybridNonlinearFactorGraph.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/hybrid/HybridFactorGraph.h>
+#include "gtsam/hybrid/HybridFactorGraph.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridNonlinearISAM.cpp b/gtsam/hybrid/HybridNonlinearISAM.cpp
index 29e467d..9734243 100644
--- a/gtsam/hybrid/HybridNonlinearISAM.cpp
+++ b/gtsam/hybrid/HybridNonlinearISAM.cpp
@@ -15,10 +15,10 @@
  * @author Varun Agrawal
  */
 
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridNonlinearFactor.h>
-#include <gtsam/hybrid/HybridNonlinearISAM.h>
-#include <gtsam/inference/Ordering.h>
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridNonlinearFactor.h"
+#include "gtsam/hybrid/HybridNonlinearISAM.h"
+#include "gtsam/inference/Ordering.h"
 
 #include <iostream>
 

diff --git a/gtsam/hybrid/HybridNonlinearISAM.h b/gtsam/hybrid/HybridNonlinearISAM.h
index 686a083..8becc6c 100644
--- a/gtsam/hybrid/HybridNonlinearISAM.h
+++ b/gtsam/hybrid/HybridNonlinearISAM.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/hybrid/HybridGaussianISAM.h>
-#include <gtsam/hybrid/HybridNonlinearFactorGraph.h>
+#include "gtsam/hybrid/HybridGaussianISAM.h"
+#include "gtsam/hybrid/HybridNonlinearFactorGraph.h"
 
 #include <optional>
 

diff --git a/gtsam/hybrid/HybridSmoother.cpp b/gtsam/hybrid/HybridSmoother.cpp
index ca3e272..5409ed1 100644
--- a/gtsam/hybrid/HybridSmoother.cpp
+++ b/gtsam/hybrid/HybridSmoother.cpp
@@ -16,7 +16,7 @@
  * @date    October 2022
  */
 
-#include <gtsam/hybrid/HybridSmoother.h>
+#include "gtsam/hybrid/HybridSmoother.h"
 
 #include <algorithm>
 #include <unordered_set>

diff --git a/gtsam/hybrid/HybridSmoother.h b/gtsam/hybrid/HybridSmoother.h
index 66edf86..0659d7d 100644
--- a/gtsam/hybrid/HybridSmoother.h
+++ b/gtsam/hybrid/HybridSmoother.h
@@ -16,9 +16,9 @@
  * @date    October 2022
  */
 
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
 
 #include <optional>
 

diff --git a/gtsam/hybrid/HybridValues.cpp b/gtsam/hybrid/HybridValues.cpp
index 533cd6e..c9b8b12 100644
--- a/gtsam/hybrid/HybridValues.cpp
+++ b/gtsam/hybrid/HybridValues.cpp
@@ -15,11 +15,11 @@
  * @date    August 2024
  */
 
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/Values.h"
 
 namespace gtsam {
 

diff --git a/gtsam/hybrid/HybridValues.h b/gtsam/hybrid/HybridValues.h
index 07ff3e9..5c6fc9f 100644
--- a/gtsam/hybrid/HybridValues.h
+++ b/gtsam/hybrid/HybridValues.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/Values.h"
 
 #include <map>
 #include <string>

diff --git a/gtsam/hybrid/tests/Switching.h b/gtsam/hybrid/tests/Switching.h
index 1e3510f..1719ab3 100644
--- a/gtsam/hybrid/tests/Switching.h
+++ b/gtsam/hybrid/tests/Switching.h
@@ -16,21 +16,21 @@
  *  @author Fan Jiang
  */
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridNonlinearFactor.h>
-#include <gtsam/hybrid/HybridNonlinearFactorGraph.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridNonlinearFactor.h"
+#include "gtsam/hybrid/HybridNonlinearFactorGraph.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 #include <vector>
 

diff --git a/gtsam/hybrid/tests/TinyHybridExample.h b/gtsam/hybrid/tests/TinyHybridExample.h
index 1862e8a..c2c2357 100644
--- a/gtsam/hybrid/tests/TinyHybridExample.h
+++ b/gtsam/hybrid/tests/TinyHybridExample.h
@@ -15,9 +15,9 @@
  *  @author Frank Dellaert
  */
 
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/inference/Symbol.h"
 #pragma once
 
 namespace gtsam {

diff --git a/gtsam/hybrid/tests/testGaussianMixture.cpp b/gtsam/hybrid/tests/testGaussianMixture.cpp
index 14bef5f..34a3ecf 100644
--- a/gtsam/hybrid/tests/testGaussianMixture.cpp
+++ b/gtsam/hybrid/tests/testGaussianMixture.cpp
@@ -17,19 +17,19 @@
  * @date    September 2024
  */
 
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/NoiseModel.h>
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/NoiseModel.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 using symbol_shorthand::M;

diff --git a/gtsam/hybrid/tests/testHybridBayesNet.cpp b/gtsam/hybrid/tests/testHybridBayesNet.cpp
index 135da5d..26d715d 100644
--- a/gtsam/hybrid/tests/testHybridBayesNet.cpp
+++ b/gtsam/hybrid/tests/testHybridBayesNet.cpp
@@ -18,19 +18,19 @@
  * @date    December 2021
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/discrete/DiscreteFactor.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridBayesTree.h>
-#include <gtsam/hybrid/HybridConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/discrete/DiscreteFactor.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridBayesTree.h"
+#include "gtsam/hybrid/HybridConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 #include "Switching.h"
 #include "TinyHybridExample.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <memory>
 

diff --git a/gtsam/hybrid/tests/testHybridBayesTree.cpp b/gtsam/hybrid/tests/testHybridBayesTree.cpp
index 7381761..c1447fb 100644
--- a/gtsam/hybrid/tests/testHybridBayesTree.cpp
+++ b/gtsam/hybrid/tests/testHybridBayesTree.cpp
@@ -16,18 +16,18 @@
  * @date    August 2022
  */
 
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/hybrid/HybridBayesTree.h>
-#include <gtsam/hybrid/HybridGaussianISAM.h>
-#include <gtsam/inference/DotWriter.h>
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/hybrid/HybridBayesTree.h"
+#include "gtsam/hybrid/HybridGaussianISAM.h"
+#include "gtsam/inference/DotWriter.h"
 
 #include <numeric>
 
 #include "Switching.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/hybrid/tests/testHybridConditional.cpp b/gtsam/hybrid/tests/testHybridConditional.cpp
index 365dde3..e410b21 100644
--- a/gtsam/hybrid/tests/testHybridConditional.cpp
+++ b/gtsam/hybrid/tests/testHybridConditional.cpp
@@ -15,12 +15,12 @@
  * @date    January 2023
  */
 
-#include <gtsam/hybrid/HybridConditional.h>
+#include "gtsam/hybrid/HybridConditional.h"
 
 #include "TinyHybridExample.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/hybrid/tests/testHybridEstimation.cpp b/gtsam/hybrid/tests/testHybridEstimation.cpp
index 5b27e2b..bda70b7 100644
--- a/gtsam/hybrid/tests/testHybridEstimation.cpp
+++ b/gtsam/hybrid/tests/testHybridEstimation.cpp
@@ -15,27 +15,27 @@
  * @author  Varun Agrawal
  */
 
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridNonlinearFactor.h>
-#include <gtsam/hybrid/HybridNonlinearFactorGraph.h>
-#include <gtsam/hybrid/HybridNonlinearISAM.h>
-#include <gtsam/hybrid/HybridSmoother.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridNonlinearFactor.h"
+#include "gtsam/hybrid/HybridNonlinearFactorGraph.h"
+#include "gtsam/hybrid/HybridNonlinearISAM.h"
+#include "gtsam/hybrid/HybridSmoother.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <string>
 

diff --git a/gtsam/hybrid/tests/testHybridFactorGraph.cpp b/gtsam/hybrid/tests/testHybridFactorGraph.cpp
index c6020de..11cb29d 100644
--- a/gtsam/hybrid/tests/testHybridFactorGraph.cpp
+++ b/gtsam/hybrid/tests/testHybridFactorGraph.cpp
@@ -13,15 +13,15 @@
  * @date    May 2021
  */
 
-#include <CppUnitLite/Test.h>
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/utilities.h>
-#include <gtsam/hybrid/HybridFactorGraph.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/nonlinear/PriorFactor.h>
+#include "CppUnitLite/Test.h"
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/utilities.h"
+#include "gtsam/hybrid/HybridFactorGraph.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/nonlinear/PriorFactor.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/hybrid/tests/testHybridGaussianConditional.cpp b/gtsam/hybrid/tests/testHybridGaussianConditional.cpp
index 350bc91..1eb9026 100644
--- a/gtsam/hybrid/tests/testHybridGaussianConditional.cpp
+++ b/gtsam/hybrid/tests/testHybridGaussianConditional.cpp
@@ -18,20 +18,20 @@
  * @date    December 2021
  */
 
-#include <gtsam/discrete/DecisionTree.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianConditional.h>
+#include "gtsam/discrete/DecisionTree.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianConditional.h"
 
 #include <memory>
 #include <vector>
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 using symbol_shorthand::M;

diff --git a/gtsam/hybrid/tests/testHybridGaussianFactor.cpp b/gtsam/hybrid/tests/testHybridGaussianFactor.cpp
index 9642796..af3c824 100644
--- a/gtsam/hybrid/tests/testHybridGaussianFactor.cpp
+++ b/gtsam/hybrid/tests/testHybridGaussianFactor.cpp
@@ -18,23 +18,23 @@
  * @date    December 2021
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <memory>
 

diff --git a/gtsam/hybrid/tests/testHybridGaussianFactorGraph.cpp b/gtsam/hybrid/tests/testHybridGaussianFactorGraph.cpp
index 31e3610..6f2fdbc 100644
--- a/gtsam/hybrid/tests/testHybridGaussianFactorGraph.cpp
+++ b/gtsam/hybrid/tests/testHybridGaussianFactorGraph.cpp
@@ -17,27 +17,27 @@
  *  @author Frank Dellaert
  */
 
-#include <CppUnitLite/Test.h>
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/discrete/DecisionTreeFactor.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridConditional.h>
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridGaussianProductFactor.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/inference/BayesNet.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/JacobianFactor.h>
+#include "CppUnitLite/Test.h"
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/discrete/DecisionTreeFactor.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridConditional.h"
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridGaussianProductFactor.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/inference/BayesNet.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/JacobianFactor.h"
 
 #include <cstddef>
 #include <memory>

diff --git a/gtsam/hybrid/tests/testHybridGaussianISAM.cpp b/gtsam/hybrid/tests/testHybridGaussianISAM.cpp
index 04b44f9..bee770f 100644
--- a/gtsam/hybrid/tests/testHybridGaussianISAM.cpp
+++ b/gtsam/hybrid/tests/testHybridGaussianISAM.cpp
@@ -16,21 +16,21 @@
  * @date    Jan 2021
  */
 
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/hybrid/HybridConditional.h>
-#include <gtsam/hybrid/HybridGaussianISAM.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/hybrid/HybridConditional.h"
+#include "gtsam/hybrid/HybridGaussianISAM.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
 
 #include "Switching.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/hybrid/tests/testHybridGaussianProductFactor.cpp b/gtsam/hybrid/tests/testHybridGaussianProductFactor.cpp
index f1920fa..7e71829 100644
--- a/gtsam/hybrid/tests/testHybridGaussianProductFactor.cpp
+++ b/gtsam/hybrid/tests/testHybridGaussianProductFactor.cpp
@@ -16,17 +16,17 @@
  * @date    October 2024
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridGaussianProductFactor.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/JacobianFactor.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridGaussianProductFactor.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/JacobianFactor.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <memory>
 

diff --git a/gtsam/hybrid/tests/testHybridMotionModel.cpp b/gtsam/hybrid/tests/testHybridMotionModel.cpp
index 747a1b6..d3b8a40 100644
--- a/gtsam/hybrid/tests/testHybridMotionModel.cpp
+++ b/gtsam/hybrid/tests/testHybridMotionModel.cpp
@@ -18,23 +18,23 @@
  * @date    December 2021
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <memory>
 

diff --git a/gtsam/hybrid/tests/testHybridNonlinearFactor.cpp b/gtsam/hybrid/tests/testHybridNonlinearFactor.cpp
index 2b441ab..4e95df0 100644
--- a/gtsam/hybrid/tests/testHybridNonlinearFactor.cpp
+++ b/gtsam/hybrid/tests/testHybridNonlinearFactor.cpp
@@ -16,17 +16,17 @@
  * @date    October 2022
  */
 
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridGaussianFactorGraph.h>
-#include <gtsam/hybrid/HybridNonlinearFactor.h>
-#include <gtsam/hybrid/HybridNonlinearFactorGraph.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridGaussianFactorGraph.h"
+#include "gtsam/hybrid/HybridNonlinearFactor.h"
+#include "gtsam/hybrid/HybridNonlinearFactorGraph.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/hybrid/tests/testHybridNonlinearFactorGraph.cpp b/gtsam/hybrid/tests/testHybridNonlinearFactorGraph.cpp
index 07f70e9..d6076cd 100644
--- a/gtsam/hybrid/tests/testHybridNonlinearFactorGraph.cpp
+++ b/gtsam/hybrid/tests/testHybridNonlinearFactorGraph.cpp
@@ -15,28 +15,28 @@
  * @date    December 2021
  */
 
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/utilities.h>
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/hybrid/HybridEliminationTree.h>
-#include <gtsam/hybrid/HybridFactor.h>
-#include <gtsam/hybrid/HybridNonlinearFactor.h>
-#include <gtsam/hybrid/HybridNonlinearFactorGraph.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/utilities.h"
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/hybrid/HybridEliminationTree.h"
+#include "gtsam/hybrid/HybridFactor.h"
+#include "gtsam/hybrid/HybridNonlinearFactor.h"
+#include "gtsam/hybrid/HybridNonlinearFactorGraph.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 #include "Switching.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/hybrid/tests/testHybridNonlinearISAM.cpp b/gtsam/hybrid/tests/testHybridNonlinearISAM.cpp
index 67cec83..d276e47 100644
--- a/gtsam/hybrid/tests/testHybridNonlinearISAM.cpp
+++ b/gtsam/hybrid/tests/testHybridNonlinearISAM.cpp
@@ -16,23 +16,23 @@
  * @date    Jan 2021
  */
 
-#include <gtsam/discrete/DiscreteBayesNet.h>
-#include <gtsam/discrete/DiscreteDistribution.h>
-#include <gtsam/discrete/DiscreteFactorGraph.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/hybrid/HybridConditional.h>
-#include <gtsam/hybrid/HybridNonlinearISAM.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
+#include "gtsam/discrete/DiscreteBayesNet.h"
+#include "gtsam/discrete/DiscreteDistribution.h"
+#include "gtsam/discrete/DiscreteFactorGraph.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/hybrid/HybridConditional.h"
+#include "gtsam/hybrid/HybridNonlinearISAM.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
 
 #include <numeric>
 
 #include "Switching.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/hybrid/tests/testHybridValues.cpp b/gtsam/hybrid/tests/testHybridValues.cpp
index 02e1cb7..4246af4 100644
--- a/gtsam/hybrid/tests/testHybridValues.cpp
+++ b/gtsam/hybrid/tests/testHybridValues.cpp
@@ -15,19 +15,19 @@
  *  @author Shangjie Xue
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/discrete/Assignment.h>
-#include <gtsam/discrete/DiscreteKey.h>
-#include <gtsam/discrete/DiscreteValues.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/discrete/Assignment.h"
+#include "gtsam/discrete/DiscreteKey.h"
+#include "gtsam/discrete/DiscreteValues.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/Values.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/hybrid/tests/testSerializationHybrid.cpp b/gtsam/hybrid/tests/testSerializationHybrid.cpp
index 3be96b7..073fc11 100644
--- a/gtsam/hybrid/tests/testSerializationHybrid.cpp
+++ b/gtsam/hybrid/tests/testSerializationHybrid.cpp
@@ -16,20 +16,20 @@
  * @date    January 2023
  */
 
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/discrete/DiscreteConditional.h>
-#include <gtsam/hybrid/HybridBayesNet.h>
-#include <gtsam/hybrid/HybridBayesTree.h>
-#include <gtsam/hybrid/HybridConditional.h>
-#include <gtsam/hybrid/HybridGaussianConditional.h>
-#include <gtsam/hybrid/HybridGaussianFactor.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianConditional.h>
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/discrete/DiscreteConditional.h"
+#include "gtsam/hybrid/HybridBayesNet.h"
+#include "gtsam/hybrid/HybridBayesTree.h"
+#include "gtsam/hybrid/HybridConditional.h"
+#include "gtsam/hybrid/HybridGaussianConditional.h"
+#include "gtsam/hybrid/HybridGaussianFactor.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianConditional.h"
 
 #include "Switching.h"
 
 // Include for test suite
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/inference/BayesNet-inst.h b/gtsam/inference/BayesNet-inst.h
index a6aa0a7..63792ef 100644
--- a/gtsam/inference/BayesNet-inst.h
+++ b/gtsam/inference/BayesNet-inst.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/inference/BayesNet.h>
-#include <gtsam/inference/FactorGraph-inst.h>
+#include "gtsam/inference/BayesNet.h"
+#include "gtsam/inference/FactorGraph-inst.h"
 
 #include <fstream>
 #include <string>

diff --git a/gtsam/inference/BayesNet.h b/gtsam/inference/BayesNet.h
index 87f5ec6..b756385 100644
--- a/gtsam/inference/BayesNet.h
+++ b/gtsam/inference/BayesNet.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/inference/FactorGraph.h>
+#include "gtsam/inference/FactorGraph.h"
 
 #include <memory>
 #include <string>
@@ -104,4 +104,4 @@ class BayesNet : public FactorGraph<CONDITIONAL> {
 
 }  // namespace gtsam
 
-#include <gtsam/inference/BayesNet-inst.h>
+#include "gtsam/inference/BayesNet-inst.h"

diff --git a/gtsam/inference/BayesTree-inst.h b/gtsam/inference/BayesTree-inst.h
index fdfa94d..4a5490d 100644
--- a/gtsam/inference/BayesTree-inst.h
+++ b/gtsam/inference/BayesTree-inst.h
@@ -20,10 +20,10 @@
 
 #pragma once
 
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/BayesTree.h>
-#include <gtsam/base/treeTraversal-inst.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/BayesTree.h"
+#include "gtsam/base/treeTraversal-inst.h"
+#include "gtsam/base/timing.h"
 
 #include <fstream>
 #include <queue>

diff --git a/gtsam/inference/BayesTree.cpp b/gtsam/inference/BayesTree.cpp
index e61c5d5..5db3844 100644
--- a/gtsam/inference/BayesTree.cpp
+++ b/gtsam/inference/BayesTree.cpp
@@ -18,7 +18,7 @@
  * @author  Richard Roberts
  */
 
-#include <gtsam/inference/BayesTree.h>
+#include "gtsam/inference/BayesTree.h"
 
 #include <iostream>
 

diff --git a/gtsam/inference/BayesTree.h b/gtsam/inference/BayesTree.h
index d0ebd91..f304b2c 100644
--- a/gtsam/inference/BayesTree.h
+++ b/gtsam/inference/BayesTree.h
@@ -21,10 +21,10 @@
 
 #include <memory>
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/FastList.h>
-#include <gtsam/base/ConcurrentMap.h>
-#include <gtsam/base/FastVector.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/FastList.h"
+#include "gtsam/base/ConcurrentMap.h"
+#include "gtsam/base/FastVector.h"
 
 #include <string>
 

diff --git a/gtsam/inference/BayesTreeCliqueBase-inst.h b/gtsam/inference/BayesTreeCliqueBase-inst.h
index a91fa4f..7d89ebd 100644
--- a/gtsam/inference/BayesTreeCliqueBase-inst.h
+++ b/gtsam/inference/BayesTreeCliqueBase-inst.h
@@ -16,9 +16,9 @@
 
 #pragma once
 
-#include <gtsam/inference/BayesTreeCliqueBase.h>
-#include <gtsam/inference/FactorGraph-inst.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/inference/BayesTreeCliqueBase.h"
+#include "gtsam/inference/FactorGraph-inst.h"
+#include "gtsam/base/timing.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/BayesTreeCliqueBase.h b/gtsam/inference/BayesTreeCliqueBase.h
index adffa2f..55ca5d7 100644
--- a/gtsam/inference/BayesTreeCliqueBase.h
+++ b/gtsam/inference/BayesTreeCliqueBase.h
@@ -17,10 +17,10 @@
 
 #pragma once
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/types.h>
-#include <gtsam/base/FastVector.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/types.h"
+#include "gtsam/base/FastVector.h"
 
 #include <string>
 #include <mutex>

diff --git a/gtsam/inference/ClusterTree-inst.h b/gtsam/inference/ClusterTree-inst.h
index 2a5f0b4..a8690b6 100644
--- a/gtsam/inference/ClusterTree-inst.h
+++ b/gtsam/inference/ClusterTree-inst.h
@@ -9,11 +9,11 @@
 
 #pragma once
 
-#include <gtsam/inference/ClusterTree.h>
-#include <gtsam/inference/BayesTree.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/base/treeTraversal-inst.h>
+#include "gtsam/inference/ClusterTree.h"
+#include "gtsam/inference/BayesTree.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/base/treeTraversal-inst.h"
 
 #ifdef GTSAM_USE_TBB
 #include <mutex>

diff --git a/gtsam/inference/ClusterTree.h b/gtsam/inference/ClusterTree.h
index 43859f3..2868dd6 100644
--- a/gtsam/inference/ClusterTree.h
+++ b/gtsam/inference/ClusterTree.h
@@ -9,9 +9,9 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/FastVector.h>
-#include <gtsam/inference/Ordering.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/FastVector.h"
+#include "gtsam/inference/Ordering.h"
 
 namespace gtsam {
 
@@ -251,4 +251,4 @@ class EliminatableClusterTree : public ClusterTree<GRAPH> {
 };
 }
 
-#include <gtsam/inference/ClusterTree-inst.h>
+#include "gtsam/inference/ClusterTree-inst.h"

diff --git a/gtsam/inference/Conditional-inst.h b/gtsam/inference/Conditional-inst.h
index c21a75d..1c96de5 100644
--- a/gtsam/inference/Conditional-inst.h
+++ b/gtsam/inference/Conditional-inst.h
@@ -18,7 +18,7 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/inference/Conditional.h>
+#include "gtsam/inference/Conditional.h"
 
 #include <cmath>
 #include <iostream>

diff --git a/gtsam/inference/Conditional.h b/gtsam/inference/Conditional.h
index f9da36b..62e0b05 100644
--- a/gtsam/inference/Conditional.h
+++ b/gtsam/inference/Conditional.h
@@ -18,7 +18,7 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/inference/Key.h>
+#include "gtsam/inference/Key.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/DotWriter.cpp b/gtsam/inference/DotWriter.cpp
index 8047c28..597d7c1 100644
--- a/gtsam/inference/DotWriter.cpp
+++ b/gtsam/inference/DotWriter.cpp
@@ -16,10 +16,10 @@
  * @date December, 2021
  */
 
-#include <gtsam/inference/DotWriter.h>
+#include "gtsam/inference/DotWriter.h"
 
-#include <gtsam/base/Vector.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/base/Vector.h"
+#include "gtsam/inference/Symbol.h"
 
 #include <ostream>
 

diff --git a/gtsam/inference/DotWriter.h b/gtsam/inference/DotWriter.h
index ff20f5f..ddfb0d2 100644
--- a/gtsam/inference/DotWriter.h
+++ b/gtsam/inference/DotWriter.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/base/FastVector.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/base/FastVector.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/inference/Key.h"
 
 #include <iosfwd>
 #include <map>

diff --git a/gtsam/inference/EdgeKey.cpp b/gtsam/inference/EdgeKey.cpp
index f8caf8c..c0d023c 100644
--- a/gtsam/inference/EdgeKey.cpp
+++ b/gtsam/inference/EdgeKey.cpp
@@ -16,7 +16,7 @@
  * @author: Akshay Krishnan
  */
 
-#include <gtsam/inference/EdgeKey.h>
+#include "gtsam/inference/EdgeKey.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/EdgeKey.h b/gtsam/inference/EdgeKey.h
index 3d95e4c..b0cded1 100644
--- a/gtsam/inference/EdgeKey.h
+++ b/gtsam/inference/EdgeKey.h
@@ -18,8 +18,8 @@
  * @author: Akshay Krishnan
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/inference/Key.h"
 
 namespace gtsam {
 class GTSAM_EXPORT EdgeKey {

diff --git a/gtsam/inference/EliminateableFactorGraph-inst.h b/gtsam/inference/EliminateableFactorGraph-inst.h
index f6b11f7..898cb02 100644
--- a/gtsam/inference/EliminateableFactorGraph-inst.h
+++ b/gtsam/inference/EliminateableFactorGraph-inst.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/inference/EliminateableFactorGraph.h>
-#include <gtsam/inference/inferenceExceptions.h>
+#include "gtsam/inference/EliminateableFactorGraph.h"
+#include "gtsam/inference/inferenceExceptions.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/EliminateableFactorGraph.h b/gtsam/inference/EliminateableFactorGraph.h
index 52e1479..21b6107 100644
--- a/gtsam/inference/EliminateableFactorGraph.h
+++ b/gtsam/inference/EliminateableFactorGraph.h
@@ -23,8 +23,8 @@
 #include <functional>
 #include <optional>
 
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/VariableIndex.h>
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/VariableIndex.h"
 
 namespace gtsam {
   /// Traits class for eliminateable factor graphs, specifies the types that result from

diff --git a/gtsam/inference/EliminationTree-inst.h b/gtsam/inference/EliminationTree-inst.h
index 16449d0..db3d8ba 100644
--- a/gtsam/inference/EliminationTree-inst.h
+++ b/gtsam/inference/EliminationTree-inst.h
@@ -21,12 +21,12 @@
 #include <queue>
 #include <cassert>
 
-#include <gtsam/base/timing.h>
-#include <gtsam/base/treeTraversal-inst.h>
-#include <gtsam/inference/EliminationTree.h>
-#include <gtsam/inference/VariableIndex.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/inference-inst.h>
+#include "gtsam/base/timing.h"
+#include "gtsam/base/treeTraversal-inst.h"
+#include "gtsam/inference/EliminationTree.h"
+#include "gtsam/inference/VariableIndex.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/inference-inst.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/EliminationTree.h b/gtsam/inference/EliminationTree.h
index 724c686..93559df 100644
--- a/gtsam/inference/EliminationTree.h
+++ b/gtsam/inference/EliminationTree.h
@@ -20,8 +20,8 @@
 #include <utility>
 #include <memory>
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/FastVector.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/FastVector.h"
 
 class EliminationTreeTester; // for unit tests, see testEliminationTree
 

diff --git a/gtsam/inference/Factor.cpp b/gtsam/inference/Factor.cpp
index 2590d7b..dad9d2f 100644
--- a/gtsam/inference/Factor.cpp
+++ b/gtsam/inference/Factor.cpp
@@ -21,7 +21,7 @@
 
 #include <iostream>
 
-#include <gtsam/inference/Factor.h>
+#include "gtsam/inference/Factor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/Factor.h b/gtsam/inference/Factor.h
index 074151e..b6d1aa7 100644
--- a/gtsam/inference/Factor.h
+++ b/gtsam/inference/Factor.h
@@ -24,9 +24,9 @@
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>
 #endif
-#include <gtsam/base/FastVector.h>
-#include <gtsam/base/types.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/base/FastVector.h"
+#include "gtsam/base/types.h"
+#include "gtsam/inference/Key.h"
 
 #include <algorithm>
 #include <memory>

diff --git a/gtsam/inference/FactorGraph-inst.h b/gtsam/inference/FactorGraph-inst.h
index 8460bbe..325b8d2 100644
--- a/gtsam/inference/FactorGraph-inst.h
+++ b/gtsam/inference/FactorGraph-inst.h
@@ -21,7 +21,7 @@
 
 #pragma once
 
-#include <gtsam/inference/FactorGraph.h>
+#include "gtsam/inference/FactorGraph.h"
 
 #include <stdio.h>
 #include <algorithm>

diff --git a/gtsam/inference/FactorGraph.h b/gtsam/inference/FactorGraph.h
index b6046d0..e340307 100644
--- a/gtsam/inference/FactorGraph.h
+++ b/gtsam/inference/FactorGraph.h
@@ -22,10 +22,10 @@
 
 #pragma once
 
-#include <gtsam/inference/DotWriter.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/FastVector.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/inference/DotWriter.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/FastVector.h"
+#include "gtsam/base/Testable.h"
 
 #include <Eigen/Core>  // for Eigen::aligned_allocator
 
@@ -433,4 +433,4 @@ class FactorGraph {
 };  // FactorGraph
 }  // namespace gtsam
 
-#include <gtsam/inference/FactorGraph-inst.h>
+#include "gtsam/inference/FactorGraph-inst.h"

diff --git a/gtsam/inference/ISAM-inst.h b/gtsam/inference/ISAM-inst.h
index dc0750b..f6639c6 100644
--- a/gtsam/inference/ISAM-inst.h
+++ b/gtsam/inference/ISAM-inst.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/inference/ISAM.h>
-#include <gtsam/inference/VariableIndex.h>
+#include "gtsam/inference/ISAM.h"
+#include "gtsam/inference/VariableIndex.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/ISAM.h b/gtsam/inference/ISAM.h
index b4a5db7..002013d 100644
--- a/gtsam/inference/ISAM.h
+++ b/gtsam/inference/ISAM.h
@@ -18,7 +18,7 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/global_includes.h>
+#include "gtsam/global_includes.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/JunctionTree-inst.h b/gtsam/inference/JunctionTree-inst.h
index 6a8d691..3dab7ec 100644
--- a/gtsam/inference/JunctionTree-inst.h
+++ b/gtsam/inference/JunctionTree-inst.h
@@ -20,10 +20,10 @@
 
 #pragma once
 
-#include <gtsam/inference/JunctionTree.h>
-#include <gtsam/inference/ClusterTree-inst.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
-#include <gtsam/symbolic/SymbolicFactor-inst.h>
+#include "gtsam/inference/JunctionTree.h"
+#include "gtsam/inference/ClusterTree-inst.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
+#include "gtsam/symbolic/SymbolicFactor-inst.h"
 
 #include <cassert>
 

diff --git a/gtsam/inference/JunctionTree.h b/gtsam/inference/JunctionTree.h
index 351d6ae..c616beb 100644
--- a/gtsam/inference/JunctionTree.h
+++ b/gtsam/inference/JunctionTree.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include <gtsam/inference/ClusterTree.h>
+#include "gtsam/inference/ClusterTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/Key.cpp b/gtsam/inference/Key.cpp
index 15d633e..6eccab0 100644
--- a/gtsam/inference/Key.cpp
+++ b/gtsam/inference/Key.cpp
@@ -17,8 +17,8 @@
  * @date Feb 20, 2012
  */
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/LabeledSymbol.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/LabeledSymbol.h"
 
 #include <iostream>
 

diff --git a/gtsam/inference/Key.h b/gtsam/inference/Key.h
index a02d018..6f1a443 100644
--- a/gtsam/inference/Key.h
+++ b/gtsam/inference/Key.h
@@ -17,13 +17,13 @@
  */
 #pragma once
 
-#include <gtsam/base/FastList.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/FastSet.h>
-#include <gtsam/base/FastVector.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/types.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/base/FastList.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/FastSet.h"
+#include "gtsam/base/FastVector.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/types.h"
+#include "gtsam/dllexport.h"
 
 #include <functional>
 

diff --git a/gtsam/inference/LabeledSymbol.cpp b/gtsam/inference/LabeledSymbol.cpp
index 26c30a3..53f1d43 100644
--- a/gtsam/inference/LabeledSymbol.cpp
+++ b/gtsam/inference/LabeledSymbol.cpp
@@ -15,7 +15,7 @@
  * @author: Alex Cunningham
  */
 
-#include <gtsam/inference/LabeledSymbol.h>
+#include "gtsam/inference/LabeledSymbol.h"
 
 #include <iostream>
 #include <limits>

diff --git a/gtsam/inference/LabeledSymbol.h b/gtsam/inference/LabeledSymbol.h
index 927fb76..369a163 100644
--- a/gtsam/inference/LabeledSymbol.h
+++ b/gtsam/inference/LabeledSymbol.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/inference/Symbol.h"
 
 #include <functional>
 

diff --git a/gtsam/inference/MetisIndex.h b/gtsam/inference/MetisIndex.h
index e051b9a..6ad5af3 100644
--- a/gtsam/inference/MetisIndex.h
+++ b/gtsam/inference/MetisIndex.h
@@ -17,10 +17,10 @@
 #pragma once
 
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/base/types.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/base/types.h"
+#include "gtsam/base/timing.h"
 
 #include <vector>
 #include <map>
@@ -105,4 +105,4 @@ public:
 
 } // \ namesace gtsam
 
-#include <gtsam/inference/MetisIndex-inl.h>
+#include "gtsam/inference/MetisIndex-inl.h"

diff --git a/gtsam/inference/Ordering.cpp b/gtsam/inference/Ordering.cpp
index 95eb17a..694047d 100644
--- a/gtsam/inference/Ordering.cpp
+++ b/gtsam/inference/Ordering.cpp
@@ -20,11 +20,11 @@
 #include <limits>
 #include <cassert>
 
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/3rdparty/CCOLAMD/Include/ccolamd.h>
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/3rdparty/CCOLAMD/Include/ccolamd.h"
 
 #ifdef GTSAM_SUPPORT_NESTED_DISSECTION
-#include <metis.h>
+#include "metis.h"
 #endif
 
 using namespace std;

diff --git a/gtsam/inference/Ordering.h b/gtsam/inference/Ordering.h
index c3df1b8..6c7210e 100644
--- a/gtsam/inference/Ordering.h
+++ b/gtsam/inference/Ordering.h
@@ -20,10 +20,10 @@
 
 #pragma once
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/VariableIndex.h>
-#include <gtsam/inference/MetisIndex.h>
-#include <gtsam/base/FastSet.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/VariableIndex.h"
+#include "gtsam/inference/MetisIndex.h"
+#include "gtsam/base/FastSet.h"
 
 #include <algorithm>
 #include <vector>

diff --git a/gtsam/inference/Symbol.cpp b/gtsam/inference/Symbol.cpp
index 24af9d9..ab659db 100644
--- a/gtsam/inference/Symbol.cpp
+++ b/gtsam/inference/Symbol.cpp
@@ -16,7 +16,7 @@
  * @author: Richard Roberts
  */
 
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
 #include <limits.h>
 #include <list>

diff --git a/gtsam/inference/Symbol.h b/gtsam/inference/Symbol.h
index 9f21337..3000898 100644
--- a/gtsam/inference/Symbol.h
+++ b/gtsam/inference/Symbol.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/inference/Key.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>

diff --git a/gtsam/inference/VariableIndex-inl.h b/gtsam/inference/VariableIndex-inl.h
index adfd686..153d9b8 100644
--- a/gtsam/inference/VariableIndex-inl.h
+++ b/gtsam/inference/VariableIndex-inl.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/inference/VariableIndex.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/inference/VariableIndex.h"
+#include "gtsam/base/timing.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/VariableIndex.cpp b/gtsam/inference/VariableIndex.cpp
index 53d4002..7845f9a 100644
--- a/gtsam/inference/VariableIndex.cpp
+++ b/gtsam/inference/VariableIndex.cpp
@@ -17,7 +17,7 @@
 
 #include <iostream>
 
-#include <gtsam/inference/VariableIndex.h>
+#include "gtsam/inference/VariableIndex.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/VariableIndex.h b/gtsam/inference/VariableIndex.h
index 110c0bb..44bfd86 100644
--- a/gtsam/inference/VariableIndex.h
+++ b/gtsam/inference/VariableIndex.h
@@ -17,11 +17,11 @@
 
 #pragma once
 
-#include <gtsam/inference/Factor.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/FastVector.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/inference/Factor.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/FastVector.h"
+#include "gtsam/dllexport.h"
 
 #include <cassert>
 #include <stdexcept>
@@ -213,4 +213,4 @@ struct traits<VariableIndex> : public Testable<VariableIndex> {
 
 } //\ namespace gtsam
 
-#include <gtsam/inference/VariableIndex-inl.h>
+#include "gtsam/inference/VariableIndex-inl.h"

diff --git a/gtsam/inference/VariableSlots.cpp b/gtsam/inference/VariableSlots.cpp
index d108eae..4b3c88f 100644
--- a/gtsam/inference/VariableSlots.cpp
+++ b/gtsam/inference/VariableSlots.cpp
@@ -15,7 +15,7 @@
  * @date    Oct 5, 2010
  */
 
-#include <gtsam/inference/VariableSlots.h>
+#include "gtsam/inference/VariableSlots.h"
 
 #include <iostream>
 #include <limits>

diff --git a/gtsam/inference/VariableSlots.h b/gtsam/inference/VariableSlots.h
index edc1b18..87a8b4e 100644
--- a/gtsam/inference/VariableSlots.h
+++ b/gtsam/inference/VariableSlots.h
@@ -18,11 +18,11 @@
 
 #pragma once
 
-#include <gtsam/global_includes.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/FastVector.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/global_includes.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/FastVector.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/base/Testable.h"
 
 
 #include <iostream>

diff --git a/gtsam/inference/graph-inl.h b/gtsam/inference/graph-inl.h
index 94a2395..a67d305 100644
--- a/gtsam/inference/graph-inl.h
+++ b/gtsam/inference/graph-inl.h
@@ -29,7 +29,7 @@
 #endif
 #include <boost/graph/prim_minimum_spanning_tree.hpp>
 
-#include <gtsam/inference/graph.h>
+#include "gtsam/inference/graph.h"
 
 namespace gtsam {
 

diff --git a/gtsam/inference/graph.h b/gtsam/inference/graph.h
index 9bb1814..c7292c2 100644
--- a/gtsam/inference/graph.h
+++ b/gtsam/inference/graph.h
@@ -25,7 +25,7 @@
 #include <boost/graph/graph_traits.hpp>
 #include <boost/graph/adjacency_list.hpp>
 #include <memory>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/Values.h"
 
 namespace gtsam {
 
@@ -109,4 +109,4 @@ namespace gtsam {
 
 } // namespace gtsam
 
-#include <gtsam/inference/graph-inl.h>
+#include "gtsam/inference/graph-inl.h"

diff --git a/gtsam/inference/inference-inst.h b/gtsam/inference/inference-inst.h
index 2857088..6a03f60 100644
--- a/gtsam/inference/inference-inst.h
+++ b/gtsam/inference/inference-inst.h
@@ -21,8 +21,8 @@
 
 #include <utility>
 
-#include <gtsam/base/treeTraversal-inst.h>
-#include <gtsam/base/FastVector.h>
+#include "gtsam/base/treeTraversal-inst.h"
+#include "gtsam/base/FastVector.h"
 
 namespace gtsam {
   namespace inference {

diff --git a/gtsam/inference/inferenceExceptions.cpp b/gtsam/inference/inferenceExceptions.cpp
index 8c2a953..7d4b759 100644
--- a/gtsam/inference/inferenceExceptions.cpp
+++ b/gtsam/inference/inferenceExceptions.cpp
@@ -16,7 +16,7 @@
  * @date    Apr 25, 2013
  */
 
-#include <gtsam/inference/inferenceExceptions.h>
+#include "gtsam/inference/inferenceExceptions.h"
 
 #include <sstream>
 

diff --git a/gtsam/inference/inferenceExceptions.h b/gtsam/inference/inferenceExceptions.h
index eb5d79e..12561c9 100644
--- a/gtsam/inference/inferenceExceptions.h
+++ b/gtsam/inference/inferenceExceptions.h
@@ -17,8 +17,8 @@
  */
 #pragma once
 
-#include <gtsam/global_includes.h>
-#include <gtsam/inference/Key.h>
+#include "gtsam/global_includes.h"
+#include "gtsam/inference/Key.h"
 
 #include <exception>
 

diff --git a/gtsam/inference/tests/testEdgeKey.cpp b/gtsam/inference/tests/testEdgeKey.cpp
index 88fafbd..26ef4a5 100644
--- a/gtsam/inference/tests/testEdgeKey.cpp
+++ b/gtsam/inference/tests/testEdgeKey.cpp
@@ -16,8 +16,8 @@
  * @author: Akshay Krishnan
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/inference/EdgeKey.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/inference/EdgeKey.h"
 
 #include <sstream>
 

diff --git a/gtsam/inference/tests/testKey.cpp b/gtsam/inference/tests/testKey.cpp
index 59245a5..c163f4b 100644
--- a/gtsam/inference/tests/testKey.cpp
+++ b/gtsam/inference/tests/testKey.cpp
@@ -14,12 +14,12 @@
  * @author Alex Cunningham
  */
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <sstream>
 

diff --git a/gtsam/inference/tests/testLabeledSymbol.cpp b/gtsam/inference/tests/testLabeledSymbol.cpp
index f63b438..575d318 100644
--- a/gtsam/inference/tests/testLabeledSymbol.cpp
+++ b/gtsam/inference/tests/testLabeledSymbol.cpp
@@ -14,11 +14,11 @@
  * @author Alex Cunningham
  */
 
-#include <gtsam/inference/LabeledSymbol.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "gtsam/inference/LabeledSymbol.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/inference/tests/testOrdering.cpp b/gtsam/inference/tests/testOrdering.cpp
index b6cfcb6..ad21c31 100644
--- a/gtsam/inference/tests/testOrdering.cpp
+++ b/gtsam/inference/tests/testOrdering.cpp
@@ -15,12 +15,12 @@
  * @author Andrew Melim
  */
 
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/MetisIndex.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/MetisIndex.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/inference/tests/testSymbol.cpp b/gtsam/inference/tests/testSymbol.cpp
index af49a1e..baa5415 100644
--- a/gtsam/inference/tests/testSymbol.cpp
+++ b/gtsam/inference/tests/testSymbol.cpp
@@ -14,9 +14,9 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <sstream>
 

diff --git a/gtsam/inference/tests/testVariableSlots.cpp b/gtsam/inference/tests/testVariableSlots.cpp
index b030331..48cdc39 100644
--- a/gtsam/inference/tests/testVariableSlots.cpp
+++ b/gtsam/inference/tests/testVariableSlots.cpp
@@ -16,11 +16,11 @@
  * @date Oct 5, 2010
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
 
-#include <gtsam/inference/VariableSlots.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
+#include "gtsam/inference/VariableSlots.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
 
 using namespace gtsam;
 using namespace std;

diff --git a/gtsam/linear/AcceleratedPowerMethod.h b/gtsam/linear/AcceleratedPowerMethod.h
index 795a9f3..86f1fd5 100644
--- a/gtsam/linear/AcceleratedPowerMethod.h
+++ b/gtsam/linear/AcceleratedPowerMethod.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/linear/PowerMethod.h>
+#include "gtsam/linear/PowerMethod.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/BinaryJacobianFactor.h b/gtsam/linear/BinaryJacobianFactor.h
index 8b53c34..b5087f1 100644
--- a/gtsam/linear/BinaryJacobianFactor.h
+++ b/gtsam/linear/BinaryJacobianFactor.h
@@ -20,9 +20,9 @@
 
 #pragma once
 
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/base/SymmetricBlockMatrix.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/base/SymmetricBlockMatrix.h"
+#include "gtsam/base/timing.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/ConjugateGradientSolver.cpp b/gtsam/linear/ConjugateGradientSolver.cpp
index b2725ea..317c7fd 100644
--- a/gtsam/linear/ConjugateGradientSolver.cpp
+++ b/gtsam/linear/ConjugateGradientSolver.cpp
@@ -17,7 +17,7 @@
  *  @date   Nov 6, 2014
  */
 
-#include <gtsam/linear/ConjugateGradientSolver.h>
+#include "gtsam/linear/ConjugateGradientSolver.h"
 #include <iostream>
 
 using namespace std;

diff --git a/gtsam/linear/ConjugateGradientSolver.h b/gtsam/linear/ConjugateGradientSolver.h
index 46d49ca..1987278 100644
--- a/gtsam/linear/ConjugateGradientSolver.h
+++ b/gtsam/linear/ConjugateGradientSolver.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/linear/IterativeSolver.h>
+#include "gtsam/linear/IterativeSolver.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/Errors.cpp b/gtsam/linear/Errors.cpp
index d36b647..ce81e72 100644
--- a/gtsam/linear/Errors.cpp
+++ b/gtsam/linear/Errors.cpp
@@ -17,8 +17,8 @@
  * @author  Christian Potthast
  */
 
-#include <gtsam/linear/Errors.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/linear/Errors.h"
+#include "gtsam/linear/VectorValues.h"
 
 using namespace std;
 

diff --git a/gtsam/linear/Errors.h b/gtsam/linear/Errors.h
index faf83d4..8a23216 100644
--- a/gtsam/linear/Errors.h
+++ b/gtsam/linear/Errors.h
@@ -19,9 +19,9 @@
 
 #pragma once
 
-#include <gtsam/base/FastList.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/Vector.h>
+#include "gtsam/base/FastList.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/Vector.h"
 
 #include <string>
 

diff --git a/gtsam/linear/GaussianBayesNet.cpp b/gtsam/linear/GaussianBayesNet.cpp
index f8c4ddc..da18933 100644
--- a/gtsam/linear/GaussianBayesNet.cpp
+++ b/gtsam/linear/GaussianBayesNet.cpp
@@ -15,10 +15,10 @@
  * @author Frank Dellaert, Varun Agrawal
  */
 
-#include <gtsam/base/timing.h>
-#include <gtsam/inference/FactorGraph-inst.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
+#include "gtsam/base/timing.h"
+#include "gtsam/inference/FactorGraph-inst.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
 
 #include <fstream>
 #include <iterator>

diff --git a/gtsam/linear/GaussianBayesNet.h b/gtsam/linear/GaussianBayesNet.h
index e858bbe..0750c85 100644
--- a/gtsam/linear/GaussianBayesNet.h
+++ b/gtsam/linear/GaussianBayesNet.h
@@ -20,10 +20,10 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/inference/BayesNet.h>
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/global_includes.h>
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/inference/BayesNet.h"
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/global_includes.h"
 
 #include <utility>
 namespace gtsam {

diff --git a/gtsam/linear/GaussianBayesTree-inl.h b/gtsam/linear/GaussianBayesTree-inl.h
index e734206..79de82b 100644
--- a/gtsam/linear/GaussianBayesTree-inl.h
+++ b/gtsam/linear/GaussianBayesTree-inl.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianBayesTree.h> // Only to help Eclipse
+#include "gtsam/linear/GaussianBayesTree.h" // Only to help Eclipse
 
 #include <stdarg.h>
 

diff --git a/gtsam/linear/GaussianBayesTree.cpp b/gtsam/linear/GaussianBayesTree.cpp
index b35252e..4b64413 100644
--- a/gtsam/linear/GaussianBayesTree.cpp
+++ b/gtsam/linear/GaussianBayesTree.cpp
@@ -17,13 +17,13 @@
  * @author  Richard Roberts
  */
 
-#include <gtsam/base/treeTraversal-inst.h>
-#include <gtsam/inference/BayesTree-inst.h>
-#include <gtsam/inference/BayesTreeCliqueBase-inst.h>
-#include <gtsam/linear/linearAlgorithms-inst.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/base/treeTraversal-inst.h"
+#include "gtsam/inference/BayesTree-inst.h"
+#include "gtsam/inference/BayesTreeCliqueBase-inst.h"
+#include "gtsam/linear/linearAlgorithms-inst.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/VectorValues.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianBayesTree.h b/gtsam/linear/GaussianBayesTree.h
index 4ab0e7b..2fe48ff 100644
--- a/gtsam/linear/GaussianBayesTree.h
+++ b/gtsam/linear/GaussianBayesTree.h
@@ -19,10 +19,10 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/inference/BayesTree.h>
-#include <gtsam/inference/BayesTreeCliqueBase.h>
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/inference/BayesTree.h"
+#include "gtsam/inference/BayesTreeCliqueBase.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianConditional.cpp b/gtsam/linear/GaussianConditional.cpp
index 7735e51..2c71a1e 100644
--- a/gtsam/linear/GaussianConditional.cpp
+++ b/gtsam/linear/GaussianConditional.cpp
@@ -15,11 +15,11 @@
  * @author Christian Potthast, Frank Dellaert
  */
 
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/Sampler.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/linearExceptions.h>
-#include <gtsam/hybrid/HybridValues.h>
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/Sampler.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/linearExceptions.h"
+#include "gtsam/hybrid/HybridValues.h"
 
 #ifdef __GNUC__
 #pragma GCC diagnostic push

diff --git a/gtsam/linear/GaussianConditional.h b/gtsam/linear/GaussianConditional.h
index 27270fe..29f8b44 100644
--- a/gtsam/linear/GaussianConditional.h
+++ b/gtsam/linear/GaussianConditional.h
@@ -19,11 +19,11 @@
 
 #pragma once
 
-#include <gtsam/global_includes.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/inference/Conditional.h>
-#include <gtsam/inference/Conditional-inst.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/global_includes.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/inference/Conditional.h"
+#include "gtsam/inference/Conditional-inst.h"
+#include "gtsam/linear/VectorValues.h"
 
 #include <random> // for std::mt19937_64 
 
@@ -295,5 +295,5 @@ struct traits<GaussianConditional> : public Testable<GaussianConditional> {};
 
 } // \ namespace gtsam
 
-#include <gtsam/linear/GaussianConditional-inl.h>
+#include "gtsam/linear/GaussianConditional-inl.h"
 

diff --git a/gtsam/linear/GaussianDensity.cpp b/gtsam/linear/GaussianDensity.cpp
index 196be34..947f6c6 100644
--- a/gtsam/linear/GaussianDensity.cpp
+++ b/gtsam/linear/GaussianDensity.cpp
@@ -16,7 +16,7 @@
  * @date    Jan 21, 2012
  */
 
-#include <gtsam/linear/GaussianDensity.h>
+#include "gtsam/linear/GaussianDensity.h"
 #include <string>
 
 using std::cout;

diff --git a/gtsam/linear/GaussianDensity.h b/gtsam/linear/GaussianDensity.h
index 417cdac..41334b5 100644
--- a/gtsam/linear/GaussianDensity.h
+++ b/gtsam/linear/GaussianDensity.h
@@ -19,7 +19,7 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/linear/GaussianConditional.h>
+#include "gtsam/linear/GaussianConditional.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianEliminationTree.cpp b/gtsam/linear/GaussianEliminationTree.cpp
index 87469c8..7e98967 100644
--- a/gtsam/linear/GaussianEliminationTree.cpp
+++ b/gtsam/linear/GaussianEliminationTree.cpp
@@ -16,8 +16,8 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/inference/EliminationTree-inst.h>
-#include <gtsam/linear/GaussianEliminationTree.h>
+#include "gtsam/inference/EliminationTree-inst.h"
+#include "gtsam/linear/GaussianEliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianEliminationTree.h b/gtsam/linear/GaussianEliminationTree.h
index c386d25..378b591 100644
--- a/gtsam/linear/GaussianEliminationTree.h
+++ b/gtsam/linear/GaussianEliminationTree.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/inference/EliminationTree.h>
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/inference/EliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianFactor.cpp b/gtsam/linear/GaussianFactor.cpp
index e60e626..713d6a0 100644
--- a/gtsam/linear/GaussianFactor.cpp
+++ b/gtsam/linear/GaussianFactor.cpp
@@ -18,9 +18,9 @@
 
 // \callgraph
 
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/VectorValues.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianFactor.h b/gtsam/linear/GaussianFactor.h
index c5133c6..0ed5f94 100644
--- a/gtsam/linear/GaussianFactor.h
+++ b/gtsam/linear/GaussianFactor.h
@@ -20,9 +20,9 @@
 
 #pragma once
 
-#include <gtsam/inference/Factor.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/inference/Factor.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Testable.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianFactorGraph.cpp b/gtsam/linear/GaussianFactorGraph.cpp
index cb42f0a..88edc5d 100644
--- a/gtsam/linear/GaussianFactorGraph.cpp
+++ b/gtsam/linear/GaussianFactorGraph.cpp
@@ -18,16 +18,16 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/linear/GaussianEliminationTree.h>
-#include <gtsam/linear/GaussianJunctionTree.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/inference/FactorGraph-inst.h>
-#include <gtsam/inference/EliminateableFactorGraph-inst.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/base/cholesky.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/linear/GaussianEliminationTree.h"
+#include "gtsam/linear/GaussianJunctionTree.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/inference/FactorGraph-inst.h"
+#include "gtsam/inference/EliminateableFactorGraph-inst.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/base/cholesky.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/GaussianFactorGraph.h b/gtsam/linear/GaussianFactorGraph.h
index 6a7848f..0a955c6 100644
--- a/gtsam/linear/GaussianFactorGraph.h
+++ b/gtsam/linear/GaussianFactorGraph.h
@@ -22,13 +22,13 @@
 #pragma once
 
 #include <cstddef>
-#include <gtsam/inference/EliminateableFactorGraph.h>
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/linear/Errors.h>  // Included here instead of fw-declared so we can use Errors::iterator
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/inference/EliminateableFactorGraph.h"
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/linear/Errors.h"  // Included here instead of fw-declared so we can use Errors::iterator
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/VectorValues.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianISAM.cpp b/gtsam/linear/GaussianISAM.cpp
index aea12e8..3d33aa3 100644
--- a/gtsam/linear/GaussianISAM.cpp
+++ b/gtsam/linear/GaussianISAM.cpp
@@ -16,8 +16,8 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/linear/GaussianISAM.h>
-#include <gtsam/inference/ISAM-inst.h>
+#include "gtsam/linear/GaussianISAM.h"
+#include "gtsam/inference/ISAM-inst.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianISAM.h b/gtsam/linear/GaussianISAM.h
index 9344f07..f514e78 100644
--- a/gtsam/linear/GaussianISAM.h
+++ b/gtsam/linear/GaussianISAM.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/inference/ISAM.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/inference/ISAM.h"
+#include "gtsam/base/Testable.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianJunctionTree.cpp b/gtsam/linear/GaussianJunctionTree.cpp
index 016811e..db66ff5 100644
--- a/gtsam/linear/GaussianJunctionTree.cpp
+++ b/gtsam/linear/GaussianJunctionTree.cpp
@@ -16,9 +16,9 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/inference/JunctionTree-inst.h>
-#include <gtsam/linear/GaussianJunctionTree.h>
-#include <gtsam/linear/GaussianEliminationTree.h>
+#include "gtsam/inference/JunctionTree-inst.h"
+#include "gtsam/linear/GaussianJunctionTree.h"
+#include "gtsam/linear/GaussianEliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/GaussianJunctionTree.h b/gtsam/linear/GaussianJunctionTree.h
index aef38f4..ea55448 100644
--- a/gtsam/linear/GaussianJunctionTree.h
+++ b/gtsam/linear/GaussianJunctionTree.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/inference/JunctionTree.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/inference/JunctionTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/HessianFactor.cpp b/gtsam/linear/HessianFactor.cpp
index 4e8ef80..c23cd57 100644
--- a/gtsam/linear/HessianFactor.cpp
+++ b/gtsam/linear/HessianFactor.cpp
@@ -15,20 +15,20 @@
  * @date    Dec 8, 2010
  */
 
-#include <gtsam/linear/HessianFactor.h>
-
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/linearExceptions.h>
-#include <gtsam/base/cholesky.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/ThreadsafeException.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/linear/HessianFactor.h"
+
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/linearExceptions.h"
+#include "gtsam/base/cholesky.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/ThreadsafeException.h"
+#include "gtsam/base/timing.h"
 
 #include <sstream>
 #include <cassert>

diff --git a/gtsam/linear/HessianFactor.h b/gtsam/linear/HessianFactor.h
index 56b3d65..ed5f938 100644
--- a/gtsam/linear/HessianFactor.h
+++ b/gtsam/linear/HessianFactor.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/Scatter.h>
-#include <gtsam/base/SymmetricBlockMatrix.h>
-#include <gtsam/base/FastVector.h>
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/Scatter.h"
+#include "gtsam/base/SymmetricBlockMatrix.h"
+#include "gtsam/base/FastVector.h"
 
 namespace gtsam {
 
@@ -425,4 +425,4 @@ struct traits<HessianFactor> : public Testable<HessianFactor> {};
 } // \ namespace gtsam
 
 
-#include <gtsam/linear/HessianFactor-inl.h>
+#include "gtsam/linear/HessianFactor-inl.h"

diff --git a/gtsam/linear/IterativeSolver.cpp b/gtsam/linear/IterativeSolver.cpp
index e9b0a5f..f55bb85 100644
--- a/gtsam/linear/IterativeSolver.cpp
+++ b/gtsam/linear/IterativeSolver.cpp
@@ -16,9 +16,9 @@
  * @author Yong-Dian Jian
  */
 
-#include <gtsam/linear/IterativeSolver.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/linear/IterativeSolver.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
 #include <iostream>
 
 using namespace std;

diff --git a/gtsam/linear/IterativeSolver.h b/gtsam/linear/IterativeSolver.h
index 1a66708..424d886 100644
--- a/gtsam/linear/IterativeSolver.h
+++ b/gtsam/linear/IterativeSolver.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/Vector.h>
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/Vector.h"
 
 #include <memory>
 

diff --git a/gtsam/linear/JacobianFactor-inl.h b/gtsam/linear/JacobianFactor-inl.h
index 6c4cb96..5ac40e3 100644
--- a/gtsam/linear/JacobianFactor-inl.h
+++ b/gtsam/linear/JacobianFactor-inl.h
@@ -18,7 +18,7 @@
  */
 #pragma once
 
-#include <gtsam/linear/linearExceptions.h>
+#include "gtsam/linear/linearExceptions.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/JacobianFactor.cpp b/gtsam/linear/JacobianFactor.cpp
index 51d513e..210df10 100644
--- a/gtsam/linear/JacobianFactor.cpp
+++ b/gtsam/linear/JacobianFactor.cpp
@@ -17,19 +17,19 @@
  * @date    Dec 8, 2010
  */
 
-#include <gtsam/linear/linearExceptions.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/Scatter.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/inference/VariableSlots.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/cholesky.h>
+#include "gtsam/linear/linearExceptions.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/Scatter.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/inference/VariableSlots.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/cholesky.h"
 
 #include <cmath>
 #include <cassert>

diff --git a/gtsam/linear/JacobianFactor.h b/gtsam/linear/JacobianFactor.h
index 407ed1e..2be4323 100644
--- a/gtsam/linear/JacobianFactor.h
+++ b/gtsam/linear/JacobianFactor.h
@@ -18,11 +18,11 @@
  */
 #pragma once
 
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/base/VerticalBlockMatrix.h>
-#include <gtsam/global_includes.h>
-#include <gtsam/inference/VariableSlots.h>
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/base/VerticalBlockMatrix.h"
+#include "gtsam/global_includes.h"
+#include "gtsam/inference/VariableSlots.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/version.hpp>
@@ -472,6 +472,6 @@ struct traits<JacobianFactor> : public Testable<JacobianFactor> {
 BOOST_CLASS_VERSION(gtsam::JacobianFactor, 1)
 #endif
 
-#include <gtsam/linear/JacobianFactor-inl.h>
+#include "gtsam/linear/JacobianFactor-inl.h"
 
 

diff --git a/gtsam/linear/KalmanFilter.cpp b/gtsam/linear/KalmanFilter.cpp
index ebc4d58..726d5ee 100644
--- a/gtsam/linear/KalmanFilter.cpp
+++ b/gtsam/linear/KalmanFilter.cpp
@@ -21,11 +21,11 @@
  */
 
 
-#include <gtsam/linear/KalmanFilter.h>
+#include "gtsam/linear/KalmanFilter.h"
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/JacobianFactor.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/JacobianFactor.h"
 
 #ifndef NDEBUG
 #include <cassert>

diff --git a/gtsam/linear/KalmanFilter.h b/gtsam/linear/KalmanFilter.h
index 2bf0549..b543d8a 100644
--- a/gtsam/linear/KalmanFilter.h
+++ b/gtsam/linear/KalmanFilter.h
@@ -19,9 +19,9 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianDensity.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/NoiseModel.h>
+#include "gtsam/linear/GaussianDensity.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/NoiseModel.h"
 
 #ifndef KALMANFILTER_DEFAULT_FACTORIZATION
 #define KALMANFILTER_DEFAULT_FACTORIZATION QR

diff --git a/gtsam/linear/LossFunctions.cpp b/gtsam/linear/LossFunctions.cpp
index 682783e..bed8715 100644
--- a/gtsam/linear/LossFunctions.cpp
+++ b/gtsam/linear/LossFunctions.cpp
@@ -16,7 +16,7 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/linear/LossFunctions.h>
+#include "gtsam/linear/LossFunctions.h"
 
 #include <iostream>
 #include <utility>

diff --git a/gtsam/linear/LossFunctions.h b/gtsam/linear/LossFunctions.h
index a8902e1..fe49a15 100644
--- a/gtsam/linear/LossFunctions.h
+++ b/gtsam/linear/LossFunctions.h
@@ -20,9 +20,9 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/dllexport.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/extended_type_info.hpp>

diff --git a/gtsam/linear/NoiseModel.cpp b/gtsam/linear/NoiseModel.cpp
index 39666b4..ba50d79 100644
--- a/gtsam/linear/NoiseModel.cpp
+++ b/gtsam/linear/NoiseModel.cpp
@@ -16,8 +16,8 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/base/timing.h"
 
 #include <cmath>
 #include <cassert>

diff --git a/gtsam/linear/NoiseModel.h b/gtsam/linear/NoiseModel.h
index 34fa63e..580fbaa 100644
--- a/gtsam/linear/NoiseModel.h
+++ b/gtsam/linear/NoiseModel.h
@@ -18,11 +18,11 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/std_optional_serialization.h>
-#include <gtsam/dllexport.h>
-#include <gtsam/linear/LossFunctions.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/std_optional_serialization.h"
+#include "gtsam/dllexport.h"
+#include "gtsam/linear/LossFunctions.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>

diff --git a/gtsam/linear/PCGSolver.cpp b/gtsam/linear/PCGSolver.cpp
index c051096..5bc3ced 100644
--- a/gtsam/linear/PCGSolver.cpp
+++ b/gtsam/linear/PCGSolver.cpp
@@ -17,10 +17,10 @@
  * @author Sungtae An
  */
 
-#include <gtsam/linear/PCGSolver.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/Preconditioner.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/linear/PCGSolver.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/Preconditioner.h"
+#include "gtsam/linear/VectorValues.h"
 
 #include <algorithm>
 #include <iostream>

diff --git a/gtsam/linear/PCGSolver.h b/gtsam/linear/PCGSolver.h
index 17cc2d3..861a7cb 100644
--- a/gtsam/linear/PCGSolver.h
+++ b/gtsam/linear/PCGSolver.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/linear/ConjugateGradientSolver.h>
+#include "gtsam/linear/ConjugateGradientSolver.h"
 #include <string>
 
 namespace gtsam {

diff --git a/gtsam/linear/PowerMethod.h b/gtsam/linear/PowerMethod.h
index 2c7027e..1f2bc48 100644
--- a/gtsam/linear/PowerMethod.h
+++ b/gtsam/linear/PowerMethod.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
 
 #include <Eigen/Core>
 #include <Eigen/Sparse>

diff --git a/gtsam/linear/Preconditioner.cpp b/gtsam/linear/Preconditioner.cpp
index 2b84e37..e02ae31 100644
--- a/gtsam/linear/Preconditioner.cpp
+++ b/gtsam/linear/Preconditioner.cpp
@@ -6,12 +6,12 @@
  *      Author: Sungtae An
  */
 
-#include <gtsam/inference/FactorGraph-inst.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/PCGSolver.h>
-#include <gtsam/linear/Preconditioner.h>
-#include <gtsam/linear/SubgraphPreconditioner.h>
-#include <gtsam/linear/NoiseModel.h>
+#include "gtsam/inference/FactorGraph-inst.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/PCGSolver.h"
+#include "gtsam/linear/Preconditioner.h"
+#include "gtsam/linear/SubgraphPreconditioner.h"
+#include "gtsam/linear/NoiseModel.h"
 #include <memory>
 #include <iostream>
 #include <vector>

diff --git a/gtsam/linear/Preconditioner.h b/gtsam/linear/Preconditioner.h
index ebd8775..a108267 100644
--- a/gtsam/linear/Preconditioner.h
+++ b/gtsam/linear/Preconditioner.h
@@ -8,7 +8,7 @@
 
 #pragma once
 
-#include <gtsam/base/Vector.h>
+#include "gtsam/base/Vector.h"
 #include <memory>
 #include <iosfwd>
 #include <map>

diff --git a/gtsam/linear/RegularHessianFactor.h b/gtsam/linear/RegularHessianFactor.h
index 707f519..551bd6b 100644
--- a/gtsam/linear/RegularHessianFactor.h
+++ b/gtsam/linear/RegularHessianFactor.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/linear/RegularJacobianFactor.h>
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/linear/RegularJacobianFactor.h"
 #include <vector>
 
 namespace gtsam {

diff --git a/gtsam/linear/RegularJacobianFactor.h b/gtsam/linear/RegularJacobianFactor.h
index 1c465da..1f224af 100644
--- a/gtsam/linear/RegularJacobianFactor.h
+++ b/gtsam/linear/RegularJacobianFactor.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/VectorValues.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/Sampler.cpp b/gtsam/linear/Sampler.cpp
index 68f21d7..3143409 100644
--- a/gtsam/linear/Sampler.cpp
+++ b/gtsam/linear/Sampler.cpp
@@ -16,7 +16,7 @@
  * @author Alex Cunningham
  */
 
-#include <gtsam/linear/Sampler.h>
+#include "gtsam/linear/Sampler.h"
 
 #include <cassert>
 

diff --git a/gtsam/linear/Sampler.h b/gtsam/linear/Sampler.h
index eb6549e..b3bbdc8 100644
--- a/gtsam/linear/Sampler.h
+++ b/gtsam/linear/Sampler.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/linear/NoiseModel.h>
+#include "gtsam/linear/NoiseModel.h"
 
 #include <random>
 

diff --git a/gtsam/linear/Scatter.cpp b/gtsam/linear/Scatter.cpp
index 07ecaf4..f3d95f9 100644
--- a/gtsam/linear/Scatter.cpp
+++ b/gtsam/linear/Scatter.cpp
@@ -16,9 +16,9 @@
  * @date    June 2015
  */
 
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/Scatter.h>
-#include <gtsam/inference/Ordering.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/Scatter.h"
+#include "gtsam/inference/Ordering.h"
 
 #include <algorithm>
 

diff --git a/gtsam/linear/Scatter.h b/gtsam/linear/Scatter.h
index b05d191..8abfca2 100644
--- a/gtsam/linear/Scatter.h
+++ b/gtsam/linear/Scatter.h
@@ -19,9 +19,9 @@
 
 #pragma once
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/dllexport.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/SparseEigen.h b/gtsam/linear/SparseEigen.h
index 483ae7f..91465f6 100644
--- a/gtsam/linear/SparseEigen.h
+++ b/gtsam/linear/SparseEigen.h
@@ -23,8 +23,8 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
 
 #include <Eigen/Sparse>
 

diff --git a/gtsam/linear/SubgraphBuilder.cpp b/gtsam/linear/SubgraphBuilder.cpp
index 834fc8d..d4e26f6 100644
--- a/gtsam/linear/SubgraphBuilder.cpp
+++ b/gtsam/linear/SubgraphBuilder.cpp
@@ -15,15 +15,15 @@
  * @author Frank Dellaert, Yong-Dian Jian
  */
 
-#include <gtsam/base/DSFVector.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/WeightedSampler.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/VariableIndex.h>
-#include <gtsam/linear/Errors.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/SubgraphBuilder.h>
-#include <gtsam/base/kruskal.h>
+#include "gtsam/base/DSFVector.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/WeightedSampler.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/VariableIndex.h"
+#include "gtsam/linear/Errors.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/SubgraphBuilder.h"
+#include "gtsam/base/kruskal.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/archive/text_iarchive.hpp>

diff --git a/gtsam/linear/SubgraphBuilder.h b/gtsam/linear/SubgraphBuilder.h
index f9ddd4c..4c4c2b1 100644
--- a/gtsam/linear/SubgraphBuilder.h
+++ b/gtsam/linear/SubgraphBuilder.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/types.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/types.h"
+#include "gtsam/dllexport.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/version.hpp>

diff --git a/gtsam/linear/SubgraphPreconditioner.cpp b/gtsam/linear/SubgraphPreconditioner.cpp
index 53ea94d..8744cb0 100644
--- a/gtsam/linear/SubgraphPreconditioner.cpp
+++ b/gtsam/linear/SubgraphPreconditioner.cpp
@@ -15,14 +15,14 @@
  * @author Frank Dellaert, Yong-Dian Jian
  */
 
-#include <gtsam/linear/SubgraphPreconditioner.h>
-
-#include <gtsam/linear/SubgraphBuilder.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/base/types.h>
-#include <gtsam/base/Vector.h>
+#include "gtsam/linear/SubgraphPreconditioner.h"
+
+#include "gtsam/linear/SubgraphBuilder.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/base/types.h"
+#include "gtsam/base/Vector.h"
 
 #include <stdexcept>
 #include <cassert>

diff --git a/gtsam/linear/SubgraphPreconditioner.h b/gtsam/linear/SubgraphPreconditioner.h
index 558a80b..49d1f0e 100644
--- a/gtsam/linear/SubgraphPreconditioner.h
+++ b/gtsam/linear/SubgraphPreconditioner.h
@@ -17,14 +17,14 @@
 
 #pragma once
 
-#include <gtsam/linear/SubgraphBuilder.h>
-#include <gtsam/linear/Errors.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/IterativeSolver.h>
-#include <gtsam/linear/Preconditioner.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/dllexport.h>
+#include "gtsam/linear/SubgraphBuilder.h"
+#include "gtsam/linear/Errors.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/IterativeSolver.h"
+#include "gtsam/linear/Preconditioner.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/dllexport.h"
 
 #include <memory>
 

diff --git a/gtsam/linear/SubgraphSolver.cpp b/gtsam/linear/SubgraphSolver.cpp
index 722d7a5..4b42156 100644
--- a/gtsam/linear/SubgraphSolver.cpp
+++ b/gtsam/linear/SubgraphSolver.cpp
@@ -17,13 +17,13 @@
  * @author Yong Dian Jian
  */
 
-#include <gtsam/linear/SubgraphSolver.h>
+#include "gtsam/linear/SubgraphSolver.h"
 
-#include <gtsam/linear/SubgraphBuilder.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/iterative-inl.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/SubgraphPreconditioner.h>
+#include "gtsam/linear/SubgraphBuilder.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/iterative-inl.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/SubgraphPreconditioner.h"
 
 using namespace std;
 

diff --git a/gtsam/linear/SubgraphSolver.h b/gtsam/linear/SubgraphSolver.h
index c029165..803e82b 100644
--- a/gtsam/linear/SubgraphSolver.h
+++ b/gtsam/linear/SubgraphSolver.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/linear/ConjugateGradientSolver.h>
-#include <gtsam/linear/SubgraphBuilder.h>
+#include "gtsam/linear/ConjugateGradientSolver.h"
+#include "gtsam/linear/SubgraphBuilder.h"
 
 #include <map>
 #include <utility>  // pair

diff --git a/gtsam/linear/VectorValues.cpp b/gtsam/linear/VectorValues.cpp
index 52e2fac..dae9f16 100644
--- a/gtsam/linear/VectorValues.cpp
+++ b/gtsam/linear/VectorValues.cpp
@@ -16,7 +16,7 @@
  * @author Alex Cunningham
  */
 
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/linear/VectorValues.h"
 
 #include <functional>
 #include <utility>

diff --git a/gtsam/linear/VectorValues.h b/gtsam/linear/VectorValues.h
index 7fbd43f..a8b3736 100644
--- a/gtsam/linear/VectorValues.h
+++ b/gtsam/linear/VectorValues.h
@@ -17,12 +17,12 @@
 
 #pragma once
 
-#include <gtsam/linear/Scatter.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/ConcurrentMap.h>
-#include <gtsam/base/FastVector.h>
-#include <gtsam/global_includes.h>
+#include "gtsam/linear/Scatter.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/ConcurrentMap.h"
+#include "gtsam/base/FastVector.h"
+#include "gtsam/global_includes.h"
 
 #include <memory>
 

diff --git a/gtsam/linear/iterative-inl.h b/gtsam/linear/iterative-inl.h
index a8185b5..2ba7789 100644
--- a/gtsam/linear/iterative-inl.h
+++ b/gtsam/linear/iterative-inl.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/linear/iterative.h>
-#include <gtsam/linear/ConjugateGradientSolver.h>
+#include "gtsam/linear/iterative.h"
+#include "gtsam/linear/ConjugateGradientSolver.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/iterative.cpp b/gtsam/linear/iterative.cpp
index 08d1fb5..a627e68 100644
--- a/gtsam/linear/iterative.cpp
+++ b/gtsam/linear/iterative.cpp
@@ -16,11 +16,11 @@
  * @date Dec 28, 2009
  */
 
-#include <gtsam/linear/iterative-inl.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/IterativeSolver.h>
+#include "gtsam/linear/iterative-inl.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/IterativeSolver.h"
 
 #include <iostream>
 

diff --git a/gtsam/linear/iterative.h b/gtsam/linear/iterative.h
index 22f65b8..4cf5707 100644
--- a/gtsam/linear/iterative.h
+++ b/gtsam/linear/iterative.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/ConjugateGradientSolver.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/ConjugateGradientSolver.h"
 
 namespace gtsam {
 
@@ -145,5 +145,5 @@ namespace gtsam {
 
 } // namespace gtsam
 
-#include <gtsam/linear/iterative-inl.h>
+#include "gtsam/linear/iterative-inl.h"
 

diff --git a/gtsam/linear/linearAlgorithms-inst.h b/gtsam/linear/linearAlgorithms-inst.h
index a8853f2..164fb5e 100644
--- a/gtsam/linear/linearAlgorithms-inst.h
+++ b/gtsam/linear/linearAlgorithms-inst.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/base/treeTraversal-inst.h>
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/base/treeTraversal-inst.h"
 
 #include <memory>
 

diff --git a/gtsam/linear/linearExceptions.cpp b/gtsam/linear/linearExceptions.cpp
index 4e6b789..bc58706 100644
--- a/gtsam/linear/linearExceptions.cpp
+++ b/gtsam/linear/linearExceptions.cpp
@@ -16,8 +16,8 @@
  * @date    Aug 17, 2012
  */
 
-#include <gtsam/linear/linearExceptions.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/linear/linearExceptions.h"
+#include "gtsam/inference/Symbol.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/linearExceptions.h b/gtsam/linear/linearExceptions.h
index c412429..9169c16 100644
--- a/gtsam/linear/linearExceptions.h
+++ b/gtsam/linear/linearExceptions.h
@@ -17,8 +17,8 @@
  */
 #pragma once
 
-#include <gtsam/base/ThreadsafeException.h>
-#include <gtsam/base/types.h>
+#include "gtsam/base/ThreadsafeException.h"
+#include "gtsam/base/types.h"
 
 namespace gtsam {
 

diff --git a/gtsam/linear/tests/powerMethodExample.h b/gtsam/linear/tests/powerMethodExample.h
index 994fcc6..ef62b0b 100644
--- a/gtsam/linear/tests/powerMethodExample.h
+++ b/gtsam/linear/tests/powerMethodExample.h
@@ -21,7 +21,7 @@
 
 #pragma once
 
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
 #include <iostream>
 

diff --git a/gtsam/linear/tests/testAcceleratedPowerMethod.cpp b/gtsam/linear/tests/testAcceleratedPowerMethod.cpp
index 7c4a909..e40ba4e 100644
--- a/gtsam/linear/tests/testAcceleratedPowerMethod.cpp
+++ b/gtsam/linear/tests/testAcceleratedPowerMethod.cpp
@@ -18,13 +18,13 @@
  * @brief  Check eigenvalue and eigenvector computed by accelerated power method
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/AcceleratedPowerMethod.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/tests/powerMethodExample.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/AcceleratedPowerMethod.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/tests/powerMethodExample.h"
 
 #include <Eigen/Core>
 #include <Eigen/Dense>

diff --git a/gtsam/linear/tests/testErrors.cpp b/gtsam/linear/tests/testErrors.cpp
index 2075dc5..b5ae787 100644
--- a/gtsam/linear/tests/testErrors.cpp
+++ b/gtsam/linear/tests/testErrors.cpp
@@ -15,9 +15,9 @@
  * @author Frank Dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/linear/Errors.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/linear/Errors.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/tests/testGaussianBayesNet.cpp b/gtsam/linear/tests/testGaussianBayesNet.cpp
index b1cfbe1..be5c8d1 100644
--- a/gtsam/linear/tests/testGaussianBayesNet.cpp
+++ b/gtsam/linear/tests/testGaussianBayesNet.cpp
@@ -15,15 +15,15 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianDensity.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/inference/Symbol.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianDensity.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/inference/Symbol.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 // STL/C++
 #include <iostream>

diff --git a/gtsam/linear/tests/testGaussianBayesTree.cpp b/gtsam/linear/tests/testGaussianBayesTree.cpp
index 899d698..99762db 100644
--- a/gtsam/linear/tests/testGaussianBayesTree.cpp
+++ b/gtsam/linear/tests/testGaussianBayesTree.cpp
@@ -15,13 +15,13 @@
  * @author Kai Ni
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/GaussianJunctionTree.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/GaussianJunctionTree.h"
 
 #include <iostream>
 #include <vector>

diff --git a/gtsam/linear/tests/testGaussianConditional.cpp b/gtsam/linear/tests/testGaussianConditional.cpp
index 68894c3..5d0e2f3 100644
--- a/gtsam/linear/tests/testGaussianConditional.cpp
+++ b/gtsam/linear/tests/testGaussianConditional.cpp
@@ -15,17 +15,17 @@
  *  @author Christian Potthast
  **/
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/VerticalBlockMatrix.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/GaussianDensity.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/hybrid/HybridValues.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/VerticalBlockMatrix.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/GaussianDensity.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/hybrid/HybridValues.h"
 
 
 #include <iostream>

diff --git a/gtsam/linear/tests/testGaussianDensity.cpp b/gtsam/linear/tests/testGaussianDensity.cpp
index b2861e8..3c353cb 100644
--- a/gtsam/linear/tests/testGaussianDensity.cpp
+++ b/gtsam/linear/tests/testGaussianDensity.cpp
@@ -16,10 +16,10 @@
  *  @date   Jan 21, 2012
  **/
 
-#include <gtsam/linear/GaussianDensity.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/linear/GaussianDensity.h"
+#include "gtsam/inference/Symbol.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 using namespace std;

diff --git a/gtsam/linear/tests/testGaussianFactorGraph.cpp b/gtsam/linear/tests/testGaussianFactorGraph.cpp
index 03222bb..e1550f6 100644
--- a/gtsam/linear/tests/testGaussianFactorGraph.cpp
+++ b/gtsam/linear/tests/testGaussianFactorGraph.cpp
@@ -18,17 +18,17 @@
  *  @author Richard Roberts
  **/
 
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/inference/VariableSlots.h>
-#include <gtsam/inference/VariableIndex.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/base/VerticalBlockMatrix.h>
-
-#include <gtsam/base/TestableAssertions.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/inference/VariableSlots.h"
+#include "gtsam/inference/VariableIndex.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/base/VerticalBlockMatrix.h"
+
+#include "gtsam/base/TestableAssertions.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/tests/testHessianFactor.cpp b/gtsam/linear/tests/testHessianFactor.cpp
index 90c443f..937cafe 100644
--- a/gtsam/linear/tests/testHessianFactor.cpp
+++ b/gtsam/linear/tests/testHessianFactor.cpp
@@ -15,15 +15,15 @@
  * @date    Dec 15, 2010
  */
 
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/base/TestableAssertions.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/base/TestableAssertions.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <vector>
 #include <utility>

diff --git a/gtsam/linear/tests/testJacobianFactor.cpp b/gtsam/linear/tests/testJacobianFactor.cpp
index 2344666..8123682 100644
--- a/gtsam/linear/tests/testJacobianFactor.cpp
+++ b/gtsam/linear/tests/testJacobianFactor.cpp
@@ -16,14 +16,14 @@
  *  @author Frank Dellaert
  **/
 
-#include <gtsam/base/TestableAssertions.h>
-#include <CppUnitLite/TestHarness.h>
-
-#include <gtsam/inference/VariableSlots.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/base/TestableAssertions.h"
+#include "CppUnitLite/TestHarness.h"
+
+#include "gtsam/inference/VariableSlots.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/VectorValues.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/tests/testKalmanFilter.cpp b/gtsam/linear/tests/testKalmanFilter.cpp
index 5e40aa4..c70c0bf 100644
--- a/gtsam/linear/tests/testKalmanFilter.cpp
+++ b/gtsam/linear/tests/testKalmanFilter.cpp
@@ -17,10 +17,10 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/linear/KalmanFilter.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/base/Testable.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/linear/KalmanFilter.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/base/Testable.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/tests/testNoiseModel.cpp b/gtsam/linear/tests/testNoiseModel.cpp
index 2518e4c..8fad65b 100644
--- a/gtsam/linear/tests/testNoiseModel.cpp
+++ b/gtsam/linear/tests/testNoiseModel.cpp
@@ -18,10 +18,10 @@
  */
 
 
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/base/TestableAssertions.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 #include <limits>

diff --git a/gtsam/linear/tests/testPowerMethod.cpp b/gtsam/linear/tests/testPowerMethod.cpp
index 54d4c72..55c45c6 100644
--- a/gtsam/linear/tests/testPowerMethod.cpp
+++ b/gtsam/linear/tests/testPowerMethod.cpp
@@ -18,13 +18,13 @@
  * @brief  Check eigenvalue and eigenvector computed by power method
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/PowerMethod.h>
-#include <gtsam/linear/tests/powerMethodExample.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/PowerMethod.h"
+#include "gtsam/linear/tests/powerMethodExample.h"
 
 #include <Eigen/Core>
 #include <Eigen/Dense>

diff --git a/gtsam/linear/tests/testRegularHessianFactor.cpp b/gtsam/linear/tests/testRegularHessianFactor.cpp
index b864516..22a0984 100644
--- a/gtsam/linear/tests/testRegularHessianFactor.cpp
+++ b/gtsam/linear/tests/testRegularHessianFactor.cpp
@@ -15,11 +15,11 @@
  * @date    March 4, 2014
  */
 
-#include <gtsam/linear/RegularHessianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/linear/RegularHessianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/tests/testRegularJacobianFactor.cpp b/gtsam/linear/tests/testRegularJacobianFactor.cpp
index a21bbf9..bbe6fd4 100644
--- a/gtsam/linear/tests/testRegularJacobianFactor.cpp
+++ b/gtsam/linear/tests/testRegularJacobianFactor.cpp
@@ -16,13 +16,13 @@
  * @date    Nov 12, 2014
  */
 
-#include <gtsam/linear/RegularJacobianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "gtsam/linear/RegularJacobianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/base/TestableAssertions.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/tests/testSampler.cpp b/gtsam/linear/tests/testSampler.cpp
index 5831d90..097b219 100644
--- a/gtsam/linear/tests/testSampler.cpp
+++ b/gtsam/linear/tests/testSampler.cpp
@@ -16,9 +16,9 @@
  * @author Frank Dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
-#include <gtsam/linear/Sampler.h>
+#include "gtsam/linear/Sampler.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/linear/tests/testScatter.cpp b/gtsam/linear/tests/testScatter.cpp
index 575f29c..055259f 100644
--- a/gtsam/linear/tests/testScatter.cpp
+++ b/gtsam/linear/tests/testScatter.cpp
@@ -15,10 +15,10 @@
  * @date    June, 2015
  */
 
-#include <gtsam/linear/Scatter.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/inference/Symbol.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/linear/Scatter.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/inference/Symbol.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/tests/testSerializationLinear.cpp b/gtsam/linear/tests/testSerializationLinear.cpp
index 3857784..41ea1f3 100644
--- a/gtsam/linear/tests/testSerializationLinear.cpp
+++ b/gtsam/linear/tests/testSerializationLinear.cpp
@@ -16,14 +16,14 @@
  * @date Feb 7, 2012
  */
 
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/linear/GaussianISAM.h>
-#include <gtsam/linear/NoiseModel.h>
-
-#include <gtsam/base/serializationTestHelpers.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/linear/GaussianISAM.h"
+#include "gtsam/linear/NoiseModel.h"
+
+#include "gtsam/base/serializationTestHelpers.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/tests/testSparseEigen.cpp b/gtsam/linear/tests/testSparseEigen.cpp
index 39c4f37..1bef50a 100644
--- a/gtsam/linear/tests/testSparseEigen.cpp
+++ b/gtsam/linear/tests/testSparseEigen.cpp
@@ -18,11 +18,11 @@
  * @date    Jan, 2021
  */
 
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/SparseEigen.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/SparseEigen.h"
 
-#include <gtsam/base/TestableAssertions.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/TestableAssertions.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/linear/tests/testVectorValues.cpp b/gtsam/linear/tests/testVectorValues.cpp
index a4e1016..e734ccf 100644
--- a/gtsam/linear/tests/testVectorValues.cpp
+++ b/gtsam/linear/tests/testVectorValues.cpp
@@ -15,11 +15,11 @@
  * @date    Sep 16, 2010
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/inference/Symbol.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <sstream>
 

diff --git a/gtsam/navigation/AHRSFactor.cpp b/gtsam/navigation/AHRSFactor.cpp
index f23e41e..e698713 100644
--- a/gtsam/navigation/AHRSFactor.cpp
+++ b/gtsam/navigation/AHRSFactor.cpp
@@ -17,7 +17,7 @@
  *  @date   July 2014
  **/
 
-#include <gtsam/navigation/AHRSFactor.h>
+#include "gtsam/navigation/AHRSFactor.h"
 #include <iostream>
 
 using namespace std;

diff --git a/gtsam/navigation/AHRSFactor.h b/gtsam/navigation/AHRSFactor.h
index 05439ba..0bd3444 100644
--- a/gtsam/navigation/AHRSFactor.h
+++ b/gtsam/navigation/AHRSFactor.h
@@ -20,9 +20,9 @@
 #pragma once
 
 /* GTSAM includes */
-#include <gtsam/navigation/PreintegratedRotation.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/navigation/PreintegratedRotation.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/geometry/Pose3.h"
 
 #include <optional>
 

diff --git a/gtsam/navigation/AttitudeFactor.h b/gtsam/navigation/AttitudeFactor.h
index 2fada72..c6c75e6 100644
--- a/gtsam/navigation/AttitudeFactor.h
+++ b/gtsam/navigation/AttitudeFactor.h
@@ -17,9 +17,9 @@
  **/
 #pragma once
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/BarometricFactor.h b/gtsam/navigation/BarometricFactor.h
index 70cae8d..ea02787 100644
--- a/gtsam/navigation/BarometricFactor.h
+++ b/gtsam/navigation/BarometricFactor.h
@@ -17,9 +17,9 @@
  **/
 #pragma once
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/navigation/NavState.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/navigation/NavState.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/CombinedImuFactor.cpp b/gtsam/navigation/CombinedImuFactor.cpp
index a2eb9e0..9905b6d 100644
--- a/gtsam/navigation/CombinedImuFactor.cpp
+++ b/gtsam/navigation/CombinedImuFactor.cpp
@@ -20,7 +20,7 @@
  *  @author Varun Agrawal
  **/
 
-#include <gtsam/navigation/CombinedImuFactor.h>
+#include "gtsam/navigation/CombinedImuFactor.h"
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/export.hpp>
 #endif

diff --git a/gtsam/navigation/CombinedImuFactor.h b/gtsam/navigation/CombinedImuFactor.h
index 0ffb386..23a8b9d 100644
--- a/gtsam/navigation/CombinedImuFactor.h
+++ b/gtsam/navigation/CombinedImuFactor.h
@@ -23,7 +23,7 @@
 #pragma once
 
 /* GTSAM includes */
-#include <gtsam/navigation/PreintegrationCombinedParams.h>
+#include "gtsam/navigation/PreintegrationCombinedParams.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/ConstantVelocityFactor.h b/gtsam/navigation/ConstantVelocityFactor.h
index 9fe5bef..8ce6a16 100644
--- a/gtsam/navigation/ConstantVelocityFactor.h
+++ b/gtsam/navigation/ConstantVelocityFactor.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/navigation/NavState.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/navigation/NavState.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/GPSFactor.h b/gtsam/navigation/GPSFactor.h
index cd89dd4..4a3dd12 100644
--- a/gtsam/navigation/GPSFactor.h
+++ b/gtsam/navigation/GPSFactor.h
@@ -17,9 +17,9 @@
  **/
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/navigation/NavState.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/navigation/NavState.h"
+#include "gtsam/geometry/Pose3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/ImuBias.cpp b/gtsam/navigation/ImuBias.cpp
index 49a364c..481731e 100644
--- a/gtsam/navigation/ImuBias.cpp
+++ b/gtsam/navigation/ImuBias.cpp
@@ -17,7 +17,7 @@
 
 #include "ImuBias.h"
 
-#include <gtsam/geometry/Point3.h>
+#include "gtsam/geometry/Point3.h"
 #include <iostream>
 
 namespace gtsam {

diff --git a/gtsam/navigation/ImuBias.h b/gtsam/navigation/ImuBias.h
index 6df87ed..0365350 100644
--- a/gtsam/navigation/ImuBias.h
+++ b/gtsam/navigation/ImuBias.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/base/OptionalJacobian.h>
-#include <gtsam/base/VectorSpace.h>
+#include "gtsam/base/OptionalJacobian.h"
+#include "gtsam/base/VectorSpace.h"
 #include <iosfwd>
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>

diff --git a/gtsam/navigation/ImuFactor.cpp b/gtsam/navigation/ImuFactor.cpp
index 5697d54..e37eb66 100644
--- a/gtsam/navigation/ImuFactor.cpp
+++ b/gtsam/navigation/ImuFactor.cpp
@@ -19,7 +19,7 @@
  *  @author Frank Dellaert
  **/
 
-#include <gtsam/navigation/ImuFactor.h>
+#include "gtsam/navigation/ImuFactor.h"
 
 /* External or standard includes */
 #include <ostream>

diff --git a/gtsam/navigation/ImuFactor.h b/gtsam/navigation/ImuFactor.h
index 7254838..6330003 100644
--- a/gtsam/navigation/ImuFactor.h
+++ b/gtsam/navigation/ImuFactor.h
@@ -22,10 +22,10 @@
 #pragma once
 
 /* GTSAM includes */
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/navigation/ManifoldPreintegration.h>
-#include <gtsam/navigation/TangentPreintegration.h>
-#include <gtsam/base/debug.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/navigation/ManifoldPreintegration.h"
+#include "gtsam/navigation/TangentPreintegration.h"
+#include "gtsam/base/debug.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/MagFactor.h b/gtsam/navigation/MagFactor.h
index 0422d47..735ef20 100644
--- a/gtsam/navigation/MagFactor.h
+++ b/gtsam/navigation/MagFactor.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/geometry/Rot2.h>
-#include <gtsam/geometry/Rot3.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/geometry/Rot2.h"
+#include "gtsam/geometry/Rot3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/MagPoseFactor.h b/gtsam/navigation/MagPoseFactor.h
index ba9a08d..d6d87ef 100644
--- a/gtsam/navigation/MagPoseFactor.h
+++ b/gtsam/navigation/MagPoseFactor.h
@@ -11,9 +11,9 @@
 
 #pragma once
 
-#include <gtsam/base/std_optional_serialization.h>
-#include <gtsam/geometry/concepts.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/base/std_optional_serialization.h"
+#include "gtsam/geometry/concepts.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 #include <optional>
 

diff --git a/gtsam/navigation/ManifoldPreintegration.h b/gtsam/navigation/ManifoldPreintegration.h
index 40691c4..8a44393 100644
--- a/gtsam/navigation/ManifoldPreintegration.h
+++ b/gtsam/navigation/ManifoldPreintegration.h
@@ -21,8 +21,8 @@
 
 #pragma once
 
-#include <gtsam/navigation/NavState.h>
-#include <gtsam/navigation/PreintegrationBase.h>
+#include "gtsam/navigation/NavState.h"
+#include "gtsam/navigation/PreintegrationBase.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/NavState.cpp b/gtsam/navigation/NavState.cpp
index b9d48a3..c222e3e 100644
--- a/gtsam/navigation/NavState.cpp
+++ b/gtsam/navigation/NavState.cpp
@@ -16,7 +16,7 @@
  * @date    July 2015
  **/
 
-#include <gtsam/navigation/NavState.h>
+#include "gtsam/navigation/NavState.h"
 
 #include <string>
 

diff --git a/gtsam/navigation/NavState.h b/gtsam/navigation/NavState.h
index 95ee71f..8f028e5 100644
--- a/gtsam/navigation/NavState.h
+++ b/gtsam/navigation/NavState.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/Manifold.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/Manifold.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/PreintegratedRotation.h b/gtsam/navigation/PreintegratedRotation.h
index 49b1aa4..a8d8c93 100644
--- a/gtsam/navigation/PreintegratedRotation.h
+++ b/gtsam/navigation/PreintegratedRotation.h
@@ -21,9 +21,9 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/std_optional_serialization.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/std_optional_serialization.h"
+#include "gtsam/geometry/Pose3.h"
 #include "gtsam/dllexport.h"
 
 namespace gtsam {

diff --git a/gtsam/navigation/PreintegrationBase.cpp b/gtsam/navigation/PreintegrationBase.cpp
index dd86b82..fb17101 100644
--- a/gtsam/navigation/PreintegrationBase.cpp
+++ b/gtsam/navigation/PreintegrationBase.cpp
@@ -20,8 +20,8 @@
  *  @author Varun Agrawal
  **/
 
-#include <gtsam/navigation/PreintegrationBase.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/navigation/PreintegrationBase.h"
+#include "gtsam/base/numericalDerivative.h"
 
 #include <cassert>
 

diff --git a/gtsam/navigation/PreintegrationBase.h b/gtsam/navigation/PreintegrationBase.h
index e4a790b..4fa6200 100644
--- a/gtsam/navigation/PreintegrationBase.h
+++ b/gtsam/navigation/PreintegrationBase.h
@@ -21,10 +21,10 @@
 
 #pragma once
 
-#include <gtsam/navigation/PreintegrationParams.h>
-#include <gtsam/navigation/NavState.h>
-#include <gtsam/navigation/ImuBias.h>
-#include <gtsam/linear/NoiseModel.h>
+#include "gtsam/navigation/PreintegrationParams.h"
+#include "gtsam/navigation/NavState.h"
+#include "gtsam/navigation/ImuBias.h"
+#include "gtsam/linear/NoiseModel.h"
 
 #include <iosfwd>
 #include <string>

diff --git a/gtsam/navigation/PreintegrationCombinedParams.h b/gtsam/navigation/PreintegrationCombinedParams.h
index 6be05c0..b062bc2 100644
--- a/gtsam/navigation/PreintegrationCombinedParams.h
+++ b/gtsam/navigation/PreintegrationCombinedParams.h
@@ -23,10 +23,10 @@
 #pragma once
 
 /* GTSAM includes */
-#include <gtsam/base/Matrix.h>
-#include <gtsam/navigation/ManifoldPreintegration.h>
-#include <gtsam/navigation/TangentPreintegration.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/navigation/ManifoldPreintegration.h"
+#include "gtsam/navigation/TangentPreintegration.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/PreintegrationParams.h b/gtsam/navigation/PreintegrationParams.h
index 8435d0b..c0772e3 100644
--- a/gtsam/navigation/PreintegrationParams.h
+++ b/gtsam/navigation/PreintegrationParams.h
@@ -16,7 +16,7 @@
 
 #pragma once
 
-#include <gtsam/navigation/PreintegratedRotation.h>
+#include "gtsam/navigation/PreintegratedRotation.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/Scenario.h b/gtsam/navigation/Scenario.h
index fff7e7e..db4429a 100644
--- a/gtsam/navigation/Scenario.h
+++ b/gtsam/navigation/Scenario.h
@@ -16,8 +16,8 @@
  */
 
 #pragma once
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/navigation/NavState.h>
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/navigation/NavState.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/ScenarioRunner.cpp b/gtsam/navigation/ScenarioRunner.cpp
index 6652878..60325b1 100644
--- a/gtsam/navigation/ScenarioRunner.cpp
+++ b/gtsam/navigation/ScenarioRunner.cpp
@@ -15,8 +15,8 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/base/timing.h>
-#include <gtsam/navigation/ScenarioRunner.h>
+#include "gtsam/base/timing.h"
+#include "gtsam/navigation/ScenarioRunner.h"
 
 #include <cmath>
 

diff --git a/gtsam/navigation/ScenarioRunner.h b/gtsam/navigation/ScenarioRunner.h
index 13789b3..a783317 100644
--- a/gtsam/navigation/ScenarioRunner.h
+++ b/gtsam/navigation/ScenarioRunner.h
@@ -16,10 +16,10 @@
  */
 
 #pragma once
-#include <gtsam/linear/Sampler.h>
-#include <gtsam/navigation/CombinedImuFactor.h>
-#include <gtsam/navigation/ImuFactor.h>
-#include <gtsam/navigation/Scenario.h>
+#include "gtsam/linear/Sampler.h"
+#include "gtsam/navigation/CombinedImuFactor.h"
+#include "gtsam/navigation/ImuFactor.h"
+#include "gtsam/navigation/Scenario.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/TangentPreintegration.cpp b/gtsam/navigation/TangentPreintegration.cpp
index 52f730c..84a5e2e 100644
--- a/gtsam/navigation/TangentPreintegration.cpp
+++ b/gtsam/navigation/TangentPreintegration.cpp
@@ -16,7 +16,7 @@
  **/
 
 #include "TangentPreintegration.h"
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/base/numericalDerivative.h"
 
 using namespace std;
 

diff --git a/gtsam/navigation/TangentPreintegration.h b/gtsam/navigation/TangentPreintegration.h
index e16ad93..80fe5d3 100644
--- a/gtsam/navigation/TangentPreintegration.h
+++ b/gtsam/navigation/TangentPreintegration.h
@@ -17,7 +17,7 @@
 
 #pragma once
 
-#include <gtsam/navigation/PreintegrationBase.h>
+#include "gtsam/navigation/PreintegrationBase.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/expressions.h b/gtsam/navigation/expressions.h
index 231ccb2..025e8a4 100644
--- a/gtsam/navigation/expressions.h
+++ b/gtsam/navigation/expressions.h
@@ -7,10 +7,10 @@
 
 #pragma once
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/navigation/NavState.h>
-#include <gtsam/nonlinear/expressions.h>
-#include <gtsam/slam/expressions.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/navigation/NavState.h"
+#include "gtsam/nonlinear/expressions.h"
+#include "gtsam/slam/expressions.h"
 
 namespace gtsam {
 

diff --git a/gtsam/navigation/tests/imuFactorTesting.h b/gtsam/navigation/tests/imuFactorTesting.h
index 6160db2..facc99d 100644
--- a/gtsam/navigation/tests/imuFactorTesting.h
+++ b/gtsam/navigation/tests/imuFactorTesting.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/navigation/ImuBias.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/navigation/ImuBias.h"
+#include "gtsam/inference/Symbol.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/navigation/tests/testAHRSFactor.cpp b/gtsam/navigation/tests/testAHRSFactor.cpp
index 570e531..bab78c4 100644
--- a/gtsam/navigation/tests/testAHRSFactor.cpp
+++ b/gtsam/navigation/tests/testAHRSFactor.cpp
@@ -18,18 +18,18 @@
  * @author Varun Agrawal
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/navigation/AHRSFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/Marginals.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/navigation/AHRSFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/Marginals.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 #include <cmath>
 #include <list>

diff --git a/gtsam/navigation/tests/testAttitudeFactor.cpp b/gtsam/navigation/tests/testAttitudeFactor.cpp
index e01706d..3ffca9a 100644
--- a/gtsam/navigation/tests/testAttitudeFactor.cpp
+++ b/gtsam/navigation/tests/testAttitudeFactor.cpp
@@ -16,10 +16,10 @@
  * @date   January 22, 2014
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/navigation/AttitudeFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/navigation/AttitudeFactor.h"
 
 #include <functional>
 

diff --git a/gtsam/navigation/tests/testBarometricFactor.cpp b/gtsam/navigation/tests/testBarometricFactor.cpp
index c7e9032..361af2d 100644
--- a/gtsam/navigation/tests/testBarometricFactor.cpp
+++ b/gtsam/navigation/tests/testBarometricFactor.cpp
@@ -16,10 +16,10 @@
  * @date   16 Dec, 2021
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/navigation/BarometricFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/navigation/BarometricFactor.h"
 
 using namespace std::placeholders;
 using namespace std;

diff --git a/gtsam/navigation/tests/testCombinedImuFactor.cpp b/gtsam/navigation/tests/testCombinedImuFactor.cpp
index c4fefb8..6b59f29 100644
--- a/gtsam/navigation/tests/testCombinedImuFactor.cpp
+++ b/gtsam/navigation/tests/testCombinedImuFactor.cpp
@@ -19,16 +19,16 @@
  * @author  Varun Agrawal
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/navigation/CombinedImuFactor.h>
-#include <gtsam/navigation/ImuBias.h>
-#include <gtsam/navigation/ImuFactor.h>
-#include <gtsam/navigation/ScenarioRunner.h>
-#include <gtsam/nonlinear/Values.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/navigation/CombinedImuFactor.h"
+#include "gtsam/navigation/ImuBias.h"
+#include "gtsam/navigation/ImuFactor.h"
+#include "gtsam/navigation/ScenarioRunner.h"
+#include "gtsam/nonlinear/Values.h"
 
 #include <list>
 

diff --git a/gtsam/navigation/tests/testConstantVelocityFactor.cpp b/gtsam/navigation/tests/testConstantVelocityFactor.cpp
index 540c27e..aaa16bb 100644
--- a/gtsam/navigation/tests/testConstantVelocityFactor.cpp
+++ b/gtsam/navigation/tests/testConstantVelocityFactor.cpp
@@ -15,12 +15,12 @@
  * @author  Asa Hammond
  */
 
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/navigation/ConstantVelocityFactor.h>
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/navigation/ConstantVelocityFactor.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 #include <list>
 
 /* ************************************************************************* */

diff --git a/gtsam/navigation/tests/testGPSFactor.cpp b/gtsam/navigation/tests/testGPSFactor.cpp
index cecfbea..b25a7e3 100644
--- a/gtsam/navigation/tests/testGPSFactor.cpp
+++ b/gtsam/navigation/tests/testGPSFactor.cpp
@@ -16,14 +16,14 @@
  * @date   January 22, 2014
  */
 
-#include <gtsam/navigation/GPSFactor.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/navigation/GPSFactor.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
-#include <GeographicLib/Config.h>
-#include <GeographicLib/LocalCartesian.hpp>
+#include "GeographicLib/Config.h"
+#include "GeographicLib/LocalCartesian.hpp"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/navigation/tests/testGeographicLib.cpp b/gtsam/navigation/tests/testGeographicLib.cpp
index 9dcc7e4..3217f5d 100644
--- a/gtsam/navigation/tests/testGeographicLib.cpp
+++ b/gtsam/navigation/tests/testGeographicLib.cpp
@@ -15,13 +15,13 @@
  * @author  Frank Dellaert
  */
 
-#include <GeographicLib/Config.h>
-#include <GeographicLib/Geocentric.hpp>
-#include <GeographicLib/UTMUPS.hpp>
-#include <GeographicLib/LocalCartesian.hpp>
+#include "GeographicLib/Config.h"
+#include "GeographicLib/Geocentric.hpp"
+#include "GeographicLib/UTMUPS.hpp"
+#include "GeographicLib/LocalCartesian.hpp"
 
-#include <gtsam/base/types.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/types.h"
+#include "CppUnitLite/TestHarness.h"
 
 #include <string>
 #include <iostream>

diff --git a/gtsam/navigation/tests/testImuBias.cpp b/gtsam/navigation/tests/testImuBias.cpp
index 517182f..7e23f6b 100644
--- a/gtsam/navigation/tests/testImuBias.cpp
+++ b/gtsam/navigation/tests/testImuBias.cpp
@@ -15,10 +15,10 @@
  * @author  Vadim Indelman, Stephen Williams
  */
 
-#include <gtsam/navigation/ImuBias.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/navigation/ImuBias.h"
+#include "gtsam/base/numericalDerivative.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std::placeholders;
 using namespace std;

diff --git a/gtsam/navigation/tests/testImuFactor.cpp b/gtsam/navigation/tests/testImuFactor.cpp
index d4bc763..b509437 100644
--- a/gtsam/navigation/tests/testImuFactor.cpp
+++ b/gtsam/navigation/tests/testImuFactor.cpp
@@ -20,16 +20,16 @@
 
 // #define ENABLE_TIMING // uncomment for timing results
 
-#include <gtsam/navigation/ImuFactor.h>
-#include <gtsam/navigation/ScenarioRunner.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/linear/Sampler.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/navigation/ImuFactor.h"
+#include "gtsam/navigation/ScenarioRunner.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/linear/Sampler.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+
+#include "CppUnitLite/TestHarness.h"
 #include <list>
 
 #include "imuFactorTesting.h"
@@ -717,10 +717,10 @@ TEST(ImuFactor, bodyPSensorNoBias) {
 }
 
 /* ************************************************************************* */
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/Marginals.h"
 
 TEST(ImuFactor, bodyPSensorWithBias) {
   gttic(bodyPSensorWithBias);

diff --git a/gtsam/navigation/tests/testMagFactor.cpp b/gtsam/navigation/tests/testMagFactor.cpp
index 2b5dee4..3f2e984 100644
--- a/gtsam/navigation/tests/testMagFactor.cpp
+++ b/gtsam/navigation/tests/testMagFactor.cpp
@@ -16,13 +16,13 @@
  * @date   January 29, 2014
  */
 
-#include <gtsam/navigation/MagFactor.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/navigation/MagFactor.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
-#include <GeographicLib/LocalCartesian.hpp>
+#include "GeographicLib/LocalCartesian.hpp"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/navigation/tests/testMagPoseFactor.cpp b/gtsam/navigation/tests/testMagPoseFactor.cpp
index cd9c2fa..fdee472 100644
--- a/gtsam/navigation/tests/testMagPoseFactor.cpp
+++ b/gtsam/navigation/tests/testMagPoseFactor.cpp
@@ -9,13 +9,13 @@
 
  * -------------------------------------------------------------------------- */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/navigation/MagPoseFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/navigation/MagPoseFactor.h"
 
 using namespace std::placeholders;
 using namespace gtsam;

diff --git a/gtsam/navigation/tests/testManifoldPreintegration.cpp b/gtsam/navigation/tests/testManifoldPreintegration.cpp
index 82f9876..a22d564 100644
--- a/gtsam/navigation/tests/testManifoldPreintegration.cpp
+++ b/gtsam/navigation/tests/testManifoldPreintegration.cpp
@@ -15,13 +15,13 @@
  * @author  Luca Carlone
  */
 
-#include <gtsam/navigation/ManifoldPreintegration.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/nonlinear/expressions.h>
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/expressionTesting.h>
+#include "gtsam/navigation/ManifoldPreintegration.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/nonlinear/expressions.h"
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/expressionTesting.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include "imuFactorTesting.h"
 

diff --git a/gtsam/navigation/tests/testNavExpressions.cpp b/gtsam/navigation/tests/testNavExpressions.cpp
index 374732f..625f178 100644
--- a/gtsam/navigation/tests/testNavExpressions.cpp
+++ b/gtsam/navigation/tests/testNavExpressions.cpp
@@ -16,14 +16,14 @@
  * @brief unit tests for navigation expression helpers
  */
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/navigation/NavState.h>
-#include <gtsam/navigation/expressions.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/slam/expressions.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/navigation/NavState.h"
+#include "gtsam/navigation/expressions.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/slam/expressions.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/navigation/tests/testNavState.cpp b/gtsam/navigation/tests/testNavState.cpp
index 4275314..eba3ca2 100644
--- a/gtsam/navigation/tests/testNavState.cpp
+++ b/gtsam/navigation/tests/testNavState.cpp
@@ -16,14 +16,14 @@
  * @date    July 2015
  */
 
-#include <gtsam/navigation/NavState.h>
+#include "gtsam/navigation/NavState.h"
 
-#include <gtsam/base/lieProxies.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/testLie.h>
+#include "gtsam/base/lieProxies.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/testLie.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std::placeholders;
 using namespace std;

diff --git a/gtsam/navigation/tests/testPoseVelocityBias.cpp b/gtsam/navigation/tests/testPoseVelocityBias.cpp
index f3c3633..89dc4d8 100644
--- a/gtsam/navigation/tests/testPoseVelocityBias.cpp
+++ b/gtsam/navigation/tests/testPoseVelocityBias.cpp
@@ -15,12 +15,12 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/navigation/PreintegrationBase.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/navigation/PreintegrationBase.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/navigation/tests/testPreintegratedRotation.cpp b/gtsam/navigation/tests/testPreintegratedRotation.cpp
index 468701e..20df002 100644
--- a/gtsam/navigation/tests/testPreintegratedRotation.cpp
+++ b/gtsam/navigation/tests/testPreintegratedRotation.cpp
@@ -15,9 +15,9 @@
  * @author Frank Dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/navigation/PreintegratedRotation.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/navigation/PreintegratedRotation.h"
 
 #include <memory>
 

diff --git a/gtsam/navigation/tests/testScenario.cpp b/gtsam/navigation/tests/testScenario.cpp
index 0df5195..09eb6c9 100644
--- a/gtsam/navigation/tests/testScenario.cpp
+++ b/gtsam/navigation/tests/testScenario.cpp
@@ -15,10 +15,10 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/navigation/Scenario.h>
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/navigation/Scenario.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 #include <cmath>
 
 using namespace std::placeholders;

diff --git a/gtsam/navigation/tests/testScenarioRunner.cpp b/gtsam/navigation/tests/testScenarioRunner.cpp
index e8b47bf..8c7561a 100644
--- a/gtsam/navigation/tests/testScenarioRunner.cpp
+++ b/gtsam/navigation/tests/testScenarioRunner.cpp
@@ -17,9 +17,9 @@
 
 // #define ENABLE_TIMING // uncomment for timing results
 
-#include <gtsam/navigation/ScenarioRunner.h>
-#include <gtsam/base/timing.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/navigation/ScenarioRunner.h"
+#include "gtsam/base/timing.h"
+#include "CppUnitLite/TestHarness.h"
 #include <cmath>
 
 using namespace std;

diff --git a/gtsam/navigation/tests/testSerializationNavigation.cpp b/gtsam/navigation/tests/testSerializationNavigation.cpp
index 6a21558..aeea50f 100644
--- a/gtsam/navigation/tests/testSerializationNavigation.cpp
+++ b/gtsam/navigation/tests/testSerializationNavigation.cpp
@@ -20,11 +20,11 @@
  * @date    February 2022
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/navigation/AttitudeFactor.h>
-#include <gtsam/navigation/CombinedImuFactor.h>
-#include <gtsam/navigation/ImuFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/navigation/AttitudeFactor.h"
+#include "gtsam/navigation/CombinedImuFactor.h"
+#include "gtsam/navigation/ImuFactor.h"
 
 #include <fstream>
 

diff --git a/gtsam/navigation/tests/testTangentPreintegration.cpp b/gtsam/navigation/tests/testTangentPreintegration.cpp
index af91f4f..1ec4c37 100644
--- a/gtsam/navigation/tests/testTangentPreintegration.cpp
+++ b/gtsam/navigation/tests/testTangentPreintegration.cpp
@@ -15,13 +15,13 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/navigation/TangentPreintegration.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/nonlinear/expressions.h>
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/expressionTesting.h>
+#include "gtsam/navigation/TangentPreintegration.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/nonlinear/expressions.h"
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/expressionTesting.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include "imuFactorTesting.h"
 

diff --git a/gtsam/nonlinear/AdaptAutoDiff.h b/gtsam/nonlinear/AdaptAutoDiff.h
index 8f67eb3..0399334 100644
--- a/gtsam/nonlinear/AdaptAutoDiff.h
+++ b/gtsam/nonlinear/AdaptAutoDiff.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/base/OptionalJacobian.h>
-#include <gtsam/3rdparty/ceres/autodiff.h>
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/base/OptionalJacobian.h"
+#include "gtsam/3rdparty/ceres/autodiff.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/BatchFixedLagSmoother.cpp b/gtsam/nonlinear/BatchFixedLagSmoother.cpp
index 4545c15..f54ebb8 100644
--- a/gtsam/nonlinear/BatchFixedLagSmoother.cpp
+++ b/gtsam/nonlinear/BatchFixedLagSmoother.cpp
@@ -17,11 +17,11 @@
  * @date    Oct 14, 2012
  */
 
-#include <gtsam/nonlinear/BatchFixedLagSmoother.h>
-#include <gtsam/nonlinear/LinearContainerFactor.h>
-#include <gtsam/linear/GaussianJunctionTree.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianFactor.h>
+#include "gtsam/nonlinear/BatchFixedLagSmoother.h"
+#include "gtsam/nonlinear/LinearContainerFactor.h"
+#include "gtsam/linear/GaussianJunctionTree.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianFactor.h"
 
 using namespace std;
 

diff --git a/gtsam/nonlinear/BatchFixedLagSmoother.h b/gtsam/nonlinear/BatchFixedLagSmoother.h
index 8dde520..763f0d2 100644
--- a/gtsam/nonlinear/BatchFixedLagSmoother.h
+++ b/gtsam/nonlinear/BatchFixedLagSmoother.h
@@ -20,8 +20,8 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/nonlinear/FixedLagSmoother.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/nonlinear/FixedLagSmoother.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 #include <queue>
 
 namespace gtsam {

diff --git a/gtsam/nonlinear/CustomFactor.cpp b/gtsam/nonlinear/CustomFactor.cpp
index a6415df..530a51d 100644
--- a/gtsam/nonlinear/CustomFactor.cpp
+++ b/gtsam/nonlinear/CustomFactor.cpp
@@ -15,7 +15,7 @@
  * @author  Fan Jiang
  */
 
-#include <gtsam/nonlinear/CustomFactor.h>
+#include "gtsam/nonlinear/CustomFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/CustomFactor.h b/gtsam/nonlinear/CustomFactor.h
index c4015db..ab32d36 100644
--- a/gtsam/nonlinear/CustomFactor.h
+++ b/gtsam/nonlinear/CustomFactor.h
@@ -17,7 +17,7 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/DoglegOptimizer.cpp b/gtsam/nonlinear/DoglegOptimizer.cpp
index a34000a..c1bb385 100644
--- a/gtsam/nonlinear/DoglegOptimizer.cpp
+++ b/gtsam/nonlinear/DoglegOptimizer.cpp
@@ -16,13 +16,13 @@
  * @date   Feb 26, 2012
  */
 
-#include <gtsam/nonlinear/DoglegOptimizer.h>
-#include <gtsam/nonlinear/DoglegOptimizerImpl.h>
-#include <gtsam/nonlinear/internal/NonlinearOptimizerState.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/nonlinear/DoglegOptimizer.h"
+#include "gtsam/nonlinear/DoglegOptimizerImpl.h"
+#include "gtsam/nonlinear/internal/NonlinearOptimizerState.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/DoglegOptimizer.h b/gtsam/nonlinear/DoglegOptimizer.h
index af6a184..94ffdd3 100644
--- a/gtsam/nonlinear/DoglegOptimizer.h
+++ b/gtsam/nonlinear/DoglegOptimizer.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearOptimizer.h>
+#include "gtsam/nonlinear/NonlinearOptimizer.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/DoglegOptimizerImpl.cpp b/gtsam/nonlinear/DoglegOptimizerImpl.cpp
index e82a513..dc2a0e1 100644
--- a/gtsam/nonlinear/DoglegOptimizerImpl.cpp
+++ b/gtsam/nonlinear/DoglegOptimizerImpl.cpp
@@ -17,7 +17,7 @@
 
 #include <cmath>
 #include <cassert>
-#include <gtsam/nonlinear/DoglegOptimizerImpl.h>
+#include "gtsam/nonlinear/DoglegOptimizerImpl.h"
 
 using namespace std;
 

diff --git a/gtsam/nonlinear/DoglegOptimizerImpl.h b/gtsam/nonlinear/DoglegOptimizerImpl.h
index 1038dd5..db3164a 100644
--- a/gtsam/nonlinear/DoglegOptimizerImpl.h
+++ b/gtsam/nonlinear/DoglegOptimizerImpl.h
@@ -19,8 +19,8 @@
 #include <iomanip>
 #include <cassert>
 
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/inference/Ordering.h>
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/inference/Ordering.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/Expression-inl.h b/gtsam/nonlinear/Expression-inl.h
index b09bcb3..71b03ee 100644
--- a/gtsam/nonlinear/Expression-inl.h
+++ b/gtsam/nonlinear/Expression-inl.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/internal/ExpressionNode.h>
+#include "gtsam/nonlinear/internal/ExpressionNode.h"
 
 #include <map>
 #include <memory>

diff --git a/gtsam/nonlinear/Expression.h b/gtsam/nonlinear/Expression.h
index e501739..3b7e21f 100644
--- a/gtsam/nonlinear/Expression.h
+++ b/gtsam/nonlinear/Expression.h
@@ -19,10 +19,10 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/internal/JacobianMap.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/OptionalJacobian.h>
-#include <gtsam/base/VectorSpace.h>
+#include "gtsam/nonlinear/internal/JacobianMap.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/OptionalJacobian.h"
+#include "gtsam/base/VectorSpace.h"
 
 #include <map>
 
@@ -304,5 +304,5 @@ std::vector<Expression<T> > createUnknowns(size_t n, char c, size_t start = 0);
 
 } // namespace gtsam
 
-#include <gtsam/nonlinear/Expression-inl.h>
+#include "gtsam/nonlinear/Expression-inl.h"
 

diff --git a/gtsam/nonlinear/ExpressionFactor.h b/gtsam/nonlinear/ExpressionFactor.h
index d9af193..cb334d7 100644
--- a/gtsam/nonlinear/ExpressionFactor.h
+++ b/gtsam/nonlinear/ExpressionFactor.h
@@ -20,10 +20,10 @@
 #pragma once
 
 #include <array>
-#include <gtsam/config.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/nonlinear/Expression.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/config.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/nonlinear/Expression.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 #include <numeric>
 #include <utility>

diff --git a/gtsam/nonlinear/ExpressionFactorGraph.h b/gtsam/nonlinear/ExpressionFactorGraph.h
index 5de166f..95703ef 100644
--- a/gtsam/nonlinear/ExpressionFactorGraph.h
+++ b/gtsam/nonlinear/ExpressionFactorGraph.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/ExtendedKalmanFilter-inl.h b/gtsam/nonlinear/ExtendedKalmanFilter-inl.h
index 072f40b..4a2f68c 100644
--- a/gtsam/nonlinear/ExtendedKalmanFilter-inl.h
+++ b/gtsam/nonlinear/ExtendedKalmanFilter-inl.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/ExtendedKalmanFilter.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
+#include "gtsam/nonlinear/ExtendedKalmanFilter.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
 
 #include <cassert>
 

diff --git a/gtsam/nonlinear/ExtendedKalmanFilter.h b/gtsam/nonlinear/ExtendedKalmanFilter.h
index 6dc79cd..7123adc 100644
--- a/gtsam/nonlinear/ExtendedKalmanFilter.h
+++ b/gtsam/nonlinear/ExtendedKalmanFilter.h
@@ -19,8 +19,8 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 
@@ -102,4 +102,4 @@ class ExtendedKalmanFilter {
 
 }  // namespace
 
-#include <gtsam/nonlinear/ExtendedKalmanFilter-inl.h>
+#include "gtsam/nonlinear/ExtendedKalmanFilter-inl.h"

diff --git a/gtsam/nonlinear/FixedLagSmoother.cpp b/gtsam/nonlinear/FixedLagSmoother.cpp
index ce32422..535005f 100644
--- a/gtsam/nonlinear/FixedLagSmoother.cpp
+++ b/gtsam/nonlinear/FixedLagSmoother.cpp
@@ -17,7 +17,7 @@
  * @date    Feb 27, 2013
  */
 
-#include <gtsam/nonlinear/FixedLagSmoother.h>
+#include "gtsam/nonlinear/FixedLagSmoother.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/FixedLagSmoother.h b/gtsam/nonlinear/FixedLagSmoother.h
index ba17b47..82c3daa 100644
--- a/gtsam/nonlinear/FixedLagSmoother.h
+++ b/gtsam/nonlinear/FixedLagSmoother.h
@@ -20,10 +20,10 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/dllexport.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/dllexport.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
 
 #include <map>
 #include <vector>

diff --git a/gtsam/nonlinear/FunctorizedFactor.h b/gtsam/nonlinear/FunctorizedFactor.h
index 128de58..de398c6 100644
--- a/gtsam/nonlinear/FunctorizedFactor.h
+++ b/gtsam/nonlinear/FunctorizedFactor.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 #include <cmath>
 

diff --git a/gtsam/nonlinear/GaussNewtonOptimizer.cpp b/gtsam/nonlinear/GaussNewtonOptimizer.cpp
index c31451e..ebe84ae 100644
--- a/gtsam/nonlinear/GaussNewtonOptimizer.cpp
+++ b/gtsam/nonlinear/GaussNewtonOptimizer.cpp
@@ -16,10 +16,10 @@
  * @date   Feb 26, 2012
  */
 
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/internal/NonlinearOptimizerState.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/internal/NonlinearOptimizerState.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/GaussNewtonOptimizer.h b/gtsam/nonlinear/GaussNewtonOptimizer.h
index 1c40f7f..7aed28f 100644
--- a/gtsam/nonlinear/GaussNewtonOptimizer.h
+++ b/gtsam/nonlinear/GaussNewtonOptimizer.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearOptimizer.h>
+#include "gtsam/nonlinear/NonlinearOptimizer.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/GncOptimizer.h b/gtsam/nonlinear/GncOptimizer.h
index 0fe5761..3934936 100644
--- a/gtsam/nonlinear/GncOptimizer.h
+++ b/gtsam/nonlinear/GncOptimizer.h
@@ -26,9 +26,9 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/GncParams.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/internal/ChiSquaredInverse.h>
+#include "gtsam/nonlinear/GncParams.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/internal/ChiSquaredInverse.h"
 
 namespace gtsam {
 /*

diff --git a/gtsam/nonlinear/GncParams.h b/gtsam/nonlinear/GncParams.h
index b1237b7..053e73c 100644
--- a/gtsam/nonlinear/GncParams.h
+++ b/gtsam/nonlinear/GncParams.h
@@ -26,8 +26,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/GraphvizFormatting.cpp b/gtsam/nonlinear/GraphvizFormatting.cpp
index 95c6e7f..e7931b2 100644
--- a/gtsam/nonlinear/GraphvizFormatting.cpp
+++ b/gtsam/nonlinear/GraphvizFormatting.cpp
@@ -16,12 +16,12 @@
  * @date December, 2021
  */
 
-#include <gtsam/nonlinear/GraphvizFormatting.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/GraphvizFormatting.h"
+#include "gtsam/nonlinear/Values.h"
 
 // TODO(frank): nonlinear should not depend on geometry:
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
 
 #include <limits>
 

diff --git a/gtsam/nonlinear/GraphvizFormatting.h b/gtsam/nonlinear/GraphvizFormatting.h
index fc3cfc9..fd5fd8c 100644
--- a/gtsam/nonlinear/GraphvizFormatting.h
+++ b/gtsam/nonlinear/GraphvizFormatting.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/inference/DotWriter.h>
+#include "gtsam/inference/DotWriter.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/ISAM2-impl.cpp b/gtsam/nonlinear/ISAM2-impl.cpp
index d0b27f3..920ec0d 100644
--- a/gtsam/nonlinear/ISAM2-impl.cpp
+++ b/gtsam/nonlinear/ISAM2-impl.cpp
@@ -17,10 +17,10 @@
  * @author  Richard Roberts
  */
 
-#include <gtsam/base/debug.h>
-#include <gtsam/config.h>            // for GTSAM_USE_TBB
-#include <gtsam/inference/Symbol.h>  // for selective linearization thresholds
-#include <gtsam/nonlinear/ISAM2-impl.h>
+#include "gtsam/base/debug.h"
+#include "gtsam/config.h"            // for GTSAM_USE_TBB
+#include "gtsam/inference/Symbol.h"  // for selective linearization thresholds
+#include "gtsam/nonlinear/ISAM2-impl.h"
 
 #include <functional>
 #include <limits>

diff --git a/gtsam/nonlinear/ISAM2-impl.h b/gtsam/nonlinear/ISAM2-impl.h
index bb02102..56df0cf 100644
--- a/gtsam/nonlinear/ISAM2-impl.h
+++ b/gtsam/nonlinear/ISAM2-impl.h
@@ -18,15 +18,15 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/nonlinear/ISAM2Result.h>
-
-#include <gtsam/base/debug.h>
-#include <gtsam/inference/JunctionTree-inst.h>  // We need the inst file because we'll make a special JT templated on ISAM2
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/inference/VariableIndex.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/linear/GaussianEliminationTree.h>
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/nonlinear/ISAM2Result.h"
+
+#include "gtsam/base/debug.h"
+#include "gtsam/inference/JunctionTree-inst.h"  // We need the inst file because we'll make a special JT templated on ISAM2
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/inference/VariableIndex.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/linear/GaussianEliminationTree.h"
 
 #include <algorithm>
 #include <limits>

diff --git a/gtsam/nonlinear/ISAM2.cpp b/gtsam/nonlinear/ISAM2.cpp
index 0eb2dee..295cb8b 100644
--- a/gtsam/nonlinear/ISAM2.cpp
+++ b/gtsam/nonlinear/ISAM2.cpp
@@ -16,14 +16,14 @@
  * @author  Michael Kaess, Richard Roberts, Frank Dellaert
  */
 
-#include <gtsam/nonlinear/ISAM2-impl.h>
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/nonlinear/ISAM2Result.h>
-
-#include <gtsam/base/debug.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/inference/BayesTree-inst.h>
-#include <gtsam/nonlinear/LinearContainerFactor.h>
+#include "gtsam/nonlinear/ISAM2-impl.h"
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/nonlinear/ISAM2Result.h"
+
+#include "gtsam/base/debug.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/inference/BayesTree-inst.h"
+#include "gtsam/nonlinear/LinearContainerFactor.h"
 
 #include <algorithm>
 #include <map>

diff --git a/gtsam/nonlinear/ISAM2.h b/gtsam/nonlinear/ISAM2.h
index d3abd95..15ac386 100644
--- a/gtsam/nonlinear/ISAM2.h
+++ b/gtsam/nonlinear/ISAM2.h
@@ -20,12 +20,12 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/nonlinear/ISAM2Clique.h>
-#include <gtsam/nonlinear/ISAM2Params.h>
-#include <gtsam/nonlinear/ISAM2Result.h>
-#include <gtsam/nonlinear/ISAM2UpdateParams.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/nonlinear/ISAM2Clique.h"
+#include "gtsam/nonlinear/ISAM2Params.h"
+#include "gtsam/nonlinear/ISAM2Result.h"
+#include "gtsam/nonlinear/ISAM2UpdateParams.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 #include <vector>
 

diff --git a/gtsam/nonlinear/ISAM2Clique.cpp b/gtsam/nonlinear/ISAM2Clique.cpp
index 64ab7c6..2f3714e 100644
--- a/gtsam/nonlinear/ISAM2Clique.cpp
+++ b/gtsam/nonlinear/ISAM2Clique.cpp
@@ -15,10 +15,10 @@
  * @author  Michael Kaess, Richard Roberts, Frank Dellaert
  */
 
-#include <gtsam/inference/BayesTreeCliqueBase-inst.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/linearAlgorithms-inst.h>
-#include <gtsam/nonlinear/ISAM2Clique.h>
+#include "gtsam/inference/BayesTreeCliqueBase-inst.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/linearAlgorithms-inst.h"
+#include "gtsam/nonlinear/ISAM2Clique.h"
 
 #include <stack>
 #include <utility>

diff --git a/gtsam/nonlinear/ISAM2Clique.h b/gtsam/nonlinear/ISAM2Clique.h
index fde9dd3..b08da8b 100644
--- a/gtsam/nonlinear/ISAM2Clique.h
+++ b/gtsam/nonlinear/ISAM2Clique.h
@@ -19,11 +19,11 @@
 
 #pragma once
 
-#include <gtsam/inference/BayesTreeCliqueBase.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
+#include "gtsam/inference/BayesTreeCliqueBase.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
 #include <string>
 
 namespace gtsam {

diff --git a/gtsam/nonlinear/ISAM2Params.cpp b/gtsam/nonlinear/ISAM2Params.cpp
index ec9d5b7..2dc9412 100644
--- a/gtsam/nonlinear/ISAM2Params.cpp
+++ b/gtsam/nonlinear/ISAM2Params.cpp
@@ -15,7 +15,7 @@
  * @author  Michael Kaess, Richard Roberts, Frank Dellaert
  */
 
-#include <gtsam/nonlinear/ISAM2Params.h>
+#include "gtsam/nonlinear/ISAM2Params.h"
 
 using namespace std;
 

diff --git a/gtsam/nonlinear/ISAM2Params.h b/gtsam/nonlinear/ISAM2Params.h
index bc79cd4..4986310 100644
--- a/gtsam/nonlinear/ISAM2Params.h
+++ b/gtsam/nonlinear/ISAM2Params.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/nonlinear/DoglegOptimizerImpl.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/nonlinear/DoglegOptimizerImpl.h"
 
 #include <string>
 #include <variant>

diff --git a/gtsam/nonlinear/ISAM2Result.h b/gtsam/nonlinear/ISAM2Result.h
index ef594f6..615122e 100644
--- a/gtsam/nonlinear/ISAM2Result.h
+++ b/gtsam/nonlinear/ISAM2Result.h
@@ -22,10 +22,10 @@
 #include <string>
 #include <vector>
 
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/nonlinear/DoglegOptimizerImpl.h>
-#include <gtsam/nonlinear/ISAM2Params.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/nonlinear/DoglegOptimizerImpl.h"
+#include "gtsam/nonlinear/ISAM2Params.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/ISAM2UpdateParams.h b/gtsam/nonlinear/ISAM2UpdateParams.h
index fff0478..fed8508 100644
--- a/gtsam/nonlinear/ISAM2UpdateParams.h
+++ b/gtsam/nonlinear/ISAM2UpdateParams.h
@@ -16,10 +16,10 @@
 
 #pragma once
 
-#include <gtsam/base/FastList.h>
-#include <gtsam/dllexport.h>              // GTSAM_EXPORT
-#include <gtsam/inference/Key.h>          // Key, KeySet
-#include <gtsam/nonlinear/ISAM2Result.h>  //FactorIndices
+#include "gtsam/base/FastList.h"
+#include "gtsam/dllexport.h"              // GTSAM_EXPORT
+#include "gtsam/inference/Key.h"          // Key, KeySet
+#include "gtsam/nonlinear/ISAM2Result.h"  //FactorIndices
 #include <optional>
 
 namespace gtsam {

diff --git a/gtsam/nonlinear/LevenbergMarquardtOptimizer.cpp b/gtsam/nonlinear/LevenbergMarquardtOptimizer.cpp
index 99682fb..89454b9 100644
--- a/gtsam/nonlinear/LevenbergMarquardtOptimizer.cpp
+++ b/gtsam/nonlinear/LevenbergMarquardtOptimizer.cpp
@@ -18,16 +18,16 @@
  * @date    Feb 26, 2012
  */
 
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/internal/LevenbergMarquardtState.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/linearExceptions.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/Vector.h>
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/internal/LevenbergMarquardtState.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/linearExceptions.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/Vector.h"
 #ifdef GTSAM_USE_BOOST_FEATURES
-#include <gtsam/base/timing.h>
+#include "gtsam/base/timing.h"
 #endif
 
 #include <cmath>

diff --git a/gtsam/nonlinear/LevenbergMarquardtOptimizer.h b/gtsam/nonlinear/LevenbergMarquardtOptimizer.h
index 826eed5..fc27de1 100644
--- a/gtsam/nonlinear/LevenbergMarquardtOptimizer.h
+++ b/gtsam/nonlinear/LevenbergMarquardtOptimizer.h
@@ -20,9 +20,9 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearOptimizer.h>
-#include <gtsam/nonlinear/LevenbergMarquardtParams.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/nonlinear/NonlinearOptimizer.h"
+#include "gtsam/nonlinear/LevenbergMarquardtParams.h"
+#include "gtsam/linear/VectorValues.h"
 #include <chrono>
 
 class NonlinearOptimizerMoreOptimizationTest;

diff --git a/gtsam/nonlinear/LevenbergMarquardtParams.cpp b/gtsam/nonlinear/LevenbergMarquardtParams.cpp
index 39b7731..3f95daa 100644
--- a/gtsam/nonlinear/LevenbergMarquardtParams.cpp
+++ b/gtsam/nonlinear/LevenbergMarquardtParams.cpp
@@ -18,7 +18,7 @@
  * @date    Feb 26, 2012
  */
 
-#include <gtsam/nonlinear/LevenbergMarquardtParams.h>
+#include "gtsam/nonlinear/LevenbergMarquardtParams.h"
 #include <iostream>
 #include <string>
 

diff --git a/gtsam/nonlinear/LevenbergMarquardtParams.h b/gtsam/nonlinear/LevenbergMarquardtParams.h
index b2eae36..0be6d1c 100644
--- a/gtsam/nonlinear/LevenbergMarquardtParams.h
+++ b/gtsam/nonlinear/LevenbergMarquardtParams.h
@@ -20,8 +20,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearOptimizerParams.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/nonlinear/NonlinearOptimizerParams.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/LinearContainerFactor.cpp b/gtsam/nonlinear/LinearContainerFactor.cpp
index 160423a..baa4d90 100644
--- a/gtsam/nonlinear/LinearContainerFactor.cpp
+++ b/gtsam/nonlinear/LinearContainerFactor.cpp
@@ -5,11 +5,11 @@
  * @author Alex Cunningham
  */
 
-#include <gtsam/nonlinear/LinearContainerFactor.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
+#include "gtsam/nonlinear/LinearContainerFactor.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/LinearContainerFactor.h b/gtsam/nonlinear/LinearContainerFactor.h
index dfbf221..43db372 100644
--- a/gtsam/nonlinear/LinearContainerFactor.h
+++ b/gtsam/nonlinear/LinearContainerFactor.h
@@ -9,8 +9,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/base/std_optional_serialization.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/base/std_optional_serialization.h"
 
 #include <optional>
 

diff --git a/gtsam/nonlinear/Marginals.cpp b/gtsam/nonlinear/Marginals.cpp
index 41212ed..cbe458f 100644
--- a/gtsam/nonlinear/Marginals.cpp
+++ b/gtsam/nonlinear/Marginals.cpp
@@ -16,10 +16,10 @@
  * @date May 14, 2012
  */
 
-#include <gtsam/base/timing.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/base/timing.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/nonlinear/Marginals.h"
 
 using namespace std;
 

diff --git a/gtsam/nonlinear/Marginals.h b/gtsam/nonlinear/Marginals.h
index 41707ea..3bef4c8 100644
--- a/gtsam/nonlinear/Marginals.h
+++ b/gtsam/nonlinear/Marginals.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/NonlinearConjugateGradientOptimizer.cpp b/gtsam/nonlinear/NonlinearConjugateGradientOptimizer.cpp
index 8b85427..2f37b49 100644
--- a/gtsam/nonlinear/NonlinearConjugateGradientOptimizer.cpp
+++ b/gtsam/nonlinear/NonlinearConjugateGradientOptimizer.cpp
@@ -16,11 +16,11 @@
  * @date   Jun 11, 2012
  */
 
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/internal/NonlinearOptimizerState.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/internal/NonlinearOptimizerState.h"
 
 #include <cmath>
 

diff --git a/gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h b/gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h
index a36fa09..92a8797 100644
--- a/gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h
+++ b/gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/nonlinear/NonlinearOptimizer.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/nonlinear/NonlinearOptimizer.h"
 
 #include <stdexcept>
 

diff --git a/gtsam/nonlinear/NonlinearEquality.h b/gtsam/nonlinear/NonlinearEquality.h
index f81486b..39c923a 100644
--- a/gtsam/nonlinear/NonlinearEquality.h
+++ b/gtsam/nonlinear/NonlinearEquality.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/Manifold.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/Manifold.h"
 
 #include <limits>
 #include <iostream>

diff --git a/gtsam/nonlinear/NonlinearFactor.cpp b/gtsam/nonlinear/NonlinearFactor.cpp
index 5eabfac..f5120ca 100644
--- a/gtsam/nonlinear/NonlinearFactor.cpp
+++ b/gtsam/nonlinear/NonlinearFactor.cpp
@@ -16,8 +16,8 @@
  * @author  Richard Roberts
  */
 
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 #include <cassert>
 

diff --git a/gtsam/nonlinear/NonlinearFactor.h b/gtsam/nonlinear/NonlinearFactor.h
index 101743b..542273e 100644
--- a/gtsam/nonlinear/NonlinearFactor.h
+++ b/gtsam/nonlinear/NonlinearFactor.h
@@ -21,13 +21,13 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/hybrid/HybridValues.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/inference/Factor.h>
-#include <gtsam/base/OptionalJacobian.h>
-#include <gtsam/base/utilities.h>
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/hybrid/HybridValues.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/inference/Factor.h"
+#include "gtsam/base/OptionalJacobian.h"
+#include "gtsam/base/utilities.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/base_object.hpp>

diff --git a/gtsam/nonlinear/NonlinearFactorGraph.cpp b/gtsam/nonlinear/NonlinearFactorGraph.cpp
index 6e57a2c..04beaf0 100644
--- a/gtsam/nonlinear/NonlinearFactorGraph.cpp
+++ b/gtsam/nonlinear/NonlinearFactorGraph.cpp
@@ -17,17 +17,17 @@
  * @author  Christian Potthast
  */
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/linearExceptions.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/FactorGraph-inst.h>
-#include <gtsam/config.h> // for GTSAM_USE_TBB
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/linearExceptions.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/FactorGraph-inst.h"
+#include "gtsam/config.h" // for GTSAM_USE_TBB
 
 #ifdef GTSAM_USE_TBB
 #  include <tbb/parallel_for.h>

diff --git a/gtsam/nonlinear/NonlinearFactorGraph.h b/gtsam/nonlinear/NonlinearFactorGraph.h
index bf56d83..3388f28 100644
--- a/gtsam/nonlinear/NonlinearFactorGraph.h
+++ b/gtsam/nonlinear/NonlinearFactorGraph.h
@@ -21,11 +21,11 @@
 
 #pragma once
 
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/nonlinear/GraphvizFormatting.h>
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/nonlinear/PriorFactor.h>
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/nonlinear/GraphvizFormatting.h"
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/nonlinear/PriorFactor.h"
 
 #include <memory>
 #include <functional>

diff --git a/gtsam/nonlinear/NonlinearISAM.cpp b/gtsam/nonlinear/NonlinearISAM.cpp
index fb157fa..d7d1551 100644
--- a/gtsam/nonlinear/NonlinearISAM.cpp
+++ b/gtsam/nonlinear/NonlinearISAM.cpp
@@ -15,9 +15,9 @@
  * @author Viorela Ila and Richard Roberts
  */
 
-#include <gtsam/nonlinear/NonlinearISAM.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/inference/Ordering.h>
+#include "gtsam/nonlinear/NonlinearISAM.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/inference/Ordering.h"
 
 #include <iostream>
 

diff --git a/gtsam/nonlinear/NonlinearISAM.h b/gtsam/nonlinear/NonlinearISAM.h
index 9c4b3d3..0f20024 100644
--- a/gtsam/nonlinear/NonlinearISAM.h
+++ b/gtsam/nonlinear/NonlinearISAM.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/linear/GaussianISAM.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/linear/GaussianISAM.h"
 
 namespace gtsam {
 /**

diff --git a/gtsam/nonlinear/NonlinearOptimizer.cpp b/gtsam/nonlinear/NonlinearOptimizer.cpp
index 7ca5ead..e524ed7 100644
--- a/gtsam/nonlinear/NonlinearOptimizer.cpp
+++ b/gtsam/nonlinear/NonlinearOptimizer.cpp
@@ -16,16 +16,16 @@
  * @date Jul 17, 2010
  */
 
-#include <gtsam/nonlinear/NonlinearOptimizer.h>
-#include <gtsam/nonlinear/internal/NonlinearOptimizerState.h>
-#include <gtsam/linear/GaussianEliminationTree.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/SubgraphSolver.h>
-#include <gtsam/linear/PCGSolver.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
-
-#include <gtsam/inference/Ordering.h>
+#include "gtsam/nonlinear/NonlinearOptimizer.h"
+#include "gtsam/nonlinear/internal/NonlinearOptimizerState.h"
+#include "gtsam/linear/GaussianEliminationTree.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/SubgraphSolver.h"
+#include "gtsam/linear/PCGSolver.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
+
+#include "gtsam/inference/Ordering.h"
 
 #include <stdexcept>
 #include <iostream>

diff --git a/gtsam/nonlinear/NonlinearOptimizer.h b/gtsam/nonlinear/NonlinearOptimizer.h
index f79c361..f937304 100644
--- a/gtsam/nonlinear/NonlinearOptimizer.h
+++ b/gtsam/nonlinear/NonlinearOptimizer.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearOptimizerParams.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearOptimizerParams.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/NonlinearOptimizerParams.cpp b/gtsam/nonlinear/NonlinearOptimizerParams.cpp
index 55dfd45..e3744cb 100644
--- a/gtsam/nonlinear/NonlinearOptimizerParams.cpp
+++ b/gtsam/nonlinear/NonlinearOptimizerParams.cpp
@@ -8,7 +8,7 @@
  * @author Andrew Melim
  */
 
-#include <gtsam/nonlinear/NonlinearOptimizerParams.h>
+#include "gtsam/nonlinear/NonlinearOptimizerParams.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/NonlinearOptimizerParams.h b/gtsam/nonlinear/NonlinearOptimizerParams.h
index cef7e85..ef3590d 100644
--- a/gtsam/nonlinear/NonlinearOptimizerParams.h
+++ b/gtsam/nonlinear/NonlinearOptimizerParams.h
@@ -21,8 +21,8 @@
 
 #pragma once
 
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/SubgraphSolver.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/SubgraphSolver.h"
 
 #include <string>
 #include <optional>

diff --git a/gtsam/nonlinear/PriorFactor.h b/gtsam/nonlinear/PriorFactor.h
index 1593734..553206a 100644
--- a/gtsam/nonlinear/PriorFactor.h
+++ b/gtsam/nonlinear/PriorFactor.h
@@ -15,8 +15,8 @@
  **/
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/base/Testable.h"
 
 #include <string>
 

diff --git a/gtsam/nonlinear/Symbol.h b/gtsam/nonlinear/Symbol.h
index 0ccac6c..79ab41d 100644
--- a/gtsam/nonlinear/Symbol.h
+++ b/gtsam/nonlinear/Symbol.h
@@ -18,5 +18,5 @@
 
 #pragma once
 
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 

diff --git a/gtsam/nonlinear/Values-inl.h b/gtsam/nonlinear/Values-inl.h
index 59ec208..1ea7956 100644
--- a/gtsam/nonlinear/Values-inl.h
+++ b/gtsam/nonlinear/Values-inl.h
@@ -25,9 +25,9 @@
 #pragma once
 
 #include <utility>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/Values.h"
 
-#include <gtsam/nonlinear/Values.h> // Only so Eclipse finds class definition
+#include "gtsam/nonlinear/Values.h" // Only so Eclipse finds class definition
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/Values.cpp b/gtsam/nonlinear/Values.cpp
index 1caaa9d..081c601 100644
--- a/gtsam/nonlinear/Values.cpp
+++ b/gtsam/nonlinear/Values.cpp
@@ -22,8 +22,8 @@
  *  which is also a manifold element, and hence supports operations dim, retract, and localCoordinates.
  */
 
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/linear/VectorValues.h"
 
 #include <list>
 #include <memory>

diff --git a/gtsam/nonlinear/Values.h b/gtsam/nonlinear/Values.h
index 2fe64d9..248e3a2 100644
--- a/gtsam/nonlinear/Values.h
+++ b/gtsam/nonlinear/Values.h
@@ -24,10 +24,10 @@
 
 #pragma once
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/FastDefaultAllocator.h>
-#include <gtsam/base/GenericValue.h>
-#include <gtsam/base/VectorSpace.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/FastDefaultAllocator.h"
+#include "gtsam/base/GenericValue.h"
+#include "gtsam/base/VectorSpace.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/unique_ptr.hpp>
@@ -523,4 +523,4 @@ namespace gtsam {
 } //\ namespace gtsam
 
 
-#include <gtsam/nonlinear/Values-inl.h>
+#include "gtsam/nonlinear/Values-inl.h"

diff --git a/gtsam/nonlinear/WhiteNoiseFactor.h b/gtsam/nonlinear/WhiteNoiseFactor.h
index a8142c2..fcafe05 100644
--- a/gtsam/nonlinear/WhiteNoiseFactor.h
+++ b/gtsam/nonlinear/WhiteNoiseFactor.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/linear/HessianFactor.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/linear/HessianFactor.h"
 #include <cmath>
 
 namespace gtsam {

diff --git a/gtsam/nonlinear/expressionTesting.h b/gtsam/nonlinear/expressionTesting.h
index a532699..237138c 100644
--- a/gtsam/nonlinear/expressionTesting.h
+++ b/gtsam/nonlinear/expressionTesting.h
@@ -19,9 +19,9 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/base/Testable.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/expressions.h b/gtsam/nonlinear/expressions.h
index 19fd257..1017ee4 100644
--- a/gtsam/nonlinear/expressions.h
+++ b/gtsam/nonlinear/expressions.h
@@ -7,8 +7,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/Expression.h>
-#include <gtsam/base/Lie.h>
+#include "gtsam/nonlinear/Expression.h"
+#include "gtsam/base/Lie.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/factorTesting.h b/gtsam/nonlinear/factorTesting.h
index ff7b2ca..3856e42 100644
--- a/gtsam/nonlinear/factorTesting.h
+++ b/gtsam/nonlinear/factorTesting.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/base/numericalDerivative.h"
 #include <string>
 #include <vector>
 

diff --git a/gtsam/nonlinear/internal/CallRecord.h b/gtsam/nonlinear/internal/CallRecord.h
index 707c617..e10d6d2 100644
--- a/gtsam/nonlinear/internal/CallRecord.h
+++ b/gtsam/nonlinear/internal/CallRecord.h
@@ -20,7 +20,7 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/internal/JacobianMap.h>
+#include "gtsam/nonlinear/internal/JacobianMap.h"
 
 namespace gtsam {
 namespace internal {

diff --git a/gtsam/nonlinear/internal/ChiSquaredInverse.h b/gtsam/nonlinear/internal/ChiSquaredInverse.h
index 6707be1..5ae75cb 100644
--- a/gtsam/nonlinear/internal/ChiSquaredInverse.h
+++ b/gtsam/nonlinear/internal/ChiSquaredInverse.h
@@ -21,7 +21,7 @@
 
 #pragma once
 
-#include <gtsam/3rdparty/cephes/cephes.h>
+#include "gtsam/3rdparty/cephes/cephes.h"
 
 namespace gtsam {
 namespace internal {

diff --git a/gtsam/nonlinear/internal/ExecutionTrace.h b/gtsam/nonlinear/internal/ExecutionTrace.h
index 73d920e..df3613c 100644
--- a/gtsam/nonlinear/internal/ExecutionTrace.h
+++ b/gtsam/nonlinear/internal/ExecutionTrace.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/config.h>      // Configuration from CMake
-#include <gtsam/nonlinear/internal/JacobianMap.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/Manifold.h>
+#include "gtsam/config.h"      // Configuration from CMake
+#include "gtsam/nonlinear/internal/JacobianMap.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/Manifold.h"
 
 #include <Eigen/Core>
 

diff --git a/gtsam/nonlinear/internal/ExpressionNode.h b/gtsam/nonlinear/internal/ExpressionNode.h
index 25587f5..68b2ac6 100644
--- a/gtsam/nonlinear/internal/ExpressionNode.h
+++ b/gtsam/nonlinear/internal/ExpressionNode.h
@@ -19,9 +19,9 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/internal/ExecutionTrace.h>
-#include <gtsam/nonlinear/internal/CallRecord.h>
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/internal/ExecutionTrace.h"
+#include "gtsam/nonlinear/internal/CallRecord.h"
+#include "gtsam/nonlinear/Values.h"
 
 #include <typeinfo>       // operator typeid
 #include <ostream>

diff --git a/gtsam/nonlinear/internal/JacobianMap.h b/gtsam/nonlinear/internal/JacobianMap.h
index 95fc6d0..79f1140 100644
--- a/gtsam/nonlinear/internal/JacobianMap.h
+++ b/gtsam/nonlinear/internal/JacobianMap.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/FastVector.h>
-#include <gtsam/base/VerticalBlockMatrix.h>
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/FastVector.h"
+#include "gtsam/base/VerticalBlockMatrix.h"
 
 namespace gtsam {
 namespace internal {

diff --git a/gtsam/nonlinear/internal/LevenbergMarquardtState.h b/gtsam/nonlinear/internal/LevenbergMarquardtState.h
index 696c654..07e278f 100644
--- a/gtsam/nonlinear/internal/LevenbergMarquardtState.h
+++ b/gtsam/nonlinear/internal/LevenbergMarquardtState.h
@@ -20,12 +20,12 @@
 
 #include "NonlinearOptimizerState.h"
 
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
 
 #include <algorithm>
 #include <cmath>

diff --git a/gtsam/nonlinear/internal/NonlinearOptimizerState.h b/gtsam/nonlinear/internal/NonlinearOptimizerState.h
index 0c65d91..a928c68 100644
--- a/gtsam/nonlinear/internal/NonlinearOptimizerState.h
+++ b/gtsam/nonlinear/internal/NonlinearOptimizerState.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/Values.h>
+#include "gtsam/nonlinear/Values.h"
 
 namespace gtsam {
 namespace internal {

diff --git a/gtsam/nonlinear/nonlinearExceptions.h b/gtsam/nonlinear/nonlinearExceptions.h
index e36b72f..7b5c057 100644
--- a/gtsam/nonlinear/nonlinearExceptions.h
+++ b/gtsam/nonlinear/nonlinearExceptions.h
@@ -19,7 +19,7 @@
 
 #include <exception>
 
-#include <gtsam/inference/Key.h>
+#include "gtsam/inference/Key.h"
 
 namespace gtsam {
 

diff --git a/gtsam/nonlinear/tests/testAdaptAutoDiff.cpp b/gtsam/nonlinear/tests/testAdaptAutoDiff.cpp
index 2deece2..23a9076 100644
--- a/gtsam/nonlinear/tests/testAdaptAutoDiff.cpp
+++ b/gtsam/nonlinear/tests/testAdaptAutoDiff.cpp
@@ -17,17 +17,17 @@
  * @brief unit tests for Block Automatic Differentiation
  */
 
-#include <gtsam/3rdparty/ceres/example.h>
-#include <gtsam/nonlinear/AdaptAutoDiff.h>
-#include <gtsam/nonlinear/Expression.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/Testable.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/3rdparty/ceres/example.h"
+#include "gtsam/nonlinear/AdaptAutoDiff.h"
+#include "gtsam/nonlinear/Expression.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/Testable.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 
 namespace gtsam {

diff --git a/gtsam/nonlinear/tests/testBatchFixedLagSmoother.cpp b/gtsam/nonlinear/tests/testBatchFixedLagSmoother.cpp
index 23d569c..3cf750e 100644
--- a/gtsam/nonlinear/tests/testBatchFixedLagSmoother.cpp
+++ b/gtsam/nonlinear/tests/testBatchFixedLagSmoother.cpp
@@ -16,17 +16,17 @@
  * @date    May 23, 2012
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/nonlinear/BatchFixedLagSmoother.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/nonlinear/BatchFixedLagSmoother.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/nonlinear/tests/testCallRecord.cpp b/gtsam/nonlinear/tests/testCallRecord.cpp
index 419172f..c03bbd3 100644
--- a/gtsam/nonlinear/tests/testCallRecord.cpp
+++ b/gtsam/nonlinear/tests/testCallRecord.cpp
@@ -18,11 +18,11 @@
  * @brief unit tests for CallRecord class
  */
 
-#include <gtsam/nonlinear/internal/CallRecord.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/nonlinear/internal/CallRecord.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Testable.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 #include <iostream>
 
 using namespace std;

diff --git a/gtsam/nonlinear/tests/testExecutionTrace.cpp b/gtsam/nonlinear/tests/testExecutionTrace.cpp
index 58f7608..60c73d5 100644
--- a/gtsam/nonlinear/tests/testExecutionTrace.cpp
+++ b/gtsam/nonlinear/tests/testExecutionTrace.cpp
@@ -16,11 +16,11 @@
  * @brief unit tests for Expression internals
  */
 
-#include <gtsam/nonlinear/internal/CallRecord.h>
-#include <gtsam/nonlinear/internal/ExecutionTrace.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/nonlinear/internal/CallRecord.h"
+#include "gtsam/nonlinear/internal/ExecutionTrace.h"
+#include "gtsam/geometry/Point2.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/nonlinear/tests/testExpression.cpp b/gtsam/nonlinear/tests/testExpression.cpp
index 67815e2..8d8cdae 100644
--- a/gtsam/nonlinear/tests/testExpression.cpp
+++ b/gtsam/nonlinear/tests/testExpression.cpp
@@ -17,13 +17,13 @@
  * @brief unit tests for Block Automatic Differentiation
  */
 
-#include <gtsam/nonlinear/expressions.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/nonlinear/expressions.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/base/Testable.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/nonlinear/tests/testFactorTesting.cpp b/gtsam/nonlinear/tests/testFactorTesting.cpp
index 48f61a9..d34949b 100644
--- a/gtsam/nonlinear/tests/testFactorTesting.cpp
+++ b/gtsam/nonlinear/tests/testFactorTesting.cpp
@@ -16,12 +16,12 @@
  * @brief unit tests for testFactorJacobians and testExpressionJacobians
  */
 
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/expressions.h>
-#include <gtsam/nonlinear/expressionTesting.h>
-#include <gtsam/slam/expressions.h>
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/expressions.h"
+#include "gtsam/nonlinear/expressionTesting.h"
+#include "gtsam/slam/expressions.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/nonlinear/tests/testFunctorizedFactor.cpp b/gtsam/nonlinear/tests/testFunctorizedFactor.cpp
index f4ed708..bb54b66 100644
--- a/gtsam/nonlinear/tests/testFunctorizedFactor.cpp
+++ b/gtsam/nonlinear/tests/testFunctorizedFactor.cpp
@@ -17,14 +17,14 @@
  * @brief unit tests for FunctorizedFactor class
  */
 
-#include <gtsam/nonlinear/FunctorizedFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/nonlinear/FunctorizedFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/nonlinear/tests/testLinearContainerFactor.cpp b/gtsam/nonlinear/tests/testLinearContainerFactor.cpp
index 77d4075..a2a0c1b 100644
--- a/gtsam/nonlinear/tests/testLinearContainerFactor.cpp
+++ b/gtsam/nonlinear/tests/testLinearContainerFactor.cpp
@@ -5,15 +5,15 @@
  * @author Alex Cunningham
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/LinearContainerFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/LinearContainerFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/nonlinear/tests/testNonlinearConjugateGradientOptimizer.cpp b/gtsam/nonlinear/tests/testNonlinearConjugateGradientOptimizer.cpp
index 9700361..3ac2f4f 100644
--- a/gtsam/nonlinear/tests/testNonlinearConjugateGradientOptimizer.cpp
+++ b/gtsam/nonlinear/tests/testNonlinearConjugateGradientOptimizer.cpp
@@ -6,15 +6,15 @@
  * @date   June 11, 2012
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/nonlinear/tests/testSerializationNonlinear.cpp b/gtsam/nonlinear/tests/testSerializationNonlinear.cpp
index d6f693a..4754b1e 100644
--- a/gtsam/nonlinear/tests/testSerializationNonlinear.cpp
+++ b/gtsam/nonlinear/tests/testSerializationNonlinear.cpp
@@ -16,17 +16,17 @@
  * @date Feb 7, 2012
  */
 
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Cal3DS2.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-
-#include <gtsam/base/serializationTestHelpers.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Cal3DS2.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+
+#include "gtsam/base/serializationTestHelpers.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/nonlinear/tests/testUtilities.cpp b/gtsam/nonlinear/tests/testUtilities.cpp
index 55a7fdb..371e6cc 100644
--- a/gtsam/nonlinear/tests/testUtilities.cpp
+++ b/gtsam/nonlinear/tests/testUtilities.cpp
@@ -16,12 +16,12 @@
  * @brief Tests for the utilities.
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/utilities.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/utilities.h"
 
 using namespace gtsam;
 using gtsam::symbol_shorthand::L;

diff --git a/gtsam/nonlinear/tests/testValues.cpp b/gtsam/nonlinear/tests/testValues.cpp
index 06eb46d..2c93c12 100644
--- a/gtsam/nonlinear/tests/testValues.cpp
+++ b/gtsam/nonlinear/tests/testValues.cpp
@@ -16,15 +16,15 @@
  * @author Mike Bosse
  */
 
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+
+#include "CppUnitLite/TestHarness.h"
 #include <stdexcept>
 #include <limits>
 #include <type_traits>

diff --git a/gtsam/nonlinear/tests/testWhiteNoiseFactor.cpp b/gtsam/nonlinear/tests/testWhiteNoiseFactor.cpp
index c5ffd1f..f7876ac 100644
--- a/gtsam/nonlinear/tests/testWhiteNoiseFactor.cpp
+++ b/gtsam/nonlinear/tests/testWhiteNoiseFactor.cpp
@@ -14,10 +14,10 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/nonlinear/WhiteNoiseFactor.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/nonlinear/WhiteNoiseFactor.h"
+#include "gtsam/base/Testable.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 using namespace std;

diff --git a/gtsam/nonlinear/utilities.h b/gtsam/nonlinear/utilities.h
index 0a0ceb8..42943a2 100644
--- a/gtsam/nonlinear/utilities.h
+++ b/gtsam/nonlinear/utilities.h
@@ -17,19 +17,19 @@
 
 #pragma once
 
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/slam/ProjectionFactor.h>
-#include <gtsam/linear/Sampler.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/PinholeCamera.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/slam/ProjectionFactor.h"
+#include "gtsam/linear/Sampler.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/PinholeCamera.h"
 
 #include <exception>
 

diff --git a/gtsam/precompiled_header.h b/gtsam/precompiled_header.h
index fbc79b8..668c180 100644
--- a/gtsam/precompiled_header.h
+++ b/gtsam/precompiled_header.h
@@ -22,36 +22,36 @@
 // treeTraversal-inst.h: very specific to only a few compilation units
 // numericalDerivative.h : includes things in linear, nonlinear :-(
 // testLie.h: includes numericalDerivative
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/cholesky.h>
-#include <gtsam/base/concepts.h>
-#include <gtsam/base/ConcurrentMap.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/base/DSFVector.h>
-#include <gtsam/base/FastDefaultAllocator.h>
-#include <gtsam/base/FastList.h>
-#include <gtsam/base/FastMap.h>
-#include <gtsam/base/FastSet.h>
-#include <gtsam/base/FastVector.h>
-#include <gtsam/base/GenericValue.h>
-#include <gtsam/base/Group.h>
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/lieProxies.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/OptionalJacobian.h>
-#include <gtsam/base/ProductLieGroup.h>
-#include <gtsam/base/serialization.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/base/SymmetricBlockMatrix.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/ThreadsafeException.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/base/types.h>
-#include <gtsam/base/Value.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/base/VerticalBlockMatrix.h>
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/cholesky.h"
+#include "gtsam/base/concepts.h"
+#include "gtsam/base/ConcurrentMap.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/base/DSFVector.h"
+#include "gtsam/base/FastDefaultAllocator.h"
+#include "gtsam/base/FastList.h"
+#include "gtsam/base/FastMap.h"
+#include "gtsam/base/FastSet.h"
+#include "gtsam/base/FastVector.h"
+#include "gtsam/base/GenericValue.h"
+#include "gtsam/base/Group.h"
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/lieProxies.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/OptionalJacobian.h"
+#include "gtsam/base/ProductLieGroup.h"
+#include "gtsam/base/serialization.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/base/SymmetricBlockMatrix.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/ThreadsafeException.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/base/types.h"
+#include "gtsam/base/Value.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/base/VerticalBlockMatrix.h"
 
 

diff --git a/gtsam/sam/BearingFactor.h b/gtsam/sam/BearingFactor.h
index 01b2baf..e3e89b6 100644
--- a/gtsam/sam/BearingFactor.h
+++ b/gtsam/sam/BearingFactor.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/ExpressionFactor.h>
+#include "gtsam/nonlinear/ExpressionFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/sam/BearingRangeFactor.h b/gtsam/sam/BearingRangeFactor.h
index d5467be..339c3da 100644
--- a/gtsam/sam/BearingRangeFactor.h
+++ b/gtsam/sam/BearingRangeFactor.h
@@ -19,8 +19,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/geometry/BearingRange.h>
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/geometry/BearingRange.h"
 
 namespace gtsam {
 

diff --git a/gtsam/sam/RangeFactor.h b/gtsam/sam/RangeFactor.h
index 193a89a..9bef445 100644
--- a/gtsam/sam/RangeFactor.h
+++ b/gtsam/sam/RangeFactor.h
@@ -18,7 +18,7 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/ExpressionFactor.h>
+#include "gtsam/nonlinear/ExpressionFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/sam/tests/testBearingFactor.cpp b/gtsam/sam/tests/testBearingFactor.cpp
index 904bdba..80400fc 100644
--- a/gtsam/sam/tests/testBearingFactor.cpp
+++ b/gtsam/sam/tests/testBearingFactor.cpp
@@ -16,13 +16,13 @@
  *  @date July 2015
  */
 
-#include <gtsam/sam/BearingFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/nonlinear/expressionTesting.h>
+#include "gtsam/sam/BearingFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/nonlinear/expressionTesting.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/sam/tests/testBearingRangeFactor.cpp b/gtsam/sam/tests/testBearingRangeFactor.cpp
index 0dcc227..b45e6fb 100644
--- a/gtsam/sam/tests/testBearingRangeFactor.cpp
+++ b/gtsam/sam/tests/testBearingRangeFactor.cpp
@@ -16,13 +16,13 @@
  *  @date July 2015
  */
 
-#include <gtsam/sam/BearingRangeFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/nonlinear/expressionTesting.h>
+#include "gtsam/sam/BearingRangeFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/nonlinear/expressionTesting.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/sam/tests/testRangeFactor.cpp b/gtsam/sam/tests/testRangeFactor.cpp
index f45349c..16d450f 100644
--- a/gtsam/sam/tests/testRangeFactor.cpp
+++ b/gtsam/sam/tests/testRangeFactor.cpp
@@ -16,15 +16,15 @@
  *  @date Oct 2012
  */
 
-#include <gtsam/sam/RangeFactor.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/TestableAssertions.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/sam/RangeFactor.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/TestableAssertions.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std::placeholders;
 using namespace std;

diff --git a/gtsam/sam/tests/testSerializationSam.cpp b/gtsam/sam/tests/testSerializationSam.cpp
index 8fdd8f3..28f8b02 100644
--- a/gtsam/sam/tests/testSerializationSam.cpp
+++ b/gtsam/sam/tests/testSerializationSam.cpp
@@ -16,16 +16,16 @@
  *  @date February 2022
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/serialization.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/expressionTesting.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/sam/BearingFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
-#include <gtsam/sam/RangeFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/serialization.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/expressionTesting.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/sam/BearingFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
+#include "gtsam/sam/RangeFactor.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/sfm/BinaryMeasurement.h b/gtsam/sfm/BinaryMeasurement.h
index 07aa2e3..cd6a33b 100644
--- a/gtsam/sfm/BinaryMeasurement.h
+++ b/gtsam/sfm/BinaryMeasurement.h
@@ -23,10 +23,10 @@
  * key2 to key1.
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/inference/Factor.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/linear/NoiseModel.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/inference/Factor.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/linear/NoiseModel.h"
 
 #include <iostream>
 #include <vector>

diff --git a/gtsam/sfm/DsfTrackGenerator.cpp b/gtsam/sfm/DsfTrackGenerator.cpp
index 0efda06..b01b776 100644
--- a/gtsam/sfm/DsfTrackGenerator.cpp
+++ b/gtsam/sfm/DsfTrackGenerator.cpp
@@ -16,7 +16,7 @@
  * @brief Identifies connected components in the keypoint matches graph.
  */
 
-#include <gtsam/sfm/DsfTrackGenerator.h>
+#include "gtsam/sfm/DsfTrackGenerator.h"
 
 #include <algorithm>
 #include <iostream>

diff --git a/gtsam/sfm/DsfTrackGenerator.h b/gtsam/sfm/DsfTrackGenerator.h
index 3510240..08555a6 100644
--- a/gtsam/sfm/DsfTrackGenerator.h
+++ b/gtsam/sfm/DsfTrackGenerator.h
@@ -17,8 +17,8 @@
  */
 
 #pragma once
-#include <gtsam/base/DSFMap.h>
-#include <gtsam/sfm/SfmTrack.h>
+#include "gtsam/base/DSFMap.h"
+#include "gtsam/sfm/SfmTrack.h"
 
 #include <Eigen/Core>
 #include <map>

diff --git a/gtsam/sfm/MFAS.cpp b/gtsam/sfm/MFAS.cpp
index 9e72140..dda8543 100644
--- a/gtsam/sfm/MFAS.cpp
+++ b/gtsam/sfm/MFAS.cpp
@@ -5,7 +5,7 @@
  *  @date July 2020
  */
 
-#include <gtsam/sfm/MFAS.h>
+#include "gtsam/sfm/MFAS.h"
 
 #include <algorithm>
 #include <map>

diff --git a/gtsam/sfm/MFAS.h b/gtsam/sfm/MFAS.h
index 3595673..957b3bc 100644
--- a/gtsam/sfm/MFAS.h
+++ b/gtsam/sfm/MFAS.h
@@ -18,9 +18,9 @@
  *  @date September 2020
  */
 
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/sfm/BinaryMeasurement.h>
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/sfm/BinaryMeasurement.h"
 
 #include <memory>
 #include <unordered_map>

diff --git a/gtsam/sfm/SfmData.cpp b/gtsam/sfm/SfmData.cpp
index 6c6b471..e5b1327 100644
--- a/gtsam/sfm/SfmData.cpp
+++ b/gtsam/sfm/SfmData.cpp
@@ -16,9 +16,9 @@
  * @brief Data structure for dealing with Structure from Motion data
  */
 
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/sfm/SfmData.h>
-#include <gtsam/slam/GeneralSFMFactor.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/sfm/SfmData.h"
+#include "gtsam/slam/GeneralSFMFactor.h"
 
 #include <fstream>
 #include <iostream>

diff --git a/gtsam/sfm/SfmData.h b/gtsam/sfm/SfmData.h
index 7161ab2..c36624b 100644
--- a/gtsam/sfm/SfmData.h
+++ b/gtsam/sfm/SfmData.h
@@ -18,11 +18,11 @@
 
 #pragma once
 
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/sfm/SfmTrack.h>
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/sfm/SfmTrack.h"
 
 #include <string>
 #include <vector>

diff --git a/gtsam/sfm/SfmTrack.cpp b/gtsam/sfm/SfmTrack.cpp
index d571e7c..fe613cc 100644
--- a/gtsam/sfm/SfmTrack.cpp
+++ b/gtsam/sfm/SfmTrack.cpp
@@ -16,7 +16,7 @@
  * @brief A simple data structure for a track in Structure from Motion
  */
 
-#include <gtsam/sfm/SfmTrack.h>
+#include "gtsam/sfm/SfmTrack.h"
 
 #include <iostream>
 

diff --git a/gtsam/sfm/SfmTrack.h b/gtsam/sfm/SfmTrack.h
index 2b494ed..60e8639 100644
--- a/gtsam/sfm/SfmTrack.h
+++ b/gtsam/sfm/SfmTrack.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
 
 #include <Eigen/Core>
 #include <string>

diff --git a/gtsam/sfm/ShonanAveraging.cpp b/gtsam/sfm/ShonanAveraging.cpp
index 6c9f91e..d79df96 100644
--- a/gtsam/sfm/ShonanAveraging.cpp
+++ b/gtsam/sfm/ShonanAveraging.cpp
@@ -18,16 +18,16 @@
 
 #include <SymEigsSolver.h>
 #include <cmath>
-#include <gtsam/linear/PCGSolver.h>
-#include <gtsam/linear/SubgraphPreconditioner.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/sfm/ShonanAveraging.h>
-#include <gtsam/sfm/ShonanFactor.h>
-#include <gtsam/sfm/ShonanGaugeFactor.h>
-#include <gtsam/slam/FrobeniusFactor.h>
-#include <gtsam/slam/KarcherMeanFactor-inl.h>
+#include "gtsam/linear/PCGSolver.h"
+#include "gtsam/linear/SubgraphPreconditioner.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/sfm/ShonanAveraging.h"
+#include "gtsam/sfm/ShonanFactor.h"
+#include "gtsam/sfm/ShonanGaugeFactor.h"
+#include "gtsam/slam/FrobeniusFactor.h"
+#include "gtsam/slam/KarcherMeanFactor-inl.h"
 
 #include <Eigen/Eigenvalues>
 #include <algorithm>

diff --git a/gtsam/sfm/ShonanAveraging.h b/gtsam/sfm/ShonanAveraging.h
index 4896b88..42f2575 100644
--- a/gtsam/sfm/ShonanAveraging.h
+++ b/gtsam/sfm/ShonanAveraging.h
@@ -18,17 +18,17 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/dllexport.h>
-#include <gtsam/geometry/Rot2.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/LevenbergMarquardtParams.h>
-#include <gtsam/sfm/BinaryMeasurement.h>
-#include <gtsam/linear/PowerMethod.h>
-#include <gtsam/linear/AcceleratedPowerMethod.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/dllexport.h"
+#include "gtsam/geometry/Rot2.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/LevenbergMarquardtParams.h"
+#include "gtsam/sfm/BinaryMeasurement.h"
+#include "gtsam/linear/PowerMethod.h"
+#include "gtsam/linear/AcceleratedPowerMethod.h"
+#include "gtsam/slam/dataset.h"
 
 #include <Eigen/Sparse>
 #include <map>

diff --git a/gtsam/sfm/ShonanFactor.cpp b/gtsam/sfm/ShonanFactor.cpp
index 7d7022b..6b024ed 100644
--- a/gtsam/sfm/ShonanFactor.cpp
+++ b/gtsam/sfm/ShonanFactor.cpp
@@ -16,11 +16,11 @@
  * @brief  Various factors that minimize some Frobenius norm
  */
 
-#include <gtsam/sfm/ShonanFactor.h>
+#include "gtsam/sfm/ShonanFactor.h"
 
-#include <gtsam/base/timing.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/FrobeniusFactor.h>
+#include "gtsam/base/timing.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/FrobeniusFactor.h"
 
 #include <cmath>
 #include <iostream>

diff --git a/gtsam/sfm/ShonanFactor.h b/gtsam/sfm/ShonanFactor.h
index 3a6fa11..9bb9e78 100644
--- a/gtsam/sfm/ShonanFactor.h
+++ b/gtsam/sfm/ShonanFactor.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/geometry/Rot2.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/SOn.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/geometry/Rot2.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/SOn.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 #include <type_traits>
 

diff --git a/gtsam/sfm/ShonanGaugeFactor.h b/gtsam/sfm/ShonanGaugeFactor.h
index 4ab75a3..f6ccdb7 100644
--- a/gtsam/sfm/ShonanGaugeFactor.h
+++ b/gtsam/sfm/ShonanGaugeFactor.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/geometry/SOn.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/geometry/SOn.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 /**

diff --git a/gtsam/sfm/TransferFactor.h b/gtsam/sfm/TransferFactor.h
index 0338762..5350f1a 100644
--- a/gtsam/sfm/TransferFactor.h
+++ b/gtsam/sfm/TransferFactor.h
@@ -15,12 +15,12 @@
 
 #pragma once
 
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/EssentialMatrix.h>
-#include <gtsam/geometry/FundamentalMatrix.h>
-#include <gtsam/inference/EdgeKey.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/EssentialMatrix.h"
+#include "gtsam/geometry/FundamentalMatrix.h"
+#include "gtsam/inference/EdgeKey.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 #include <cstdint>
 

diff --git a/gtsam/sfm/TranslationFactor.h b/gtsam/sfm/TranslationFactor.h
index cfb9cff..80793c2 100644
--- a/gtsam/sfm/TranslationFactor.h
+++ b/gtsam/sfm/TranslationFactor.h
@@ -18,11 +18,11 @@
  * @brief Binary factor for a relative translation direction measurement.
  */
 
-#include <gtsam/base/Vector.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/base/Vector.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/sfm/TranslationRecovery.cpp b/gtsam/sfm/TranslationRecovery.cpp
index 02c7813..94bb84d 100644
--- a/gtsam/sfm/TranslationRecovery.cpp
+++ b/gtsam/sfm/TranslationRecovery.cpp
@@ -16,21 +16,21 @@
  * @brief Source code for recovering translations when rotations are given
  */
 
-#include <gtsam/base/DSFMap.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/sfm/TranslationFactor.h>
-#include <gtsam/sfm/TranslationRecovery.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/PriorFactor.h>
-#include <gtsam/slam/expressions.h>
+#include "gtsam/base/DSFMap.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/sfm/TranslationFactor.h"
+#include "gtsam/sfm/TranslationRecovery.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/PriorFactor.h"
+#include "gtsam/slam/expressions.h"
 
 #include <set>
 #include <utility>

diff --git a/gtsam/sfm/TranslationRecovery.h b/gtsam/sfm/TranslationRecovery.h
index f821da9..848d339 100644
--- a/gtsam/sfm/TranslationRecovery.h
+++ b/gtsam/sfm/TranslationRecovery.h
@@ -16,10 +16,10 @@
  * @brief Recovering translations in an epipolar graph when rotations are given.
  */
 
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/sfm/BinaryMeasurement.h>
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/sfm/BinaryMeasurement.h"
 
 #include <map>
 #include <set>

diff --git a/gtsam/sfm/tests/testBinaryMeasurement.cpp b/gtsam/sfm/tests/testBinaryMeasurement.cpp
index 6737f79..9d7bc03 100644
--- a/gtsam/sfm/tests/testBinaryMeasurement.cpp
+++ b/gtsam/sfm/tests/testBinaryMeasurement.cpp
@@ -16,13 +16,13 @@
  *  @date July 2020
  */
 
-#include <gtsam/sfm/BinaryMeasurement.h>
+#include "gtsam/sfm/BinaryMeasurement.h"
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/Unit3.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/Unit3.h"
+#include "gtsam/geometry/Pose3.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/sfm/tests/testMFAS.cpp b/gtsam/sfm/tests/testMFAS.cpp
index a1f6dfa..3c5c1f3 100644
--- a/gtsam/sfm/tests/testMFAS.cpp
+++ b/gtsam/sfm/tests/testMFAS.cpp
@@ -5,9 +5,9 @@
  *  @date July 2020
  */
 
-#include <gtsam/sfm/MFAS.h>
+#include "gtsam/sfm/MFAS.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/sfm/tests/testSfmData.cpp b/gtsam/sfm/tests/testSfmData.cpp
index 7bd5d27..e390c57 100644
--- a/gtsam/sfm/tests/testSfmData.cpp
+++ b/gtsam/sfm/tests/testSfmData.cpp
@@ -16,10 +16,10 @@
  * @brief tests for SfmData class and associated utilites
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/sfm/SfmData.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/sfm/SfmData.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/sfm/tests/testSfmTrack.cpp b/gtsam/sfm/tests/testSfmTrack.cpp
index 1b8c6bd..92084b6 100644
--- a/gtsam/sfm/tests/testSfmTrack.cpp
+++ b/gtsam/sfm/tests/testSfmTrack.cpp
@@ -16,10 +16,10 @@
  * @brief tests for SfmTrack class
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/sfm/SfmTrack.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/sfm/SfmTrack.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/sfm/tests/testShonanAveraging.cpp b/gtsam/sfm/tests/testShonanAveraging.cpp
index dfa725a..bd8735e 100644
--- a/gtsam/sfm/tests/testShonanAveraging.cpp
+++ b/gtsam/sfm/tests/testShonanAveraging.cpp
@@ -16,11 +16,11 @@
  * @brief  Unit tests for Shonan Averaging algorithm
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/sfm/ShonanAveraging.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/FrobeniusFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/sfm/ShonanAveraging.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/FrobeniusFactor.h"
 
 #include <algorithm>
 #include <iostream>

diff --git a/gtsam/sfm/tests/testShonanFactor.cpp b/gtsam/sfm/tests/testShonanFactor.cpp
index ef94c5c..425f01a 100644
--- a/gtsam/sfm/tests/testShonanFactor.cpp
+++ b/gtsam/sfm/tests/testShonanFactor.cpp
@@ -18,18 +18,18 @@
  * @brief  Check evaluateError for various Frobenius norm
  */
 
-#include <gtsam/base/lieProxies.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/SO3.h>
-#include <gtsam/geometry/SO4.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/sfm/ShonanFactor.h>
-#include <gtsam/slam/FrobeniusFactor.h>
+#include "gtsam/base/lieProxies.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/SO3.h"
+#include "gtsam/geometry/SO4.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/sfm/ShonanFactor.h"
+#include "gtsam/slam/FrobeniusFactor.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/sfm/tests/testShonanGaugeFactor.cpp b/gtsam/sfm/tests/testShonanGaugeFactor.cpp
index 8d6d685..766de74 100644
--- a/gtsam/sfm/tests/testShonanGaugeFactor.cpp
+++ b/gtsam/sfm/tests/testShonanGaugeFactor.cpp
@@ -16,9 +16,9 @@
  * @brief  Unit tests for ShonanGaugeFactor class
  */
 
-#include <gtsam/sfm/ShonanGaugeFactor.h>
+#include "gtsam/sfm/ShonanGaugeFactor.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 #include <map>

diff --git a/gtsam/sfm/tests/testTransferFactor.cpp b/gtsam/sfm/tests/testTransferFactor.cpp
index b34bdf8..2790bbf 100644
--- a/gtsam/sfm/tests/testTransferFactor.cpp
+++ b/gtsam/sfm/tests/testTransferFactor.cpp
@@ -5,11 +5,11 @@
  * @date October 2024
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/SimpleCamera.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/sfm/TransferFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/SimpleCamera.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/sfm/TransferFactor.h"
 
 #include <memory>
 

diff --git a/gtsam/sfm/tests/testTranslationFactor.cpp b/gtsam/sfm/tests/testTranslationFactor.cpp
index b257456..0c1a81c 100644
--- a/gtsam/sfm/tests/testTranslationFactor.cpp
+++ b/gtsam/sfm/tests/testTranslationFactor.cpp
@@ -16,11 +16,11 @@
  *  @date March 2020
  */
 
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/sfm/TranslationFactor.h>
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/sfm/TranslationFactor.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std::placeholders;
 using namespace std;

diff --git a/gtsam/slam/AntiFactor.h b/gtsam/slam/AntiFactor.h
index 3b031b3..8809cca 100644
--- a/gtsam/slam/AntiFactor.h
+++ b/gtsam/slam/AntiFactor.h
@@ -17,8 +17,8 @@
 
 #include <ostream>
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/linear/GaussianFactor.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/linear/GaussianFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/BearingFactor.h b/gtsam/slam/BearingFactor.h
index 7383690..7fd2b85 100644
--- a/gtsam/slam/BearingFactor.h
+++ b/gtsam/slam/BearingFactor.h
@@ -18,4 +18,4 @@
 #endif
 
 
-#include <gtsam/sam/BearingFactor.h>
+#include "gtsam/sam/BearingFactor.h"

diff --git a/gtsam/slam/BearingRangeFactor.h b/gtsam/slam/BearingRangeFactor.h
index 9018600..6fd1f3d 100644
--- a/gtsam/slam/BearingRangeFactor.h
+++ b/gtsam/slam/BearingRangeFactor.h
@@ -18,4 +18,4 @@
 #warning "BearingRangeFactor is now an ExpressionFactor in SAM directory"
 #endif
 
-#include <gtsam/sam/BearingRangeFactor.h>
+#include "gtsam/sam/BearingRangeFactor.h"

diff --git a/gtsam/slam/BetweenFactor.h b/gtsam/slam/BetweenFactor.h
index 3e2478e..da04d2b 100644
--- a/gtsam/slam/BetweenFactor.h
+++ b/gtsam/slam/BetweenFactor.h
@@ -17,9 +17,9 @@
 
 #include <ostream>
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/Lie.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/Lie.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 #ifdef _WIN32
 #define BETWEENFACTOR_VISIBILITY

diff --git a/gtsam/slam/BoundingConstraint.h b/gtsam/slam/BoundingConstraint.h
index a496971..589f8f7 100644
--- a/gtsam/slam/BoundingConstraint.h
+++ b/gtsam/slam/BoundingConstraint.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/base/Lie.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/base/Lie.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/EssentialMatrixConstraint.cpp b/gtsam/slam/EssentialMatrixConstraint.cpp
index 267432e..b1610d3 100644
--- a/gtsam/slam/EssentialMatrixConstraint.cpp
+++ b/gtsam/slam/EssentialMatrixConstraint.cpp
@@ -16,9 +16,9 @@
  *  @date   Jan 5, 2014
  **/
 
-#include <gtsam/slam/EssentialMatrixConstraint.h>
-//#include <gtsam/linear/GaussianFactor.h>
-//#include <gtsam/base/Testable.h>
+#include "gtsam/slam/EssentialMatrixConstraint.h"
+//#include "gtsam/linear/GaussianFactor.h"
+//#include "gtsam/base/Testable.h"
 
 #include <ostream>
 

diff --git a/gtsam/slam/EssentialMatrixConstraint.h b/gtsam/slam/EssentialMatrixConstraint.h
index 45e54aa..e77ecf9 100644
--- a/gtsam/slam/EssentialMatrixConstraint.h
+++ b/gtsam/slam/EssentialMatrixConstraint.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/geometry/EssentialMatrix.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/geometry/EssentialMatrix.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/EssentialMatrixFactor.h b/gtsam/slam/EssentialMatrixFactor.h
index 5d38cb2..a85bdf9 100644
--- a/gtsam/slam/EssentialMatrixFactor.h
+++ b/gtsam/slam/EssentialMatrixFactor.h
@@ -20,9 +20,9 @@
 
 #pragma once
 
-#include <gtsam/geometry/EssentialMatrix.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/geometry/EssentialMatrix.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 #include <iostream>
 

diff --git a/gtsam/slam/FrobeniusFactor.cpp b/gtsam/slam/FrobeniusFactor.cpp
index e70f64d..d5b3ab1 100644
--- a/gtsam/slam/FrobeniusFactor.cpp
+++ b/gtsam/slam/FrobeniusFactor.cpp
@@ -16,7 +16,7 @@
  * @brief  Various factors that minimize some Frobenius norm
  */
 
-#include <gtsam/slam/FrobeniusFactor.h>
+#include "gtsam/slam/FrobeniusFactor.h"
 
 using namespace std;
 

diff --git a/gtsam/slam/FrobeniusFactor.h b/gtsam/slam/FrobeniusFactor.h
index 37efa5f..8d2ed11 100644
--- a/gtsam/slam/FrobeniusFactor.h
+++ b/gtsam/slam/FrobeniusFactor.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/geometry/Rot2.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/SOn.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/geometry/Rot2.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/SOn.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/GeneralSFMFactor.h b/gtsam/slam/GeneralSFMFactor.h
index 581624b..054848f 100644
--- a/gtsam/slam/GeneralSFMFactor.h
+++ b/gtsam/slam/GeneralSFMFactor.h
@@ -20,21 +20,21 @@
 
 #pragma once
 
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/linear/BinaryJacobianFactor.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/base/concepts.h>
-#include <gtsam/base/Manifold.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/SymmetricBlockMatrix.h>
-#include <gtsam/base/types.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/linear/BinaryJacobianFactor.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/base/concepts.h"
+#include "gtsam/base/Manifold.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/SymmetricBlockMatrix.h"
+#include "gtsam/base/types.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/timing.h"
 
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION
 #include <boost/serialization/nvp.hpp>

diff --git a/gtsam/slam/InitializePose.h b/gtsam/slam/InitializePose.h
index bafdd6e..83fe9b4 100644
--- a/gtsam/slam/InitializePose.h
+++ b/gtsam/slam/InitializePose.h
@@ -18,11 +18,11 @@
 
 #pragma once
 
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 namespace gtsam {
 namespace initialize {

diff --git a/gtsam/slam/InitializePose3.cpp b/gtsam/slam/InitializePose3.cpp
index ba9e0dd..960a75d 100644
--- a/gtsam/slam/InitializePose3.cpp
+++ b/gtsam/slam/InitializePose3.cpp
@@ -16,16 +16,16 @@
  *  @date   August, 2014
  */
 
-#include <gtsam/slam/InitializePose3.h> 
-
-#include <gtsam/slam/InitializePose.h> 
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/slam/InitializePose3.h" 
+
+#include "gtsam/slam/InitializePose.h" 
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/timing.h"
 
 #include <utility>
 

diff --git a/gtsam/slam/InitializePose3.h b/gtsam/slam/InitializePose3.h
index 3f69217..5258bb8 100644
--- a/gtsam/slam/InitializePose3.h
+++ b/gtsam/slam/InitializePose3.h
@@ -20,10 +20,10 @@
 
 #pragma once
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 
 #include <map>
 #include <vector>

diff --git a/gtsam/slam/JacobianFactorQ.h b/gtsam/slam/JacobianFactorQ.h
index 23cadbe..a06564d 100644
--- a/gtsam/slam/JacobianFactorQ.h
+++ b/gtsam/slam/JacobianFactorQ.h
@@ -17,7 +17,7 @@
 
 #pragma once
 
-#include <gtsam/linear/RegularJacobianFactor.h>
+#include "gtsam/linear/RegularJacobianFactor.h"
 
 namespace gtsam {
 /**

diff --git a/gtsam/slam/JacobianFactorQR.h b/gtsam/slam/JacobianFactorQR.h
index 9c01670..1e5449f 100644
--- a/gtsam/slam/JacobianFactorQR.h
+++ b/gtsam/slam/JacobianFactorQR.h
@@ -6,9 +6,9 @@
  */
 
 #pragma once
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/RegularJacobianFactor.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/RegularJacobianFactor.h"
+#include "gtsam/inference/Symbol.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/JacobianFactorSVD.h b/gtsam/slam/JacobianFactorSVD.h
index f6bc1dd..15935fe 100644
--- a/gtsam/slam/JacobianFactorSVD.h
+++ b/gtsam/slam/JacobianFactorSVD.h
@@ -5,7 +5,7 @@
  */
 
 #pragma once
-#include <gtsam/linear/RegularJacobianFactor.h>
+#include "gtsam/linear/RegularJacobianFactor.h"
 
 namespace gtsam {
 /**

diff --git a/gtsam/slam/KarcherMeanFactor-inl.h b/gtsam/slam/KarcherMeanFactor-inl.h
index 61af6ea..5a4af6e 100644
--- a/gtsam/slam/KarcherMeanFactor-inl.h
+++ b/gtsam/slam/KarcherMeanFactor-inl.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/KarcherMeanFactor.h>
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/KarcherMeanFactor.h"
 #include <optional>
 
 using namespace std;

diff --git a/gtsam/slam/KarcherMeanFactor.h b/gtsam/slam/KarcherMeanFactor.h
index 6b25dd2..26dd4b5 100644
--- a/gtsam/slam/KarcherMeanFactor.h
+++ b/gtsam/slam/KarcherMeanFactor.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/linear/JacobianFactor.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/linear/JacobianFactor.h"
 
 #include <map>
 #include <vector>

diff --git a/gtsam/slam/OrientedPlane3Factor.h b/gtsam/slam/OrientedPlane3Factor.h
index 99ac81b..5cbbafb 100644
--- a/gtsam/slam/OrientedPlane3Factor.h
+++ b/gtsam/slam/OrientedPlane3Factor.h
@@ -7,8 +7,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/OrientedPlane3.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/geometry/OrientedPlane3.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/PoseRotationPrior.h b/gtsam/slam/PoseRotationPrior.h
index 8ce9098..2df7b34 100644
--- a/gtsam/slam/PoseRotationPrior.h
+++ b/gtsam/slam/PoseRotationPrior.h
@@ -9,8 +9,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/concepts.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/geometry/concepts.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 
 namespace gtsam {

diff --git a/gtsam/slam/PoseTranslationPrior.h b/gtsam/slam/PoseTranslationPrior.h
index c5257f4..6677f98 100644
--- a/gtsam/slam/PoseTranslationPrior.h
+++ b/gtsam/slam/PoseTranslationPrior.h
@@ -9,8 +9,8 @@
 
 #pragma once
 
-#include <gtsam/geometry/concepts.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/geometry/concepts.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/PriorFactor.h b/gtsam/slam/PriorFactor.h
index 335eb2b..e94aac9 100644
--- a/gtsam/slam/PriorFactor.h
+++ b/gtsam/slam/PriorFactor.h
@@ -17,4 +17,4 @@
 
 // Note: PriorFactor has been moved to gtsam/nonlinear/PriorFactor.h. This file
 // has been left here for backwards compatibility.
-#include <gtsam/nonlinear/PriorFactor.h>
+#include "gtsam/nonlinear/PriorFactor.h"

diff --git a/gtsam/slam/ProjectionFactor.h b/gtsam/slam/ProjectionFactor.h
index f40d8f5..8a849e0 100644
--- a/gtsam/slam/ProjectionFactor.h
+++ b/gtsam/slam/ProjectionFactor.h
@@ -20,11 +20,11 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Cal3_S2.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Cal3_S2.h"
 #include <optional>
 
 namespace gtsam {

diff --git a/gtsam/slam/RangeFactor.h b/gtsam/slam/RangeFactor.h
index 3fa5c1a..a59061b 100644
--- a/gtsam/slam/RangeFactor.h
+++ b/gtsam/slam/RangeFactor.h
@@ -18,5 +18,5 @@
 #endif
 
 
-#include <gtsam/sam/RangeFactor.h>
+#include "gtsam/sam/RangeFactor.h"
 

diff --git a/gtsam/slam/ReferenceFrameFactor.h b/gtsam/slam/ReferenceFrameFactor.h
index 0ae6ea8..e5572bf 100644
--- a/gtsam/slam/ReferenceFrameFactor.h
+++ b/gtsam/slam/ReferenceFrameFactor.h
@@ -17,7 +17,7 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/RegularImplicitSchurFactor.h b/gtsam/slam/RegularImplicitSchurFactor.h
index 924aaa1..01a27cb 100644
--- a/gtsam/slam/RegularImplicitSchurFactor.h
+++ b/gtsam/slam/RegularImplicitSchurFactor.h
@@ -7,9 +7,9 @@
 
 #pragma once
 
-#include <gtsam/geometry/CameraSet.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/geometry/CameraSet.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/VectorValues.h"
 
 #include <iosfwd>
 #include <map>

diff --git a/gtsam/slam/RotateFactor.h b/gtsam/slam/RotateFactor.h
index 7efbef5..ba55863 100644
--- a/gtsam/slam/RotateFactor.h
+++ b/gtsam/slam/RotateFactor.h
@@ -7,8 +7,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/geometry/Rot3.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/geometry/Rot3.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/SmartFactorBase.h b/gtsam/slam/SmartFactorBase.h
index d3e879c..fa89549 100644
--- a/gtsam/slam/SmartFactorBase.h
+++ b/gtsam/slam/SmartFactorBase.h
@@ -21,13 +21,13 @@
 
 #pragma once
 
-#include <gtsam/slam/JacobianFactorQ.h>
-#include <gtsam/slam/JacobianFactorSVD.h>
-#include <gtsam/slam/RegularImplicitSchurFactor.h>
+#include "gtsam/slam/JacobianFactorQ.h"
+#include "gtsam/slam/JacobianFactorSVD.h"
+#include "gtsam/slam/RegularImplicitSchurFactor.h"
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/linear/RegularHessianFactor.h>
-#include <gtsam/geometry/CameraSet.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/linear/RegularHessianFactor.h"
+#include "gtsam/geometry/CameraSet.h"
 
 #include <optional>
 #ifdef GTSAM_ENABLE_BOOST_SERIALIZATION

diff --git a/gtsam/slam/SmartFactorParams.h b/gtsam/slam/SmartFactorParams.h
index 4523d0e..8fd683f 100644
--- a/gtsam/slam/SmartFactorParams.h
+++ b/gtsam/slam/SmartFactorParams.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/geometry/triangulation.h>
+#include "gtsam/geometry/triangulation.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/SmartProjectionFactor.h b/gtsam/slam/SmartProjectionFactor.h
index c54efec..d64313d 100644
--- a/gtsam/slam/SmartProjectionFactor.h
+++ b/gtsam/slam/SmartProjectionFactor.h
@@ -19,12 +19,12 @@
 
 #pragma once
 
-#include <gtsam/slam/SmartFactorBase.h>
-#include <gtsam/slam/SmartFactorParams.h>
+#include "gtsam/slam/SmartFactorBase.h"
+#include "gtsam/slam/SmartFactorParams.h"
 
-#include <gtsam/geometry/triangulation.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/geometry/triangulation.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/slam/dataset.h"
 
 #include <optional>
 #include <vector>

diff --git a/gtsam/slam/SmartProjectionPoseFactor.h b/gtsam/slam/SmartProjectionPoseFactor.h
index b88c1c6..0e879d9 100644
--- a/gtsam/slam/SmartProjectionPoseFactor.h
+++ b/gtsam/slam/SmartProjectionPoseFactor.h
@@ -19,7 +19,7 @@
 
 #pragma once
 
-#include <gtsam/slam/SmartProjectionFactor.h>
+#include "gtsam/slam/SmartProjectionFactor.h"
 
 namespace gtsam {
 /**

diff --git a/gtsam/slam/SmartProjectionRigFactor.h b/gtsam/slam/SmartProjectionRigFactor.h
index 6007c84..c7b7bca 100644
--- a/gtsam/slam/SmartProjectionRigFactor.h
+++ b/gtsam/slam/SmartProjectionRigFactor.h
@@ -24,7 +24,7 @@
 
 #pragma once
 
-#include <gtsam/slam/SmartProjectionFactor.h>
+#include "gtsam/slam/SmartProjectionFactor.h"
 
 namespace gtsam {
 /**

diff --git a/gtsam/slam/StereoFactor.h b/gtsam/slam/StereoFactor.h
index 5adafcf..8371f34 100644
--- a/gtsam/slam/StereoFactor.h
+++ b/gtsam/slam/StereoFactor.h
@@ -19,8 +19,8 @@
 #pragma once
 
 #include <optional>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/geometry/StereoCamera.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/geometry/StereoCamera.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/TriangulationFactor.h b/gtsam/slam/TriangulationFactor.h
index 3b8486a..fc7712b 100644
--- a/gtsam/slam/TriangulationFactor.h
+++ b/gtsam/slam/TriangulationFactor.h
@@ -17,8 +17,8 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/geometry/CalibratedCamera.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/geometry/CalibratedCamera.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/dataset.cpp b/gtsam/slam/dataset.cpp
index 91317ba..4974782 100644
--- a/gtsam/slam/dataset.cpp
+++ b/gtsam/slam/dataset.cpp
@@ -18,28 +18,28 @@
  * @brief utility functions for loading datasets
  */
 
-#include <gtsam/sam/BearingRangeFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/sam/BearingRangeFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/dataset.h"
 
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Rot3.h>
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Rot3.h"
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/nonlinear/Values-inl.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/nonlinear/Values-inl.h"
 
-#include <gtsam/linear/Sampler.h>
+#include "gtsam/linear/Sampler.h"
 
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/inference/Symbol.h"
 
-#include <gtsam/base/GenericValue.h>
-#include <gtsam/base/Lie.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Value.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/types.h>
+#include "gtsam/base/GenericValue.h"
+#include "gtsam/base/Lie.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Value.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/types.h"
 
 #include <optional>
 

diff --git a/gtsam/slam/dataset.h b/gtsam/slam/dataset.h
index 1ecaade..a522283 100644
--- a/gtsam/slam/dataset.h
+++ b/gtsam/slam/dataset.h
@@ -20,18 +20,18 @@
 
 #pragma once
 
-#include <gtsam/sfm/BinaryMeasurement.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/sfm/SfmData.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/types.h>
+#include "gtsam/sfm/BinaryMeasurement.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/sfm/SfmData.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/types.h"
 
 #include <string>
 #include <utility> // for pair

diff --git a/gtsam/slam/expressions.h b/gtsam/slam/expressions.h
index 8d34ce6..0a7fbb5 100644
--- a/gtsam/slam/expressions.h
+++ b/gtsam/slam/expressions.h
@@ -7,13 +7,13 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/expressions.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/Line3.h>
-#include <gtsam/geometry/OrientedPlane3.h>
-#include <gtsam/geometry/PinholeCamera.h>
+#include "gtsam/nonlinear/expressions.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/Line3.h"
+#include "gtsam/geometry/OrientedPlane3.h"
+#include "gtsam/geometry/PinholeCamera.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/lago.cpp b/gtsam/slam/lago.cpp
index 645c5ea..5eb2aa6 100644
--- a/gtsam/slam/lago.cpp
+++ b/gtsam/slam/lago.cpp
@@ -16,15 +16,15 @@
  *  @date   May 14, 2014
  */
 
-#include <gtsam/slam/lago.h>
-
-#include <gtsam/slam/InitializePose.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/timing.h>
-#include <gtsam/base/kruskal.h>
+#include "gtsam/slam/lago.h"
+
+#include "gtsam/slam/InitializePose.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/timing.h"
+#include "gtsam/base/kruskal.h"
 
 #include <iostream>
 #include <stack>

diff --git a/gtsam/slam/lago.h b/gtsam/slam/lago.h
index 5661a7c..027393b 100644
--- a/gtsam/slam/lago.h
+++ b/gtsam/slam/lago.h
@@ -34,9 +34,9 @@
 
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
 
 namespace gtsam {
 namespace lago {

diff --git a/gtsam/slam/tests/PinholeFactor.h b/gtsam/slam/tests/PinholeFactor.h
index 4d843f5..613d8f6 100644
--- a/gtsam/slam/tests/PinholeFactor.h
+++ b/gtsam/slam/tests/PinholeFactor.h
@@ -23,10 +23,10 @@ template <typename T>
 struct traits;
 }
 
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/slam/SmartFactorBase.h>
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/slam/SmartFactorBase.h"
 
 namespace gtsam {
 

diff --git a/gtsam/slam/tests/smartFactorScenarios.h b/gtsam/slam/tests/smartFactorScenarios.h
index 9518406..84e5040 100644
--- a/gtsam/slam/tests/smartFactorScenarios.h
+++ b/gtsam/slam/tests/smartFactorScenarios.h
@@ -17,12 +17,12 @@
  */
 
 #pragma once
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/SphericalCamera.h>
-#include <gtsam/slam/GeneralSFMFactor.h>
-#include <gtsam/slam/SmartProjectionFactor.h>
-#include <gtsam/slam/SmartProjectionPoseFactor.h>
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/SphericalCamera.h"
+#include "gtsam/slam/GeneralSFMFactor.h"
+#include "gtsam/slam/SmartProjectionFactor.h"
+#include "gtsam/slam/SmartProjectionPoseFactor.h"
 
 #include "../SmartProjectionRigFactor.h"
 

diff --git a/gtsam/slam/tests/testAntiFactor.cpp b/gtsam/slam/tests/testAntiFactor.cpp
index 31e3896..e0ec6af 100644
--- a/gtsam/slam/tests/testAntiFactor.cpp
+++ b/gtsam/slam/tests/testAntiFactor.cpp
@@ -15,18 +15,18 @@
  * @author  Stephen Williams
  */
 
-#include <CppUnitLite/TestHarness.h>
-
-#include <gtsam/slam/AntiFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/NonlinearOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/geometry/Pose3.h>
+#include "CppUnitLite/TestHarness.h"
+
+#include "gtsam/slam/AntiFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/NonlinearOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/geometry/Pose3.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/slam/tests/testBetweenFactor.cpp b/gtsam/slam/tests/testBetweenFactor.cpp
index 68a7f63..6be3b11 100644
--- a/gtsam/slam/tests/testBetweenFactor.cpp
+++ b/gtsam/slam/tests/testBetweenFactor.cpp
@@ -5,14 +5,14 @@
  * @date Aug 2, 2013
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 using namespace std::placeholders;
 using namespace gtsam;

diff --git a/gtsam/slam/tests/testDataset.cpp b/gtsam/slam/tests/testDataset.cpp
index 1310417..f60e40c 100644
--- a/gtsam/slam/tests/testDataset.cpp
+++ b/gtsam/slam/tests/testDataset.cpp
@@ -16,13 +16,13 @@
  */
 
 
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/TestableAssertions.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 #include <sstream>

diff --git a/gtsam/slam/tests/testEssentialMatrixConstraint.cpp b/gtsam/slam/tests/testEssentialMatrixConstraint.cpp
index c3c4432..8add78d 100644
--- a/gtsam/slam/tests/testEssentialMatrixConstraint.cpp
+++ b/gtsam/slam/tests/testEssentialMatrixConstraint.cpp
@@ -17,13 +17,13 @@
  *  @date Jan 5, 2014
  */
 
-#include <gtsam/slam/EssentialMatrixConstraint.h>
-#include <gtsam/nonlinear/Symbol.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "gtsam/slam/EssentialMatrixConstraint.h"
+#include "gtsam/nonlinear/Symbol.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/TestableAssertions.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std::placeholders;
 using namespace std;

diff --git a/gtsam/slam/tests/testEssentialMatrixFactor.cpp b/gtsam/slam/tests/testEssentialMatrixFactor.cpp
index 11558e3..224c5e4 100644
--- a/gtsam/slam/tests/testEssentialMatrixFactor.cpp
+++ b/gtsam/slam/tests/testEssentialMatrixFactor.cpp
@@ -5,18 +5,18 @@
  * @date December 17, 2013
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/CalibratedCamera.h>
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/expressionTesting.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/sfm/SfmData.h>
-#include <gtsam/slam/EssentialMatrixFactor.h>
-#include <gtsam/slam/dataset.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/CalibratedCamera.h"
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/expressionTesting.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/sfm/SfmData.h"
+#include "gtsam/slam/EssentialMatrixFactor.h"
+#include "gtsam/slam/dataset.h"
 
 using namespace std::placeholders;
 using namespace std;

diff --git a/gtsam/slam/tests/testFrobeniusFactor.cpp b/gtsam/slam/tests/testFrobeniusFactor.cpp
index 321b54c..fe845f3 100644
--- a/gtsam/slam/tests/testFrobeniusFactor.cpp
+++ b/gtsam/slam/tests/testFrobeniusFactor.cpp
@@ -18,17 +18,17 @@
  * @brief  Check evaluateError for various Frobenius norm
  */
 
-#include <gtsam/base/lieProxies.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/SO3.h>
-#include <gtsam/geometry/SO4.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/factorTesting.h>
-#include <gtsam/slam/FrobeniusFactor.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/lieProxies.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/SO3.h"
+#include "gtsam/geometry/SO4.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/factorTesting.h"
+#include "gtsam/slam/FrobeniusFactor.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/slam/tests/testGeneralSFMFactor.cpp b/gtsam/slam/tests/testGeneralSFMFactor.cpp
index ec37b41..4527786 100644
--- a/gtsam/slam/tests/testGeneralSFMFactor.cpp
+++ b/gtsam/slam/tests/testGeneralSFMFactor.cpp
@@ -16,20 +16,20 @@
  * @brief unit tests for GeneralSFMFactor
  */
 
-#include <gtsam/slam/GeneralSFMFactor.h>
-#include <gtsam/sam/RangeFactor.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Rot2.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/slam/GeneralSFMFactor.h"
+#include "gtsam/sam/RangeFactor.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Rot2.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/Testable.h"
 
 #include <memory>
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 #include <vector>

diff --git a/gtsam/slam/tests/testGeneralSFMFactor_Cal3Bundler.cpp b/gtsam/slam/tests/testGeneralSFMFactor_Cal3Bundler.cpp
index 3be35f7..537fb86 100644
--- a/gtsam/slam/tests/testGeneralSFMFactor_Cal3Bundler.cpp
+++ b/gtsam/slam/tests/testGeneralSFMFactor_Cal3Bundler.cpp
@@ -16,20 +16,20 @@
  * @brief unit tests for GeneralSFMFactor
  */
 
-#include <gtsam/slam/GeneralSFMFactor.h>
-#include <gtsam/sam/RangeFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/slam/GeneralSFMFactor.h"
+#include "gtsam/sam/RangeFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/base/Testable.h"
 
 #include <memory>
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 #include <vector>

diff --git a/gtsam/slam/tests/testInitializePose.cpp b/gtsam/slam/tests/testInitializePose.cpp
index bb8b794..b16a716 100644
--- a/gtsam/slam/tests/testInitializePose.cpp
+++ b/gtsam/slam/tests/testInitializePose.cpp
@@ -18,12 +18,12 @@
  *  @date   August, 2014
  */
 
-#include <gtsam/slam/InitializePose.h>
+#include "gtsam/slam/InitializePose.h"
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/slam/dataset.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/slam/dataset.h"
 
 #include <cmath>
 

diff --git a/gtsam/slam/tests/testInitializePose3.cpp b/gtsam/slam/tests/testInitializePose3.cpp
index e45ee04..5cd0b8b 100644
--- a/gtsam/slam/tests/testInitializePose3.cpp
+++ b/gtsam/slam/tests/testInitializePose3.cpp
@@ -18,12 +18,12 @@
  *  @date   August, 2014
  */
 
-#include <gtsam/slam/InitializePose3.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/Pose3.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/slam/InitializePose3.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/Pose3.h"
+#include "CppUnitLite/TestHarness.h"
 
 #include <cmath>
 

diff --git a/gtsam/slam/tests/testKarcherMeanFactor.cpp b/gtsam/slam/tests/testKarcherMeanFactor.cpp
index c129b8f..5482067 100644
--- a/gtsam/slam/tests/testKarcherMeanFactor.cpp
+++ b/gtsam/slam/tests/testKarcherMeanFactor.cpp
@@ -14,15 +14,15 @@
  * @author Frank Dellaert
  */
 
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/SO4.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/KarcherMeanFactor-inl.h>
-#include <gtsam/slam/KarcherMeanFactor.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/SO4.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/KarcherMeanFactor-inl.h"
+#include "gtsam/slam/KarcherMeanFactor.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/slam/tests/testLago.cpp b/gtsam/slam/tests/testLago.cpp
index 7776862..d89836e 100644
--- a/gtsam/slam/tests/testLago.cpp
+++ b/gtsam/slam/tests/testLago.cpp
@@ -19,14 +19,14 @@
  *  @date   May 14, 2014
  */
 
-#include <gtsam/slam/lago.h>
-#include <gtsam/slam/InitializePose.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/inference/Symbol.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/slam/lago.h"
+#include "gtsam/slam/InitializePose.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/inference/Symbol.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <cmath>
 

diff --git a/gtsam/slam/tests/testOrientedPlane3Factor.cpp b/gtsam/slam/tests/testOrientedPlane3Factor.cpp
index 6e0753c..f397038 100644
--- a/gtsam/slam/tests/testOrientedPlane3Factor.cpp
+++ b/gtsam/slam/tests/testOrientedPlane3Factor.cpp
@@ -16,14 +16,14 @@
  * @brief Tests the OrientedPlane3Factor class
  */
 
-#include <gtsam/slam/OrientedPlane3Factor.h>
+#include "gtsam/slam/OrientedPlane3Factor.h"
 
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/ISAM2.h>
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/ISAM2.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std::placeholders;
 using namespace gtsam;

diff --git a/gtsam/slam/tests/testPoseRotationPrior.cpp b/gtsam/slam/tests/testPoseRotationPrior.cpp
index f61beab..bb80c82 100644
--- a/gtsam/slam/tests/testPoseRotationPrior.cpp
+++ b/gtsam/slam/tests/testPoseRotationPrior.cpp
@@ -7,14 +7,14 @@
  * @author Alex Cunningham
  */
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/base/numericalDerivative.h"
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
 
-#include <gtsam/slam/PoseRotationPrior.h>
+#include "gtsam/slam/PoseRotationPrior.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/slam/tests/testPoseTranslationPrior.cpp b/gtsam/slam/tests/testPoseTranslationPrior.cpp
index bbc0c65..2791341 100644
--- a/gtsam/slam/tests/testPoseTranslationPrior.cpp
+++ b/gtsam/slam/tests/testPoseTranslationPrior.cpp
@@ -5,13 +5,13 @@
  * @author Alex Cunningham
  */
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
 
-#include <gtsam/slam/PoseTranslationPrior.h>
+#include "gtsam/slam/PoseTranslationPrior.h"
 
 using namespace gtsam;
 

diff --git a/gtsam/slam/tests/testPriorFactor.cpp b/gtsam/slam/tests/testPriorFactor.cpp
index d1a60e3..cead99d 100644
--- a/gtsam/slam/tests/testPriorFactor.cpp
+++ b/gtsam/slam/tests/testPriorFactor.cpp
@@ -5,11 +5,11 @@
  * @date   Nov 4, 2014
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/navigation/ImuBias.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/nonlinear/factorTesting.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/navigation/ImuBias.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/nonlinear/factorTesting.h"
 
 using namespace std;
 using namespace std::placeholders;

diff --git a/gtsam/slam/tests/testProjectionFactor.cpp b/gtsam/slam/tests/testProjectionFactor.cpp
index 63c50e3..df1c795 100644
--- a/gtsam/slam/tests/testProjectionFactor.cpp
+++ b/gtsam/slam/tests/testProjectionFactor.cpp
@@ -16,15 +16,15 @@
  *  @date Nov 2009
  */
 
-#include <gtsam/slam/ProjectionFactor.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/Cal3DS2.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/slam/ProjectionFactor.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/Cal3DS2.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/slam/tests/testReferenceFrameFactor.cpp b/gtsam/slam/tests/testReferenceFrameFactor.cpp
index b5800a4..7702c10 100644
--- a/gtsam/slam/tests/testReferenceFrameFactor.cpp
+++ b/gtsam/slam/tests/testReferenceFrameFactor.cpp
@@ -16,17 +16,17 @@
 
 #include <iostream>
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
-#include <gtsam/slam/ReferenceFrameFactor.h>
+#include "gtsam/slam/ReferenceFrameFactor.h"
 
 using namespace std;
 using namespace boost;

diff --git a/gtsam/slam/tests/testRegularImplicitSchurFactor.cpp b/gtsam/slam/tests/testRegularImplicitSchurFactor.cpp
index 98809e9..2a57f9b 100644
--- a/gtsam/slam/tests/testRegularImplicitSchurFactor.cpp
+++ b/gtsam/slam/tests/testRegularImplicitSchurFactor.cpp
@@ -16,18 +16,18 @@
  * @date    Oct 20, 2013
  */
 
-#include <gtsam/slam/JacobianFactorQ.h>
-#include <gtsam/slam/JacobianFactorQR.h>
-#include <gtsam/slam/RegularImplicitSchurFactor.h>
-#include <gtsam/geometry/CalibratedCamera.h>
-#include <gtsam/geometry/Point2.h>
-
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/base/timing.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/slam/JacobianFactorQ.h"
+#include "gtsam/slam/JacobianFactorQR.h"
+#include "gtsam/slam/RegularImplicitSchurFactor.h"
+#include "gtsam/geometry/CalibratedCamera.h"
+#include "gtsam/geometry/Point2.h"
+
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/base/timing.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/slam/tests/testRotateFactor.cpp b/gtsam/slam/tests/testRotateFactor.cpp
index 68e0de0..25ec42d 100644
--- a/gtsam/slam/tests/testRotateFactor.cpp
+++ b/gtsam/slam/tests/testRotateFactor.cpp
@@ -5,12 +5,12 @@
  * @date December 17, 2013
  */
 
-#include <gtsam/slam/RotateFactor.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/slam/RotateFactor.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "CppUnitLite/TestHarness.h"
 
 #include <vector>
 

diff --git a/gtsam/slam/tests/testSerializationDataset.cpp b/gtsam/slam/tests/testSerializationDataset.cpp
index dcac3d4..124657c 100644
--- a/gtsam/slam/tests/testSerializationDataset.cpp
+++ b/gtsam/slam/tests/testSerializationDataset.cpp
@@ -16,11 +16,11 @@
  * @date Jan 1, 2021
  */
 
-#include <gtsam/sfm/SfmData.h>
-#include <gtsam/slam/dataset.h>
+#include "gtsam/sfm/SfmData.h"
+#include "gtsam/slam/dataset.h"
 
-#include <gtsam/base/serializationTestHelpers.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/serializationTestHelpers.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/slam/tests/testSerializationInSlam.cpp b/gtsam/slam/tests/testSerializationInSlam.cpp
index f729f8e..523f094 100644
--- a/gtsam/slam/tests/testSerializationInSlam.cpp
+++ b/gtsam/slam/tests/testSerializationInSlam.cpp
@@ -19,12 +19,12 @@
 #include "smartFactorScenarios.h"
 #include "PinholeFactor.h"
 
-#include <gtsam/slam/SmartProjectionFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/base/std_optional_serialization.h>
+#include "gtsam/slam/SmartProjectionFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/base/std_optional_serialization.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 

diff --git a/gtsam/slam/tests/testSlamExpressions.cpp b/gtsam/slam/tests/testSlamExpressions.cpp
index b529898..951b570 100644
--- a/gtsam/slam/tests/testSlamExpressions.cpp
+++ b/gtsam/slam/tests/testSlamExpressions.cpp
@@ -15,11 +15,11 @@
  * @brief test expressions for SLAM
  */
 
-#include <gtsam/slam/expressions.h>
-#include <gtsam/nonlinear/expressionTesting.h>
-#include <gtsam/geometry/CalibratedCamera.h>
+#include "gtsam/slam/expressions.h"
+#include "gtsam/nonlinear/expressionTesting.h"
+#include "gtsam/geometry/CalibratedCamera.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 

diff --git a/gtsam/slam/tests/testSmartFactorBase.cpp b/gtsam/slam/tests/testSmartFactorBase.cpp
index 52deb2b..f9d7fed 100644
--- a/gtsam/slam/tests/testSmartFactorBase.cpp
+++ b/gtsam/slam/tests/testSmartFactorBase.cpp
@@ -16,12 +16,12 @@
  *  @date   Feb 2015
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/StereoCamera.h>
-#include <gtsam/slam/SmartFactorBase.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/StereoCamera.h"
+#include "gtsam/slam/SmartFactorBase.h"
 
 #include "PinholeFactor.h"
 

diff --git a/gtsam/slam/tests/testSmartProjectionFactor.cpp b/gtsam/slam/tests/testSmartProjectionFactor.cpp
index 564b7f6..15f5804 100644
--- a/gtsam/slam/tests/testSmartProjectionFactor.cpp
+++ b/gtsam/slam/tests/testSmartProjectionFactor.cpp
@@ -20,9 +20,9 @@
  */
 
 #include "smartFactorScenarios.h"
-#include <gtsam/slam/SmartProjectionFactor.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/slam/SmartProjectionFactor.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "CppUnitLite/TestHarness.h"
 #include <iostream>
 
 namespace {

diff --git a/gtsam/slam/tests/testSmartProjectionPoseFactor.cpp b/gtsam/slam/tests/testSmartProjectionPoseFactor.cpp
index 807f485..0708a5a 100644
--- a/gtsam/slam/tests/testSmartProjectionPoseFactor.cpp
+++ b/gtsam/slam/tests/testSmartProjectionPoseFactor.cpp
@@ -20,11 +20,11 @@
  */
 
 #include "smartFactorScenarios.h"
-#include <gtsam/slam/ProjectionFactor.h>
-#include <gtsam/slam/PoseTranslationPrior.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/slam/ProjectionFactor.h"
+#include "gtsam/slam/PoseTranslationPrior.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "CppUnitLite/TestHarness.h"
 #include <iostream>
 
 using namespace std::placeholders;

diff --git a/gtsam/slam/tests/testSmartProjectionRigFactor.cpp b/gtsam/slam/tests/testSmartProjectionRigFactor.cpp
index 67bbfa3..7925bac 100644
--- a/gtsam/slam/tests/testSmartProjectionRigFactor.cpp
+++ b/gtsam/slam/tests/testSmartProjectionRigFactor.cpp
@@ -19,11 +19,11 @@
  *  @date   August 2021
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/slam/PoseTranslationPrior.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/slam/PoseTranslationPrior.h"
 
 #include <iostream>
 
@@ -961,7 +961,7 @@ TEST(SmartProjectionRigFactor, Cal3Bundler) {
   EXPECT(assert_equal(cam3.pose(), result.at<Pose3>(x3), 1e-6));
 }
 
-#include <gtsam/slam/ProjectionFactor.h>
+#include "gtsam/slam/ProjectionFactor.h"
 typedef GenericProjectionFactor<Pose3, Point3> TestProjectionFactor;
 static Symbol l0('L', 0);
 /* *************************************************************************/
@@ -1179,7 +1179,7 @@ TEST(SmartProjectionRigFactor, optimization_3poses_measurementsFromSamePose) {
 }
 
 #ifndef DISABLE_TIMING
-#include <gtsam/base/timing.h>
+#include "gtsam/base/timing.h"
 // this factor is slightly slower (but comparable) to original
 // SmartProjectionPoseFactor
 //-Total: 0 CPU (0 times, 0 wall, 0.17 children, min: 0 max: 0)
@@ -1319,7 +1319,7 @@ TEST(SmartProjectionFactorP, optimization_3poses_sphericalCamera) {
 }
 
 #ifndef DISABLE_TIMING
-#include <gtsam/base/timing.h>
+#include "gtsam/base/timing.h"
 // using spherical camera is slightly slower (but comparable) to
 // PinholePose<Cal3_S2>
 //|   -SmartFactorP spherical LINEARIZE: 0.01 CPU (1000 times, 0.008178 wall,

diff --git a/gtsam/slam/tests/testStereoFactor.cpp b/gtsam/slam/tests/testStereoFactor.cpp
index bcd1e9a..1d8c2bb 100644
--- a/gtsam/slam/tests/testStereoFactor.cpp
+++ b/gtsam/slam/tests/testStereoFactor.cpp
@@ -15,18 +15,18 @@
  * @author  Chris Beall
  */
 
-#include <gtsam/slam/StereoFactor.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/StereoCamera.h>
-#include <gtsam/geometry/Cal3_S2Stereo.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Point3.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/slam/StereoFactor.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/StereoCamera.h"
+#include "gtsam/geometry/Cal3_S2Stereo.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Point3.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/slam/tests/testTriangulationFactor.cpp b/gtsam/slam/tests/testTriangulationFactor.cpp
index 29b0330..69e9425 100644
--- a/gtsam/slam/tests/testTriangulationFactor.cpp
+++ b/gtsam/slam/tests/testTriangulationFactor.cpp
@@ -16,14 +16,14 @@
  *      Author: cbeall3
  */
 
-#include <gtsam/geometry/triangulation.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/StereoCamera.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/nonlinear/Expression.h>
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/geometry/triangulation.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/StereoCamera.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/nonlinear/Expression.h"
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/symbolic/SymbolicBayesNet.cpp b/gtsam/symbolic/SymbolicBayesNet.cpp
index f7113b2..43d2dd0 100644
--- a/gtsam/symbolic/SymbolicBayesNet.cpp
+++ b/gtsam/symbolic/SymbolicBayesNet.cpp
@@ -16,8 +16,8 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/inference/FactorGraph-inst.h>
-#include <gtsam/symbolic/SymbolicBayesNet.h>
+#include "gtsam/inference/FactorGraph-inst.h"
+#include "gtsam/symbolic/SymbolicBayesNet.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicBayesNet.h b/gtsam/symbolic/SymbolicBayesNet.h
index 3102191..a339f53 100644
--- a/gtsam/symbolic/SymbolicBayesNet.h
+++ b/gtsam/symbolic/SymbolicBayesNet.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/symbolic/SymbolicConditional.h>
-#include <gtsam/inference/BayesNet.h>
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/base/types.h>
+#include "gtsam/symbolic/SymbolicConditional.h"
+#include "gtsam/inference/BayesNet.h"
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/base/types.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicBayesTree.cpp b/gtsam/symbolic/SymbolicBayesTree.cpp
index 07cb8a0..b8ad487 100644
--- a/gtsam/symbolic/SymbolicBayesTree.cpp
+++ b/gtsam/symbolic/SymbolicBayesTree.cpp
@@ -16,12 +16,12 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/symbolic/SymbolicBayesTree.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/symbolic/SymbolicBayesNet.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
-#include <gtsam/inference/BayesTree-inst.h>
-#include <gtsam/inference/BayesTreeCliqueBase-inst.h>
+#include "gtsam/symbolic/SymbolicBayesTree.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/symbolic/SymbolicBayesNet.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
+#include "gtsam/inference/BayesTree-inst.h"
+#include "gtsam/inference/BayesTreeCliqueBase-inst.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicBayesTree.h b/gtsam/symbolic/SymbolicBayesTree.h
index 275b956..793d72b 100644
--- a/gtsam/symbolic/SymbolicBayesTree.h
+++ b/gtsam/symbolic/SymbolicBayesTree.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/symbolic/SymbolicBayesNet.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/inference/BayesTree.h>
-#include <gtsam/inference/BayesTreeCliqueBase.h>
+#include "gtsam/symbolic/SymbolicBayesNet.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/inference/BayesTree.h"
+#include "gtsam/inference/BayesTreeCliqueBase.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicConditional.cpp b/gtsam/symbolic/SymbolicConditional.cpp
index fd9cc45..d37a468 100644
--- a/gtsam/symbolic/SymbolicConditional.cpp
+++ b/gtsam/symbolic/SymbolicConditional.cpp
@@ -15,7 +15,7 @@
  * @date    Oct 17, 2010
  */
 
-#include <gtsam/symbolic/SymbolicConditional.h>
+#include "gtsam/symbolic/SymbolicConditional.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicConditional.h b/gtsam/symbolic/SymbolicConditional.h
index 5cc4e9c..3188d27 100644
--- a/gtsam/symbolic/SymbolicConditional.h
+++ b/gtsam/symbolic/SymbolicConditional.h
@@ -17,10 +17,10 @@
 
 #pragma once
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/types.h>
-#include <gtsam/inference/Conditional-inst.h>
-#include <gtsam/symbolic/SymbolicFactor.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/types.h"
+#include "gtsam/inference/Conditional-inst.h"
+#include "gtsam/symbolic/SymbolicFactor.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicEliminationTree.cpp b/gtsam/symbolic/SymbolicEliminationTree.cpp
index 7a2e9b8..dfa74e5 100644
--- a/gtsam/symbolic/SymbolicEliminationTree.cpp
+++ b/gtsam/symbolic/SymbolicEliminationTree.cpp
@@ -16,8 +16,8 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/inference/EliminationTree-inst.h>
-#include <gtsam/symbolic/SymbolicEliminationTree.h>
+#include "gtsam/inference/EliminationTree-inst.h"
+#include "gtsam/symbolic/SymbolicEliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicEliminationTree.h b/gtsam/symbolic/SymbolicEliminationTree.h
index a68675e..eadf5fb 100644
--- a/gtsam/symbolic/SymbolicEliminationTree.h
+++ b/gtsam/symbolic/SymbolicEliminationTree.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/symbolic/SymbolicBayesNet.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/inference/EliminationTree.h>
+#include "gtsam/symbolic/SymbolicBayesNet.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/inference/EliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicFactor-inst.h b/gtsam/symbolic/SymbolicFactor-inst.h
index a5410aa..53a7851 100644
--- a/gtsam/symbolic/SymbolicFactor-inst.h
+++ b/gtsam/symbolic/SymbolicFactor-inst.h
@@ -17,11 +17,11 @@
 
 #pragma once
 
-#include <gtsam/symbolic/SymbolicFactor.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
-#include <gtsam/inference/Factor.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/timing.h>
+#include "gtsam/symbolic/SymbolicFactor.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
+#include "gtsam/inference/Factor.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/timing.h"
 
 #include <memory>
 

diff --git a/gtsam/symbolic/SymbolicFactor.cpp b/gtsam/symbolic/SymbolicFactor.cpp
index 1f26389..9a27b99 100644
--- a/gtsam/symbolic/SymbolicFactor.cpp
+++ b/gtsam/symbolic/SymbolicFactor.cpp
@@ -15,12 +15,12 @@
  * @date    Oct 17, 2010
  */
 
-#include <gtsam/base/FastVector.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/symbolic/SymbolicFactor.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/symbolic/SymbolicFactor-inst.h>
+#include "gtsam/base/FastVector.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/symbolic/SymbolicFactor.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/symbolic/SymbolicFactor-inst.h"
 
 using namespace std;
 

diff --git a/gtsam/symbolic/SymbolicFactor.h b/gtsam/symbolic/SymbolicFactor.h
index 190609e..f5c1f37 100644
--- a/gtsam/symbolic/SymbolicFactor.h
+++ b/gtsam/symbolic/SymbolicFactor.h
@@ -17,9 +17,9 @@
 
 #pragma once
 
-#include <gtsam/inference/Factor.h>
-#include <gtsam/inference/Key.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/inference/Factor.h"
+#include "gtsam/inference/Key.h"
+#include "gtsam/base/Testable.h"
 
 #include <memory>
 

diff --git a/gtsam/symbolic/SymbolicFactorGraph.cpp b/gtsam/symbolic/SymbolicFactorGraph.cpp
index 1f17b8a..1899370 100644
--- a/gtsam/symbolic/SymbolicFactorGraph.cpp
+++ b/gtsam/symbolic/SymbolicFactorGraph.cpp
@@ -16,13 +16,13 @@
  */
 
 
-#include <gtsam/inference/FactorGraph-inst.h>
-#include <gtsam/inference/EliminateableFactorGraph-inst.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/symbolic/SymbolicEliminationTree.h>
-#include <gtsam/symbolic/SymbolicJunctionTree.h>
-#include <gtsam/symbolic/SymbolicBayesTree.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
+#include "gtsam/inference/FactorGraph-inst.h"
+#include "gtsam/inference/EliminateableFactorGraph-inst.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/symbolic/SymbolicEliminationTree.h"
+#include "gtsam/symbolic/SymbolicJunctionTree.h"
+#include "gtsam/symbolic/SymbolicBayesTree.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicFactorGraph.h b/gtsam/symbolic/SymbolicFactorGraph.h
index 4122031..7758641 100644
--- a/gtsam/symbolic/SymbolicFactorGraph.h
+++ b/gtsam/symbolic/SymbolicFactorGraph.h
@@ -18,10 +18,10 @@
 
 #pragma once
 
-#include <gtsam/symbolic/SymbolicFactor.h>
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/inference/EliminateableFactorGraph.h>
-#include <gtsam/base/types.h>
+#include "gtsam/symbolic/SymbolicFactor.h"
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/inference/EliminateableFactorGraph.h"
+#include "gtsam/base/types.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicISAM.cpp b/gtsam/symbolic/SymbolicISAM.cpp
index ff72487..26da1d8 100644
--- a/gtsam/symbolic/SymbolicISAM.cpp
+++ b/gtsam/symbolic/SymbolicISAM.cpp
@@ -16,8 +16,8 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/symbolic/SymbolicISAM.h>
-#include <gtsam/inference/ISAM-inst.h>
+#include "gtsam/symbolic/SymbolicISAM.h"
+#include "gtsam/inference/ISAM-inst.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicISAM.h b/gtsam/symbolic/SymbolicISAM.h
index 1742b6f..710eabc 100644
--- a/gtsam/symbolic/SymbolicISAM.h
+++ b/gtsam/symbolic/SymbolicISAM.h
@@ -18,8 +18,8 @@
 
 #pragma once
 
-#include <gtsam/symbolic/SymbolicBayesTree.h>
-#include <gtsam/inference/ISAM.h>
+#include "gtsam/symbolic/SymbolicBayesTree.h"
+#include "gtsam/inference/ISAM.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicJunctionTree.cpp b/gtsam/symbolic/SymbolicJunctionTree.cpp
index b26b02d..10423ab 100644
--- a/gtsam/symbolic/SymbolicJunctionTree.cpp
+++ b/gtsam/symbolic/SymbolicJunctionTree.cpp
@@ -16,9 +16,9 @@
  * @author Richard Roberts
  */
 
-#include <gtsam/inference/JunctionTree-inst.h>
-#include <gtsam/symbolic/SymbolicJunctionTree.h>
-#include <gtsam/symbolic/SymbolicEliminationTree.h>
+#include "gtsam/inference/JunctionTree-inst.h"
+#include "gtsam/symbolic/SymbolicJunctionTree.h"
+#include "gtsam/symbolic/SymbolicEliminationTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/SymbolicJunctionTree.h b/gtsam/symbolic/SymbolicJunctionTree.h
index 8c27459..8d8501d 100644
--- a/gtsam/symbolic/SymbolicJunctionTree.h
+++ b/gtsam/symbolic/SymbolicJunctionTree.h
@@ -18,9 +18,9 @@
 
 #pragma once
 
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/symbolic/SymbolicBayesTree.h>
-#include <gtsam/inference/JunctionTree.h>
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/symbolic/SymbolicBayesTree.h"
+#include "gtsam/inference/JunctionTree.h"
 
 namespace gtsam {
 

diff --git a/gtsam/symbolic/tests/symbolicExampleGraphs.h b/gtsam/symbolic/tests/symbolicExampleGraphs.h
index 3d30534..397f90e 100644
--- a/gtsam/symbolic/tests/symbolicExampleGraphs.h
+++ b/gtsam/symbolic/tests/symbolicExampleGraphs.h
@@ -20,13 +20,13 @@
 
 #pragma once
 
-#include <gtsam/base/FastDefaultAllocator.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/symbolic/SymbolicFactor.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
-#include <gtsam/symbolic/SymbolicBayesTree.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/base/FastDefaultAllocator.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/symbolic/SymbolicFactor.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
+#include "gtsam/symbolic/SymbolicBayesTree.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/Symbol.h"
 
 namespace gtsam {
   namespace {

diff --git a/gtsam/symbolic/tests/testSerializationSymbolic.cpp b/gtsam/symbolic/tests/testSerializationSymbolic.cpp
index e6f00b0..4b7216a 100644
--- a/gtsam/symbolic/tests/testSerializationSymbolic.cpp
+++ b/gtsam/symbolic/tests/testSerializationSymbolic.cpp
@@ -16,10 +16,10 @@
  * @date Feb 7, 2012
  */
 
-#include <gtsam/symbolic/tests/symbolicExampleGraphs.h>
+#include "gtsam/symbolic/tests/symbolicExampleGraphs.h"
 
-#include <gtsam/base/serializationTestHelpers.h>
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/serializationTestHelpers.h"
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/symbolic/tests/testSymbolicBayesNet.cpp b/gtsam/symbolic/tests/testSymbolicBayesNet.cpp
index bf2b6a2..b8993dd 100644
--- a/gtsam/symbolic/tests/testSymbolicBayesNet.cpp
+++ b/gtsam/symbolic/tests/testSymbolicBayesNet.cpp
@@ -15,14 +15,14 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/symbolic/SymbolicBayesNet.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/Vector.h>
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/symbolic/SymbolicBayesNet.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/Vector.h"
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 
 using namespace std;

diff --git a/gtsam/symbolic/tests/testSymbolicBayesTree.cpp b/gtsam/symbolic/tests/testSymbolicBayesTree.cpp
index e4a47bd..96ff12a 100644
--- a/gtsam/symbolic/tests/testSymbolicBayesTree.cpp
+++ b/gtsam/symbolic/tests/testSymbolicBayesTree.cpp
@@ -17,13 +17,13 @@
  * @author  Viorela Ila
  */
 
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/symbolic/SymbolicBayesNet.h>
-#include <gtsam/symbolic/SymbolicBayesTree.h>
-#include <gtsam/symbolic/tests/symbolicExampleGraphs.h>
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/symbolic/SymbolicBayesNet.h"
+#include "gtsam/symbolic/SymbolicBayesTree.h"
+#include "gtsam/symbolic/tests/symbolicExampleGraphs.h"
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
 #include <iterator>
 #include <type_traits>
 

diff --git a/gtsam/symbolic/tests/testSymbolicConditional.cpp b/gtsam/symbolic/tests/testSymbolicConditional.cpp
index e888fd3..ad05fb1 100644
--- a/gtsam/symbolic/tests/testSymbolicConditional.cpp
+++ b/gtsam/symbolic/tests/testSymbolicConditional.cpp
@@ -16,9 +16,9 @@
  */
 
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/symbolic/tests/testSymbolicEliminationTree.cpp b/gtsam/symbolic/tests/testSymbolicEliminationTree.cpp
index 47ef754..a58d181 100644
--- a/gtsam/symbolic/tests/testSymbolicEliminationTree.cpp
+++ b/gtsam/symbolic/tests/testSymbolicEliminationTree.cpp
@@ -16,10 +16,10 @@
  * @date Oct 14, 2010
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/symbolic/SymbolicEliminationTree.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/symbolic/SymbolicEliminationTree.h"
 
 #include <vector>
 

diff --git a/gtsam/symbolic/tests/testSymbolicFactor.cpp b/gtsam/symbolic/tests/testSymbolicFactor.cpp
index 7ba538d..39c955e 100644
--- a/gtsam/symbolic/tests/testSymbolicFactor.cpp
+++ b/gtsam/symbolic/tests/testSymbolicFactor.cpp
@@ -15,11 +15,11 @@
  * @author  Frank Dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/symbolic/SymbolicFactor.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/symbolic/SymbolicFactor.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
 
 
 using namespace std;

diff --git a/gtsam/symbolic/tests/testSymbolicFactorGraph.cpp b/gtsam/symbolic/tests/testSymbolicFactorGraph.cpp
index 8afb506..068fe64 100644
--- a/gtsam/symbolic/tests/testSymbolicFactorGraph.cpp
+++ b/gtsam/symbolic/tests/testSymbolicFactorGraph.cpp
@@ -15,15 +15,15 @@
  *  @author Christian Potthast
  **/
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/symbolic/SymbolicBayesNet.h>
-#include <gtsam/symbolic/SymbolicBayesTree.h>
-#include <gtsam/symbolic/SymbolicConditional.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/symbolic/tests/symbolicExampleGraphs.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/symbolic/SymbolicBayesNet.h"
+#include "gtsam/symbolic/SymbolicBayesTree.h"
+#include "gtsam/symbolic/SymbolicConditional.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/symbolic/tests/symbolicExampleGraphs.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/symbolic/tests/testSymbolicISAM.cpp b/gtsam/symbolic/tests/testSymbolicISAM.cpp
index c09f6f6..f3b1b5f 100644
--- a/gtsam/symbolic/tests/testSymbolicISAM.cpp
+++ b/gtsam/symbolic/tests/testSymbolicISAM.cpp
@@ -15,10 +15,10 @@
  * @author  Michael Kaess
  */
 
-#include <gtsam/symbolic/SymbolicISAM.h>
-#include <gtsam/symbolic/tests/symbolicExampleGraphs.h>
+#include "gtsam/symbolic/SymbolicISAM.h"
+#include "gtsam/symbolic/tests/symbolicExampleGraphs.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/gtsam/symbolic/tests/testSymbolicJunctionTree.cpp b/gtsam/symbolic/tests/testSymbolicJunctionTree.cpp
index 100814f..a2d3ac1 100644
--- a/gtsam/symbolic/tests/testSymbolicJunctionTree.cpp
+++ b/gtsam/symbolic/tests/testSymbolicJunctionTree.cpp
@@ -16,12 +16,12 @@
  * @author  Frank Dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/TestableAssertions.h"
 
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/symbolic/SymbolicEliminationTree.h>
-#include <gtsam/symbolic/SymbolicJunctionTree.h>
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/symbolic/SymbolicEliminationTree.h"
+#include "gtsam/symbolic/SymbolicJunctionTree.h"
 
 #include "symbolicExampleGraphs.h"
 

diff --git a/gtsam/symbolic/tests/testVariableIndex.cpp b/gtsam/symbolic/tests/testVariableIndex.cpp
index 8fdb7be..b1cfb89 100644
--- a/gtsam/symbolic/tests/testVariableIndex.cpp
+++ b/gtsam/symbolic/tests/testVariableIndex.cpp
@@ -16,11 +16,11 @@
  * @date    Sep 26, 2010
  */
 
-#include <gtsam/inference/VariableIndex.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/base/TestableAssertions.h>
+#include "gtsam/inference/VariableIndex.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/base/TestableAssertions.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/BUILD b/tests/BUILD
new file mode 100644
index 0000000..91c7aa6
--- /dev/null
+++ b/tests/BUILD
@@ -0,0 +1,392 @@
+
+cc_library(
+    name = "test_headers",
+    hdrs = glob([
+        "ImuMeasurement.h",
+        "Measurement.h",
+        "simulated2D.h",
+        "simulated2DConstraints.h",
+        "simulated2DOriented.h",
+        "simulated3D.h",
+        "smallExample.h",
+    ]),
+    deps = ["//examples:SFMdata_header"],
+    visibility = ["//visibility:private"],
+)
+
+cc_test(
+    name = "testBoundingConstraint",
+    srcs = glob(["testBoundingConstraint.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite"
+    ],
+    copts = ["-I."]
+)
+
+
+cc_test(
+    name = "testDoglegOptimizer",
+    srcs = glob(["testDoglegOptimizer.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testExpressionFactor",
+    srcs = glob(["testExpressionFactor.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testExtendedKalmanFilter",
+    srcs = glob(["testExtendedKalmanFilter.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testGaussianBayesTreeB",
+    srcs = glob(["testGaussianBayesTreeB.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testGaussianFactorGraphB",
+    srcs = glob(["testGaussianFactorGraphB.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testGaussianISAM",
+    srcs = glob(["testGaussianISAM.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testGaussianISAM2",
+    srcs = glob(["testGaussianISAM2.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testGaussianJunctionTreeB",
+    srcs = glob(["testGaussianJunctionTreeB.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testGeneralSFMFactorB",
+    srcs = glob(["testGeneralSFMFactorB.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testGncOptimizer",
+    srcs = glob(["testGncOptimizer.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+# NOTE: disabled in cmakelists if not using GTSAM_USE_BOOST_FEATURES
+# cc_test(
+#     name = "testGraph",
+#     srcs = glob(["testGraph.cpp"]),
+#     deps = [
+#         ":test_headers",
+#         "//:gtsam",
+#         "//:CppUnitLite",
+#     ],
+#     copts = ["-I."]
+# )
+
+cc_test(
+    name = "testImuPreintegration",
+    srcs = glob(["testImuPreintegration.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testIterative",
+    srcs = glob(["testIterative.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testLie",
+    srcs = glob(["testLie.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testManifold",
+    srcs = glob(["testManifold.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testMarginals",
+    srcs = glob(["testMarginals.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testNonlinearEquality",
+    srcs = glob(["testNonlinearEquality.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testNonlinearFactor",
+    srcs = glob(["testNonlinearFactor.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testNonlinearFactorGraph",
+    srcs = glob(["testNonlinearFactorGraph.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testNonlinearISAM",
+    srcs = glob(["testNonlinearISAM.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testNonlinearOptimizer",
+    srcs = glob(["testNonlinearOptimizer.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testPCGSolver",
+    srcs = glob(["testPCGSolver.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testPreconditioner",
+    srcs = glob(["testPreconditioner.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testRobust",
+    srcs = glob(["testRobust.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testRot3Optimization",
+    srcs = glob(["testRot3Optimization.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+# cc_test(
+#     name = "testSerializationSlam",
+#     srcs = glob(["testSerializationSlam.cpp"]),
+#     deps = [
+#         ":test_headers",
+#         "//:gtsam",
+#         "//:CppUnitLite",
+#     ],
+#     copts = ["-I."]
+# )
+
+cc_test(
+    name = "testSimulated2D",
+    srcs = glob(["testSimulated2D.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testSimulated2DOriented",
+    srcs = glob(["testSimulated2DOriented.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testSimulated3D",
+    srcs = glob(["testSimulated3D.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testSubgraphPreconditioner",
+    srcs = glob(["testSubgraphPreconditioner.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testSubgraphSolver",
+    srcs = glob(["testSubgraphSolver.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testTranslationRecovery",
+    srcs = glob(["testTranslationRecovery.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+
+cc_test(
+    name = "testVisualISAM2",
+    srcs = glob(["testVisualISAM2.cpp"]),
+    deps = [
+        ":test_headers",
+        "//:gtsam",
+        "//:CppUnitLite",
+    ],
+    copts = ["-I."]
+)
+

diff --git a/tests/ImuMeasurement.h b/tests/ImuMeasurement.h
index c2c7851..85d0b60 100644
--- a/tests/ImuMeasurement.h
+++ b/tests/ImuMeasurement.h
@@ -1,6 +1,6 @@
 #pragma once
 
-#include <tests/Measurement.h>
+#include "tests/Measurement.h"
 
 namespace gtsam {
 

diff --git a/tests/simulated2D.h b/tests/simulated2D.h
index 612dd18..8086d08 100644
--- a/tests/simulated2D.h
+++ b/tests/simulated2D.h
@@ -18,9 +18,9 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/geometry/Point2.h>
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/geometry/Point2.h"
 #include "gtsam/base/OptionalJacobian.h"
 
 // \namespace

diff --git a/tests/simulated2DConstraints.h b/tests/simulated2DConstraints.h
index ae626d1..7fab65e 100644
--- a/tests/simulated2DConstraints.h
+++ b/tests/simulated2DConstraints.h
@@ -19,12 +19,12 @@
 
 #pragma once
 
-#include <gtsam/base/numericalDerivative.h>
+#include "gtsam/base/numericalDerivative.h"
 
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/BoundingConstraint.h>
-#include <tests/simulated2D.h>
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/BoundingConstraint.h"
+#include "tests/simulated2D.h"
 #include "gtsam/nonlinear/NonlinearFactor.h"
 
 // \namespace

diff --git a/tests/simulated2DOriented.h b/tests/simulated2DOriented.h
index 8dae71f..59b49a8 100644
--- a/tests/simulated2DOriented.h
+++ b/tests/simulated2DOriented.h
@@ -18,10 +18,10 @@
 // \callgraph
 #pragma once
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
 #include "gtsam/base/OptionalJacobian.h"
 
 // \namespace

diff --git a/tests/simulated3D.h b/tests/simulated3D.h
index 8926b37..5e5ee35 100644
--- a/tests/simulated3D.h
+++ b/tests/simulated3D.h
@@ -19,10 +19,10 @@
 
 #pragma once
 
-#include <gtsam/base/Matrix.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
+#include "gtsam/base/Matrix.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
 #include "gtsam/base/OptionalJacobian.h"
 
 // \namespace

diff --git a/tests/smallExample.h b/tests/smallExample.h
index c5ab105..6fb8671 100644
--- a/tests/smallExample.h
+++ b/tests/smallExample.h
@@ -21,11 +21,11 @@
 
 #pragma once
 
-#include <tests/simulated2D.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
+#include "tests/simulated2D.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
 
 namespace gtsam {
 namespace example {

diff --git a/tests/testBoundingConstraint.cpp b/tests/testBoundingConstraint.cpp
index 4aa357b..69cdb14 100644
--- a/tests/testBoundingConstraint.cpp
+++ b/tests/testBoundingConstraint.cpp
@@ -15,12 +15,12 @@
  * @author Alex Cunningham
  */
 
-#include <tests/simulated2DConstraints.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
+#include "tests/simulated2DConstraints.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 namespace iq2D = simulated2D::inequality_constraints;
 using namespace std;

diff --git a/tests/testDoglegOptimizer.cpp b/tests/testDoglegOptimizer.cpp
index 870ad5f..f5cb72f 100644
--- a/tests/testDoglegOptimizer.cpp
+++ b/tests/testDoglegOptimizer.cpp
@@ -16,16 +16,16 @@
  * @author  Frank dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
-
-#include <tests/smallExample.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/DoglegOptimizer.h>
-#include <gtsam/nonlinear/DoglegOptimizerImpl.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/slam/SmartProjectionPoseFactor.h>
+#include "CppUnitLite/TestHarness.h"
+
+#include "tests/smallExample.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/DoglegOptimizer.h"
+#include "gtsam/nonlinear/DoglegOptimizerImpl.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/slam/SmartProjectionPoseFactor.h"
 #include "examples/SFMdata.h"
 
 #include <functional>

diff --git a/tests/testExpressionFactor.cpp b/tests/testExpressionFactor.cpp
index 4c2ac99..6c5f13b 100644
--- a/tests/testExpressionFactor.cpp
+++ b/tests/testExpressionFactor.cpp
@@ -17,15 +17,15 @@
  * @brief unit tests for Block Automatic Differentiation
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/nonlinear/ExpressionFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/nonlinear/expressionTesting.h>
-#include <gtsam/slam/GeneralSFMFactor.h>
-#include <gtsam/slam/ProjectionFactor.h>
-#include <gtsam/slam/expressions.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/nonlinear/ExpressionFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/nonlinear/expressionTesting.h"
+#include "gtsam/slam/GeneralSFMFactor.h"
+#include "gtsam/slam/ProjectionFactor.h"
+#include "gtsam/slam/expressions.h"
 
 using namespace std::placeholders;
 

diff --git a/tests/testExtendedKalmanFilter.cpp b/tests/testExtendedKalmanFilter.cpp
index 3fce797..05055d7 100644
--- a/tests/testExtendedKalmanFilter.cpp
+++ b/tests/testExtendedKalmanFilter.cpp
@@ -14,14 +14,14 @@
  * @author Stephen Williams
  */
 
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/ExtendedKalmanFilter-inl.h>
-#include <gtsam/nonlinear/NonlinearFactor.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/Point2.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/ExtendedKalmanFilter-inl.h"
+#include "gtsam/nonlinear/NonlinearFactor.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/Point2.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace gtsam;
 

diff --git a/tests/testGaussianBayesTreeB.cpp b/tests/testGaussianBayesTreeB.cpp
index bb11809..bb43f82 100644
--- a/tests/testGaussianBayesTreeB.cpp
+++ b/tests/testGaussianBayesTreeB.cpp
@@ -15,16 +15,16 @@
  * @author  Michael Kaess
  */
 
-#include <tests/smallExample.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/GaussianDensity.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/geometry/Rot2.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "tests/smallExample.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/GaussianDensity.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/geometry/Rot2.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testGaussianFactorGraphB.cpp b/tests/testGaussianFactorGraphB.cpp
index 36f618c..1876d4c 100644
--- a/tests/testGaussianFactorGraphB.cpp
+++ b/tests/testGaussianFactorGraphB.cpp
@@ -15,16 +15,16 @@
  *  @author Christian Potthast
  **/
 
-#include <tests/smallExample.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Testable.h>
+#include "tests/smallExample.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Testable.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <string.h>
 #include <iostream>
@@ -383,9 +383,9 @@ TEST(GaussianFactorGraph, hasConstraints)
   EXPECT(!hasConstraints(fg));
 }
 
-#include <gtsam/slam/ProjectionFactor.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/sam/RangeFactor.h>
+#include "gtsam/slam/ProjectionFactor.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/sam/RangeFactor.h"
 
 /* ************************************************************************* */
 TEST( GaussianFactorGraph, conditional_sigma_failure) {

diff --git a/tests/testGaussianISAM.cpp b/tests/testGaussianISAM.cpp
index ee333f4..acac475 100644
--- a/tests/testGaussianISAM.cpp
+++ b/tests/testGaussianISAM.cpp
@@ -15,12 +15,12 @@
  * @author  Michael Kaess
  */
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
-#include <tests/smallExample.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianISAM.h>
-#include <gtsam/inference/Ordering.h>
+#include "tests/smallExample.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianISAM.h"
+#include "gtsam/inference/Ordering.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testGaussianISAM2.cpp b/tests/testGaussianISAM2.cpp
index 3b507d8..191ec83 100644
--- a/tests/testGaussianISAM2.cpp
+++ b/tests/testGaussianISAM2.cpp
@@ -4,26 +4,26 @@
  * @author  Michael Kaess
  */
 
-#include <gtsam/nonlinear/ISAM2.h>
-
-#include <tests/smallExample.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Marginals.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianBayesTree.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/debug.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/treeTraversal-inst.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/nonlinear/ISAM2.h"
+
+#include "tests/smallExample.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Marginals.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianBayesTree.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/debug.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/treeTraversal-inst.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <cassert>
 

diff --git a/tests/testGaussianJunctionTreeB.cpp b/tests/testGaussianJunctionTreeB.cpp
index 2c5dc49..9337b9d 100644
--- a/tests/testGaussianJunctionTreeB.cpp
+++ b/tests/testGaussianJunctionTreeB.cpp
@@ -15,32 +15,32 @@
  * @author nikai
  */
 
-#include <tests/smallExample.h>
-#include <gtsam/sam/BearingRangeFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/GaussianConditional.h>
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/GaussianEliminationTree.h>
-#include <gtsam/linear/GaussianJunctionTree.h>
-#include <gtsam/linear/HessianFactor.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/symbolic/SymbolicEliminationTree.h>
-#include <gtsam/inference/BayesTree.h>
-#include <gtsam/inference/ClusterTree.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/Matrix.h>
-#include <gtsam/base/Testable.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "tests/smallExample.h"
+#include "gtsam/sam/BearingRangeFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/GaussianConditional.h"
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/GaussianEliminationTree.h"
+#include "gtsam/linear/GaussianJunctionTree.h"
+#include "gtsam/linear/HessianFactor.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/symbolic/SymbolicEliminationTree.h"
+#include "gtsam/inference/BayesTree.h"
+#include "gtsam/inference/ClusterTree.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/Matrix.h"
+#include "gtsam/base/Testable.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <cmath>
 #include <list>

diff --git a/tests/testGeneralSFMFactorB.cpp b/tests/testGeneralSFMFactorB.cpp
index fa27e13..54e90f3 100644
--- a/tests/testGeneralSFMFactorB.cpp
+++ b/tests/testGeneralSFMFactorB.cpp
@@ -15,21 +15,21 @@
  * @brief test general SFM class, with nonlinear optimization and BAL files
  */
 
-#include <gtsam/sfm/SfmData.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/GeneralSFMFactor.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearOptimizer.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/NoiseModel.h>
+#include "gtsam/sfm/SfmData.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/GeneralSFMFactor.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearOptimizer.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/NoiseModel.h"
 
-#include <CppUnitLite/Failure.h>
-#include <CppUnitLite/Test.h>
-#include <CppUnitLite/TestRegistry.h>
-#include <CppUnitLite/TestResult.h>
+#include "CppUnitLite/Failure.h"
+#include "CppUnitLite/Test.h"
+#include "CppUnitLite/TestRegistry.h"
+#include "CppUnitLite/TestResult.h"
 #include <stddef.h>
 #include <stdexcept>
 #include <string>

diff --git a/tests/testGncOptimizer.cpp b/tests/testGncOptimizer.cpp
index 4e0ebf5..485c05e 100644
--- a/tests/testGncOptimizer.cpp
+++ b/tests/testGncOptimizer.cpp
@@ -27,14 +27,14 @@
  * https://arxiv.org/pdf/2007.15109.pdf, 2020.
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/nonlinear/GncOptimizer.h>
-#include <gtsam/nonlinear/LinearContainerFactor.h>
-#include <gtsam/slam/dataset.h>
-#include <tests/smallExample.h>
-
-#include <gtsam/sam/BearingFactor.h>
-#include <gtsam/geometry/Pose2.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/nonlinear/GncOptimizer.h"
+#include "gtsam/nonlinear/LinearContainerFactor.h"
+#include "gtsam/slam/dataset.h"
+#include "tests/smallExample.h"
+
+#include "gtsam/sam/BearingFactor.h"
+#include "gtsam/geometry/Pose2.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testGraph.cpp b/tests/testGraph.cpp
index 92b2c56..5dc71b2 100644
--- a/tests/testGraph.cpp
+++ b/tests/testGraph.cpp
@@ -16,15 +16,15 @@
  * @brief unit test for graph-inl.h
  */
 
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/JacobianFactor.h>
-#include <gtsam/inference/graph.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/Pose2.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/JacobianFactor.h"
+#include "gtsam/inference/graph.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/Pose2.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <memory>
 

diff --git a/tests/testImuPreintegration.cpp b/tests/testImuPreintegration.cpp
index 1f584be..71cb1e0 100644
--- a/tests/testImuPreintegration.cpp
+++ b/tests/testImuPreintegration.cpp
@@ -15,12 +15,12 @@
  * @author Russell Buchanan
  **/
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/navigation/CombinedImuFactor.h>
-#include <gtsam/slam/dataset.h>
-#include <tests/ImuMeasurement.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/navigation/CombinedImuFactor.h"
+#include "gtsam/slam/dataset.h"
+#include "tests/ImuMeasurement.h"
 
 #include <fstream>
 #include <iostream>

diff --git a/tests/testIterative.cpp b/tests/testIterative.cpp
index 4df598f..896cd99 100644
--- a/tests/testIterative.cpp
+++ b/tests/testIterative.cpp
@@ -15,14 +15,14 @@
  *  @author Frank Dellaert
  **/
 
-#include <tests/smallExample.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/iterative.h>
-#include <gtsam/geometry/Pose2.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "tests/smallExample.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/iterative.h"
+#include "gtsam/geometry/Pose2.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testLie.cpp b/tests/testLie.cpp
index ae934d6..b3907c1 100644
--- a/tests/testLie.cpp
+++ b/tests/testLie.cpp
@@ -16,13 +16,13 @@
  * @brief unit tests for Lie group type machinery
  */
 
-#include <gtsam/base/ProductLieGroup.h>
+#include "gtsam/base/ProductLieGroup.h"
 
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/base/testLie.h>
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/base/testLie.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testManifold.cpp b/tests/testManifold.cpp
index 5e93da2..41772f1 100644
--- a/tests/testManifold.cpp
+++ b/tests/testManifold.cpp
@@ -17,17 +17,17 @@
  * @brief unit tests for Manifold type machinery
  */
 
-#include <gtsam/base/Manifold.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Cal3Bundler.h>
-#include <gtsam/base/VectorSpace.h>
-#include <gtsam/base/testLie.h>
-#include <gtsam/base/Testable.h>
+#include "gtsam/base/Manifold.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Cal3Bundler.h"
+#include "gtsam/base/VectorSpace.h"
+#include "gtsam/base/testLie.h"
+#include "gtsam/base/Testable.h"
 
 #undef CHECK
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testMarginals.cpp b/tests/testMarginals.cpp
index 344a1f5..6896a76 100644
--- a/tests/testMarginals.cpp
+++ b/tests/testMarginals.cpp
@@ -16,23 +16,23 @@
  * @date May 14, 2012
  */
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 // for all nonlinear keys
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/inference/Symbol.h"
 
 // for points and poses
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Pose2.h>
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Pose2.h"
 
 // for modeling measurement uncertainty - all models included here
-#include <gtsam/linear/NoiseModel.h>
+#include "gtsam/linear/NoiseModel.h"
 
 // add in headers for specific factors
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
 
-#include <gtsam/nonlinear/Marginals.h>
+#include "gtsam/nonlinear/Marginals.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testNonlinearEquality.cpp b/tests/testNonlinearEquality.cpp
index 73eb2a2..eae1d87 100644
--- a/tests/testNonlinearEquality.cpp
+++ b/tests/testNonlinearEquality.cpp
@@ -14,23 +14,23 @@
  * @author Alex Cunningham
  */
 
-#include <tests/simulated2DConstraints.h>
-
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/ProjectionFactor.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/PinholeCamera.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "tests/simulated2DConstraints.h"
+
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/ProjectionFactor.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/PinholeCamera.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testNonlinearFactor.cpp b/tests/testNonlinearFactor.cpp
index cca78b8..dcfd1d7 100644
--- a/tests/testNonlinearFactor.cpp
+++ b/tests/testNonlinearFactor.cpp
@@ -20,18 +20,18 @@
 /*STL/C++*/
 #include <iostream>
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 // TODO: DANGEROUS, create shared pointers
 #define GTSAM_MAGIC_GAUSSIAN 2
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/Matrix.h>
-#include <tests/smallExample.h>
-#include <tests/simulated2D.h>
-#include <gtsam/linear/GaussianFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/inference/Symbol.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/Matrix.h"
+#include "tests/smallExample.h"
+#include "tests/simulated2D.h"
+#include "gtsam/linear/GaussianFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/inference/Symbol.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testNonlinearFactorGraph.cpp b/tests/testNonlinearFactorGraph.cpp
index 305cd96..cd415f1 100644
--- a/tests/testNonlinearFactorGraph.cpp
+++ b/tests/testNonlinearFactorGraph.cpp
@@ -18,19 +18,19 @@
  * @author  Frank Dellaert
  */
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/Matrix.h>
-#include <tests/smallExample.h>
-#include <gtsam/inference/FactorGraph.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/sam/RangeFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/Matrix.h"
+#include "tests/smallExample.h"
+#include "gtsam/inference/FactorGraph.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/sam/RangeFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 /*STL/C++*/
 #include <iostream>

diff --git a/tests/testNonlinearISAM.cpp b/tests/testNonlinearISAM.cpp
index 4ffdbda..785da56 100644
--- a/tests/testNonlinearISAM.cpp
+++ b/tests/testNonlinearISAM.cpp
@@ -3,18 +3,18 @@
  * @author Alex Cunningham
  */
 
-#include <CppUnitLite/TestHarness.h>
-
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/NonlinearISAM.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/Sampler.h>
-#include <gtsam/geometry/Pose2.h>
+#include "CppUnitLite/TestHarness.h"
+
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/NonlinearISAM.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/Sampler.h"
+#include "gtsam/geometry/Pose2.h"
 
 #include <iostream>
 #include <sstream>

diff --git a/tests/testNonlinearOptimizer.cpp b/tests/testNonlinearOptimizer.cpp
index cac25c2..da28785 100644
--- a/tests/testNonlinearOptimizer.cpp
+++ b/tests/testNonlinearOptimizer.cpp
@@ -15,21 +15,21 @@
  * @author  Frank Dellaert
  */
 
-#include <tests/smallExample.h>
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/nonlinear/DoglegOptimizer.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/NoiseModel.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/base/Matrix.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "tests/smallExample.h"
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/nonlinear/DoglegOptimizer.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/NoiseModel.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/base/Matrix.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 
 #include <iostream>
@@ -502,7 +502,7 @@ TEST(NonlinearOptimizer, disconnected_graph) {
 }
 
 /* ************************************************************************* */
-#include <gtsam/linear/iterative.h>
+#include "gtsam/linear/iterative.h"
 
 class IterativeLM : public LevenbergMarquardtOptimizer {
   /// Solver specific parameters

diff --git a/tests/testPCGSolver.cpp b/tests/testPCGSolver.cpp
index 0398648..54284f2 100644
--- a/tests/testPCGSolver.cpp
+++ b/tests/testPCGSolver.cpp
@@ -16,15 +16,15 @@
  * @date    Aug 06, 2014
  */
 
-#include <tests/smallExample.h>
-#include <gtsam/nonlinear/LevenbergMarquardtOptimizer.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/PCGSolver.h>
-#include <gtsam/linear/SubgraphPreconditioner.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/Matrix.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "tests/smallExample.h"
+#include "gtsam/nonlinear/LevenbergMarquardtOptimizer.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/PCGSolver.h"
+#include "gtsam/linear/SubgraphPreconditioner.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/Matrix.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 #include <fstream>

diff --git a/tests/testPreconditioner.cpp b/tests/testPreconditioner.cpp
index 967584b..b16564e 100644
--- a/tests/testPreconditioner.cpp
+++ b/tests/testPreconditioner.cpp
@@ -16,14 +16,14 @@
  *  @date   Nov 6, 2014
  **/
 
-#include <CppUnitLite/TestHarness.h>
-
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/VectorValues.h>
-#include <gtsam/linear/Preconditioner.h>
-#include <gtsam/linear/PCGSolver.h>
-#include <gtsam/geometry/Point2.h>
+#include "CppUnitLite/TestHarness.h"
+
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/VectorValues.h"
+#include "gtsam/linear/Preconditioner.h"
+#include "gtsam/linear/PCGSolver.h"
+#include "gtsam/geometry/Point2.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testRobust.cpp b/tests/testRobust.cpp
index ad361f6..963748d 100644
--- a/tests/testRobust.cpp
+++ b/tests/testRobust.cpp
@@ -17,12 +17,12 @@
  *  @date   Apr 7, 2022
  **/
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/TestableAssertions.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/TestableAssertions.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 using namespace gtsam;
 

diff --git a/tests/testRot3Optimization.cpp b/tests/testRot3Optimization.cpp
index 5cb31ef..04ad9ed 100644
--- a/tests/testRot3Optimization.cpp
+++ b/tests/testRot3Optimization.cpp
@@ -15,16 +15,16 @@
  * @author  Richard Roberts
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/base/lieProxies.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/GaussNewtonOptimizer.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/slam/BetweenFactor.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/base/lieProxies.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/GaussNewtonOptimizer.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/slam/BetweenFactor.h"
 
 using namespace gtsam;
 

diff --git a/tests/testSerializationSlam.cpp b/tests/testSerializationSlam.cpp
index c4170b1..287eba4 100644
--- a/tests/testSerializationSlam.cpp
+++ b/tests/testSerializationSlam.cpp
@@ -16,41 +16,41 @@
  * @date Feb 7, 2012
  */
 
-#include <CppUnitLite/TestHarness.h>
-
-#include <tests/smallExample.h>
-
-#include <gtsam/sam/RangeFactor.h>
-#include <gtsam/sam/BearingRangeFactor.h>
-
-#include <gtsam/slam/BetweenFactor.h>
-#include <gtsam/slam/GeneralSFMFactor.h>
-#include <gtsam/slam/ProjectionFactor.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/slam/StereoFactor.h>
-
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/geometry/StereoPoint2.h>
-#include <gtsam/geometry/Point3.h>
-#include <gtsam/geometry/Rot2.h>
-#include <gtsam/geometry/Rot3.h>
-#include <gtsam/geometry/Pose2.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/geometry/Cal3_S2.h>
-#include <gtsam/geometry/Cal3DS2.h>
-#include <gtsam/geometry/Cal3_S2Stereo.h>
-#include <gtsam/geometry/CalibratedCamera.h>
-#include <gtsam/geometry/PinholeCamera.h>
-#include <gtsam/geometry/StereoCamera.h>
-#include <gtsam/geometry/SimpleCamera.h>
-
-#include <gtsam/nonlinear/NonlinearEquality.h>
-#include <gtsam/nonlinear/PriorFactor.h>
-#include <gtsam/linear/SubgraphPreconditioner.h>
-#include <gtsam/linear/GaussianISAM.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/serializationTestHelpers.h>
-#include <gtsam/base/std_optional_serialization.h>
+#include "CppUnitLite/TestHarness.h"
+
+#include "tests/smallExample.h"
+
+#include "gtsam/sam/RangeFactor.h"
+#include "gtsam/sam/BearingRangeFactor.h"
+
+#include "gtsam/slam/BetweenFactor.h"
+#include "gtsam/slam/GeneralSFMFactor.h"
+#include "gtsam/slam/ProjectionFactor.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/slam/StereoFactor.h"
+
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/geometry/StereoPoint2.h"
+#include "gtsam/geometry/Point3.h"
+#include "gtsam/geometry/Rot2.h"
+#include "gtsam/geometry/Rot3.h"
+#include "gtsam/geometry/Pose2.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/geometry/Cal3_S2.h"
+#include "gtsam/geometry/Cal3DS2.h"
+#include "gtsam/geometry/Cal3_S2Stereo.h"
+#include "gtsam/geometry/CalibratedCamera.h"
+#include "gtsam/geometry/PinholeCamera.h"
+#include "gtsam/geometry/StereoCamera.h"
+#include "gtsam/geometry/SimpleCamera.h"
+
+#include "gtsam/nonlinear/NonlinearEquality.h"
+#include "gtsam/nonlinear/PriorFactor.h"
+#include "gtsam/linear/SubgraphPreconditioner.h"
+#include "gtsam/linear/GaussianISAM.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/serializationTestHelpers.h"
+#include "gtsam/base/std_optional_serialization.h"
 
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/serialization/export.hpp>

diff --git a/tests/testSimulated2D.cpp b/tests/testSimulated2D.cpp
index 9c342ad..0557ad7 100644
--- a/tests/testSimulated2D.cpp
+++ b/tests/testSimulated2D.cpp
@@ -17,11 +17,11 @@
  **/
 
 #include <iostream>
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
-#include <tests/simulated2D.h>
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
+#include "tests/simulated2D.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testSimulated2DOriented.cpp b/tests/testSimulated2DOriented.cpp
index 4168a42..02188a0 100644
--- a/tests/testSimulated2DOriented.cpp
+++ b/tests/testSimulated2DOriented.cpp
@@ -16,17 +16,17 @@
  * @brief unit tests for simulated2DOriented
  */
 
-#include <tests/simulated2D.h>
-#include <tests/simulated2DOriented.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "tests/simulated2D.h"
+#include "tests/simulated2DOriented.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
 
 using namespace std;
 using namespace gtsam;
 
 #include <iostream>
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 // Convenience for named keys
 using symbol_shorthand::X;

diff --git a/tests/testSimulated3D.cpp b/tests/testSimulated3D.cpp
index 9bc67c1..f76a193 100644
--- a/tests/testSimulated3D.cpp
+++ b/tests/testSimulated3D.cpp
@@ -15,13 +15,13 @@
  * @author Alex Cunningham
  **/
 
-#include <tests/simulated3D.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/geometry/Pose3.h>
-#include <gtsam/base/Testable.h>
-#include <gtsam/base/numericalDerivative.h>
+#include "tests/simulated3D.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/geometry/Pose3.h"
+#include "gtsam/base/Testable.h"
+#include "gtsam/base/numericalDerivative.h"
 
-#include <CppUnitLite/TestHarness.h>
+#include "CppUnitLite/TestHarness.h"
 
 #include <iostream>
 

diff --git a/tests/testSubgraphPreconditioner.cpp b/tests/testSubgraphPreconditioner.cpp
index 994fe51..e9af7fb 100644
--- a/tests/testSubgraphPreconditioner.cpp
+++ b/tests/testSubgraphPreconditioner.cpp
@@ -15,19 +15,19 @@
  *  @author Frank Dellaert
  **/
 
-#include <tests/smallExample.h>
-
-#include <gtsam/base/numericalDerivative.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/linear/GaussianEliminationTree.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/SubgraphPreconditioner.h>
-#include <gtsam/linear/iterative.h>
-#include <gtsam/slam/dataset.h>
-#include <gtsam/symbolic/SymbolicFactorGraph.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "tests/smallExample.h"
+
+#include "gtsam/base/numericalDerivative.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/linear/GaussianEliminationTree.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/SubgraphPreconditioner.h"
+#include "gtsam/linear/iterative.h"
+#include "gtsam/slam/dataset.h"
+#include "gtsam/symbolic/SymbolicFactorGraph.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 #include <fstream>
 

diff --git a/tests/testSubgraphSolver.cpp b/tests/testSubgraphSolver.cpp
index e31ce23..b9150fc 100644
--- a/tests/testSubgraphSolver.cpp
+++ b/tests/testSubgraphSolver.cpp
@@ -15,18 +15,18 @@
  *  @author Yong-Dian Jian
  **/
 
-#include <gtsam/linear/SubgraphSolver.h>
-
-#include <tests/smallExample.h>
-#include <gtsam/linear/GaussianBayesNet.h>
-#include <gtsam/linear/iterative.h>
-#include <gtsam/linear/GaussianFactorGraph.h>
-#include <gtsam/linear/SubgraphBuilder.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/inference/Ordering.h>
-#include <gtsam/base/numericalDerivative.h>
-
-#include <CppUnitLite/TestHarness.h>
+#include "gtsam/linear/SubgraphSolver.h"
+
+#include "tests/smallExample.h"
+#include "gtsam/linear/GaussianBayesNet.h"
+#include "gtsam/linear/iterative.h"
+#include "gtsam/linear/GaussianFactorGraph.h"
+#include "gtsam/linear/SubgraphBuilder.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/inference/Ordering.h"
+#include "gtsam/base/numericalDerivative.h"
+
+#include "CppUnitLite/TestHarness.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testTranslationRecovery.cpp b/tests/testTranslationRecovery.cpp
index 6e9c3ed..0998728 100644
--- a/tests/testTranslationRecovery.cpp
+++ b/tests/testTranslationRecovery.cpp
@@ -16,10 +16,10 @@
  * @brief test recovering translations when rotations are given.
  */
 
-#include <CppUnitLite/TestHarness.h>
-#include <gtsam/sfm/SfmData.h>
-#include <gtsam/sfm/TranslationRecovery.h>
-#include <gtsam/slam/dataset.h>
+#include "CppUnitLite/TestHarness.h"
+#include "gtsam/sfm/SfmData.h"
+#include "gtsam/sfm/TranslationRecovery.h"
+#include "gtsam/slam/dataset.h"
 
 using namespace std;
 using namespace gtsam;

diff --git a/tests/testVisualISAM2.cpp b/tests/testVisualISAM2.cpp
index 9fedc85..2bbdd8e 100644
--- a/tests/testVisualISAM2.cpp
+++ b/tests/testVisualISAM2.cpp
@@ -16,15 +16,15 @@
  * @author  Frank Dellaert
  */
 
-#include <CppUnitLite/TestHarness.h>
-
-#include <examples/SFMdata.h>
-#include <gtsam/geometry/Point2.h>
-#include <gtsam/inference/Symbol.h>
-#include <gtsam/nonlinear/ISAM2.h>
-#include <gtsam/nonlinear/NonlinearFactorGraph.h>
-#include <gtsam/nonlinear/Values.h>
-#include <gtsam/slam/ProjectionFactor.h>
+#include "CppUnitLite/TestHarness.h"
+
+#include "examples/SFMdata.h"
+#include "gtsam/geometry/Point2.h"
+#include "gtsam/inference/Symbol.h"
+#include "gtsam/nonlinear/ISAM2.h"
+#include "gtsam/nonlinear/NonlinearFactorGraph.h"
+#include "gtsam/nonlinear/Values.h"
+#include "gtsam/slam/ProjectionFactor.h"
 
 #include <vector>
 
